
stm32grbl11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfa4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  0800c77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001274  200001d4  0800c950  000201d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20001448  0800c950  00021448  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00027d59  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006825  00000000  00000000  00047f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000fd22  00000000  00000000  0004e77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011f8  00000000  00000000  0005e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000034b0  00000000  00000000  0005f698  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000bf07  00000000  00000000  00062b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000580d  00000000  00000000  0006ea4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007425c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003588  00000000  00000000  000742d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c09c 	.word	0x0800c09c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800c09c 	.word	0x0800c09c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	; 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	d1ed      	bne.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fmul>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d06f      	beq.n	8000da8 <__aeabi_fmul+0xf8>
 8000cc8:	441a      	add	r2, r3
 8000cca:	ea80 0c01 	eor.w	ip, r0, r1
 8000cce:	0240      	lsls	r0, r0, #9
 8000cd0:	bf18      	it	ne
 8000cd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cd6:	d01e      	beq.n	8000d16 <__aeabi_fmul+0x66>
 8000cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ce4:	fba0 3101 	umull	r3, r1, r0, r1
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf0:	bf3e      	ittt	cc
 8000cf2:	0049      	lslcc	r1, r1, #1
 8000cf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cf8:	005b      	lslcc	r3, r3, #1
 8000cfa:	ea40 0001 	orr.w	r0, r0, r1
 8000cfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d02:	2afd      	cmp	r2, #253	; 0xfd
 8000d04:	d81d      	bhi.n	8000d42 <__aeabi_fmul+0x92>
 8000d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1e:	bf08      	it	eq
 8000d20:	0249      	lsleq	r1, r1, #9
 8000d22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d2a:	3a7f      	subs	r2, #127	; 0x7f
 8000d2c:	bfc2      	ittt	gt
 8000d2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d36:	4770      	bxgt	lr
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	dc5d      	bgt.n	8000e00 <__aeabi_fmul+0x150>
 8000d44:	f112 0f19 	cmn.w	r2, #25
 8000d48:	bfdc      	itt	le
 8000d4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d4e:	4770      	bxle	lr
 8000d50:	f1c2 0200 	rsb	r2, r2, #0
 8000d54:	0041      	lsls	r1, r0, #1
 8000d56:	fa21 f102 	lsr.w	r1, r1, r2
 8000d5a:	f1c2 0220 	rsb	r2, r2, #32
 8000d5e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d62:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d66:	f140 0000 	adc.w	r0, r0, #0
 8000d6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d6e:	bf08      	it	eq
 8000d70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d74:	4770      	bx	lr
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d7e:	bf02      	ittt	eq
 8000d80:	0040      	lsleq	r0, r0, #1
 8000d82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d86:	3a01      	subeq	r2, #1
 8000d88:	d0f9      	beq.n	8000d7e <__aeabi_fmul+0xce>
 8000d8a:	ea40 000c 	orr.w	r0, r0, ip
 8000d8e:	f093 0f00 	teq	r3, #0
 8000d92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	bf02      	ittt	eq
 8000d98:	0049      	lsleq	r1, r1, #1
 8000d9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d9e:	3b01      	subeq	r3, #1
 8000da0:	d0f9      	beq.n	8000d96 <__aeabi_fmul+0xe6>
 8000da2:	ea41 010c 	orr.w	r1, r1, ip
 8000da6:	e78f      	b.n	8000cc8 <__aeabi_fmul+0x18>
 8000da8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dac:	ea92 0f0c 	teq	r2, ip
 8000db0:	bf18      	it	ne
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d00a      	beq.n	8000dce <__aeabi_fmul+0x11e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1d8      	bne.n	8000d76 <__aeabi_fmul+0xc6>
 8000dc4:	ea80 0001 	eor.w	r0, r0, r1
 8000dc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dcc:	4770      	bx	lr
 8000dce:	f090 0f00 	teq	r0, #0
 8000dd2:	bf17      	itett	ne
 8000dd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dd8:	4608      	moveq	r0, r1
 8000dda:	f091 0f00 	teqne	r1, #0
 8000dde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000de2:	d014      	beq.n	8000e0e <__aeabi_fmul+0x15e>
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	d101      	bne.n	8000dee <__aeabi_fmul+0x13e>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d10f      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dee:	ea93 0f0c 	teq	r3, ip
 8000df2:	d103      	bne.n	8000dfc <__aeabi_fmul+0x14c>
 8000df4:	024b      	lsls	r3, r1, #9
 8000df6:	bf18      	it	ne
 8000df8:	4608      	movne	r0, r1
 8000dfa:	d108      	bne.n	8000e0e <__aeabi_fmul+0x15e>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bx	lr
 8000e0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_fdiv>:
 8000e18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e20:	bf1e      	ittt	ne
 8000e22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e26:	ea92 0f0c 	teqne	r2, ip
 8000e2a:	ea93 0f0c 	teqne	r3, ip
 8000e2e:	d069      	beq.n	8000f04 <__aeabi_fdiv+0xec>
 8000e30:	eba2 0203 	sub.w	r2, r2, r3
 8000e34:	ea80 0c01 	eor.w	ip, r0, r1
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e3e:	d037      	beq.n	8000eb0 <__aeabi_fdiv+0x98>
 8000e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	428b      	cmp	r3, r1
 8000e52:	bf38      	it	cc
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	bf24      	itt	cs
 8000e62:	1a5b      	subcs	r3, r3, r1
 8000e64:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e6c:	bf24      	itt	cs
 8000e6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e7a:	bf24      	itt	cs
 8000e7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e88:	bf24      	itt	cs
 8000e8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	bf18      	it	ne
 8000e96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e9a:	d1e0      	bne.n	8000e5e <__aeabi_fdiv+0x46>
 8000e9c:	2afd      	cmp	r2, #253	; 0xfd
 8000e9e:	f63f af50 	bhi.w	8000d42 <__aeabi_fmul+0x92>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ea8:	bf08      	it	eq
 8000eaa:	f020 0001 	biceq.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eb4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eb8:	327f      	adds	r2, #127	; 0x7f
 8000eba:	bfc2      	ittt	gt
 8000ebc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ec4:	4770      	bxgt	lr
 8000ec6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	3a01      	subs	r2, #1
 8000ed0:	e737      	b.n	8000d42 <__aeabi_fmul+0x92>
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fdiv+0xc2>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fdiv+0xda>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e795      	b.n	8000e30 <__aeabi_fdiv+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	d108      	bne.n	8000f20 <__aeabi_fdiv+0x108>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	f47f af7d 	bne.w	8000e0e <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	f47f af70 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e776      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f20:	ea93 0f0c 	teq	r3, ip
 8000f24:	d104      	bne.n	8000f30 <__aeabi_fdiv+0x118>
 8000f26:	024b      	lsls	r3, r1, #9
 8000f28:	f43f af4c 	beq.w	8000dc4 <__aeabi_fmul+0x114>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e76e      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f34:	bf18      	it	ne
 8000f36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	d1ca      	bne.n	8000ed2 <__aeabi_fdiv+0xba>
 8000f3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f40:	f47f af5c 	bne.w	8000dfc <__aeabi_fmul+0x14c>
 8000f44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f48:	f47f af3c 	bne.w	8000dc4 <__aeabi_fmul+0x114>
 8000f4c:	e75f      	b.n	8000e0e <__aeabi_fmul+0x15e>
 8000f4e:	bf00      	nop

08000f50 <__gesf2>:
 8000f50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f54:	e006      	b.n	8000f64 <__cmpsf2+0x4>
 8000f56:	bf00      	nop

08000f58 <__lesf2>:
 8000f58:	f04f 0c01 	mov.w	ip, #1
 8000f5c:	e002      	b.n	8000f64 <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__cmpsf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	bf18      	it	ne
 8000f76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f7a:	d011      	beq.n	8000fa0 <__cmpsf2+0x40>
 8000f7c:	b001      	add	sp, #4
 8000f7e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f82:	bf18      	it	ne
 8000f84:	ea90 0f01 	teqne	r0, r1
 8000f88:	bf58      	it	pl
 8000f8a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f8e:	bf88      	it	hi
 8000f90:	17c8      	asrhi	r0, r1, #31
 8000f92:	bf38      	it	cc
 8000f94:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f98:	bf18      	it	ne
 8000f9a:	f040 0001 	orrne.w	r0, r0, #1
 8000f9e:	4770      	bx	lr
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	d102      	bne.n	8000fac <__cmpsf2+0x4c>
 8000fa6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000faa:	d105      	bne.n	8000fb8 <__cmpsf2+0x58>
 8000fac:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb0:	d1e4      	bne.n	8000f7c <__cmpsf2+0x1c>
 8000fb2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fb6:	d0e1      	beq.n	8000f7c <__cmpsf2+0x1c>
 8000fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_cfrcmple>:
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	4661      	mov	r1, ip
 8000fc6:	e7ff      	b.n	8000fc8 <__aeabi_cfcmpeq>

08000fc8 <__aeabi_cfcmpeq>:
 8000fc8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fca:	f7ff ffc9 	bl	8000f60 <__cmpsf2>
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	bf48      	it	mi
 8000fd2:	f110 0f00 	cmnmi.w	r0, #0
 8000fd6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fd8 <__aeabi_fcmpeq>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff fff4 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2001      	moveq	r0, #1
 8000fe4:	2000      	movne	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_fcmplt>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff ffea 	bl	8000fc8 <__aeabi_cfcmpeq>
 8000ff4:	bf34      	ite	cc
 8000ff6:	2001      	movcc	r0, #1
 8000ff8:	2000      	movcs	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmple>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffe0 	bl	8000fc8 <__aeabi_cfcmpeq>
 8001008:	bf94      	ite	ls
 800100a:	2001      	movls	r0, #1
 800100c:	2000      	movhi	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmpge>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffd2 	bl	8000fc0 <__aeabi_cfrcmple>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpgt>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffc8 	bl	8000fc0 <__aeabi_cfrcmple>
 8001030:	bf34      	ite	cc
 8001032:	2001      	movcc	r0, #1
 8001034:	2000      	movcs	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpun>:
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x14>
 800104a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104e:	d108      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 8001050:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001054:	d102      	bne.n	800105c <__aeabi_fcmpun+0x20>
 8001056:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105a:	d102      	bne.n	8001062 <__aeabi_fcmpun+0x26>
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	f04f 0001 	mov.w	r0, #1
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2iz>:
 8001068:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30f      	bcc.n	8001092 <__aeabi_f2iz+0x2a>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d90d      	bls.n	8001098 <__aeabi_f2iz+0x30>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	bf18      	it	ne
 800108e:	4240      	negne	r0, r0
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2iz+0x3a>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d105      	bne.n	80010ae <__aeabi_f2iz+0x46>
 80010a2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010a6:	bf08      	it	eq
 80010a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr

080010b4 <__aeabi_f2uiz>:
 80010b4:	0042      	lsls	r2, r0, #1
 80010b6:	d20e      	bcs.n	80010d6 <__aeabi_f2uiz+0x22>
 80010b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010bc:	d30b      	bcc.n	80010d6 <__aeabi_f2uiz+0x22>
 80010be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010c6:	d409      	bmi.n	80010dc <__aeabi_f2uiz+0x28>
 80010c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	fa23 f002 	lsr.w	r0, r3, r2
 80010d4:	4770      	bx	lr
 80010d6:	f04f 0000 	mov.w	r0, #0
 80010da:	4770      	bx	lr
 80010dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010e0:	d101      	bne.n	80010e6 <__aeabi_f2uiz+0x32>
 80010e2:	0242      	lsls	r2, r0, #9
 80010e4:	d102      	bne.n	80010ec <__aeabi_f2uiz+0x38>
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ea:	4770      	bx	lr
 80010ec:	f04f 0000 	mov.w	r0, #0
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <NVIC_PriorityGroupConfig+0x10>)
 80010fa:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010fe:	60d8      	str	r0, [r3, #12]
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001108:	78c3      	ldrb	r3, [r0, #3]
 800110a:	b95b      	cbnz	r3, 8001124 <NVIC_Init+0x1c>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800110c:	2101      	movs	r1, #1
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800110e:	7803      	ldrb	r3, [r0, #0]
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <NVIC_Init+0x5c>)
 8001112:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001114:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001118:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }
}
 8001122:	4770      	bx	lr
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <NVIC_Init+0x60>)
    tmpsub = tmpsub >> tmppriority;
 8001126:	210f      	movs	r1, #15
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001128:	68da      	ldr	r2, [r3, #12]
{
 800112a:	b470      	push	{r4, r5, r6}
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800112c:	43d2      	mvns	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800112e:	2401      	movs	r4, #1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001130:	7885      	ldrb	r5, [r0, #2]
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001132:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001134:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8001138:	f1c2 0604 	rsb	r6, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800113c:	fa21 f202 	lsr.w	r2, r1, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001140:	402a      	ands	r2, r5
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001142:	40b3      	lsls	r3, r6
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001144:	7801      	ldrb	r1, [r0, #0]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001146:	4313      	orrs	r3, r2
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001148:	4a06      	ldr	r2, [pc, #24]	; (8001164 <NVIC_Init+0x5c>)
    tmppriority = tmppriority << 0x04;
 800114a:	011b      	lsls	r3, r3, #4
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800114c:	f001 051f 	and.w	r5, r1, #31
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001150:	1850      	adds	r0, r2, r1
 8001152:	b2db      	uxtb	r3, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001154:	40ac      	lsls	r4, r5
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001156:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800115a:	0949      	lsrs	r1, r1, #5
 800115c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
}
 8001160:	bc70      	pop	{r4, r5, r6}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800116c:	7983      	ldrb	r3, [r0, #6]
 800116e:	b333      	cbz	r3, 80011be <EXTI_Init+0x52>
{
 8001170:	b430      	push	{r4, r5}
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001172:	6804      	ldr	r4, [r0, #0]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <EXTI_Init+0x78>)
 8001176:	43e1      	mvns	r1, r4
 8001178:	681d      	ldr	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800117a:	7902      	ldrb	r2, [r0, #4]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800117c:	400d      	ands	r5, r1
 800117e:	601d      	str	r5, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001180:	685d      	ldr	r5, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001182:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001186:	4029      	ands	r1, r5
 8001188:	6059      	str	r1, [r3, #4]
    tmp += EXTI_InitStruct->EXTI_Mode;
 800118a:	f502 3282 	add.w	r2, r2, #66560	; 0x10400

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800118e:	6815      	ldr	r5, [r2, #0]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001190:	7941      	ldrb	r1, [r0, #5]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001192:	432c      	orrs	r4, r5
 8001194:	6014      	str	r4, [r2, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001196:	6802      	ldr	r2, [r0, #0]
 8001198:	689c      	ldr	r4, [r3, #8]
 800119a:	43d0      	mvns	r0, r2
 800119c:	4004      	ands	r4, r0
 800119e:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a0:	68dc      	ldr	r4, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011a2:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80011a4:	ea00 0004 	and.w	r0, r0, r4
 80011a8:	60d8      	str	r0, [r3, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80011aa:	d013      	beq.n	80011d4 <EXTI_Init+0x68>
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80011ac:	bc30      	pop	{r4, r5}
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80011ae:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80011b2:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	4770      	bx	lr
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011be:	7903      	ldrb	r3, [r0, #4]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011c0:	6801      	ldr	r1, [r0, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;
 80011c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011c6:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	ea22 0201 	bic.w	r2, r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d4:	6899      	ldr	r1, [r3, #8]
}
 80011d6:	bc30      	pop	{r4, r5}
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80011d8:	4311      	orrs	r1, r2
 80011da:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	430a      	orrs	r2, r1
 80011e0:	60da      	str	r2, [r3, #12]
}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <EXTI_GetITStatus+0x18>)
 80011ea:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4003      	ands	r3, r0
 80011f0:	d004      	beq.n	80011fc <EXTI_GetITStatus+0x14>
 80011f2:	4202      	tst	r2, r0
 80011f4:	bf14      	ite	ne
 80011f6:	2001      	movne	r0, #1
 80011f8:	2000      	moveq	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	4618      	mov	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80011fe:	4770      	bx	lr
 8001200:	40010400 	.word	0x40010400

08001204 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001204:	4b01      	ldr	r3, [pc, #4]	; (800120c <EXTI_ClearITPendingBit+0x8>)
 8001206:	6158      	str	r0, [r3, #20]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400

08001210 <FLASH_Unlock>:
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <FLASH_Unlock+0xc>)
 8001212:	4903      	ldr	r1, [pc, #12]	; (8001220 <FLASH_Unlock+0x10>)
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <FLASH_Unlock+0x14>)
 8001216:	6059      	str	r1, [r3, #4]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	4770      	bx	lr
 800121c:	40022000 	.word	0x40022000
 8001220:	45670123 	.word	0x45670123
 8001224:	cdef89ab 	.word	0xcdef89ab

08001228 <FLASH_ErasePage>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001228:	4938      	ldr	r1, [pc, #224]	; (800130c <FLASH_ErasePage+0xe4>)
 800122a:	68cb      	ldr	r3, [r1, #12]
 800122c:	f013 0f01 	tst.w	r3, #1
 8001230:	68cb      	ldr	r3, [r1, #12]
 8001232:	d103      	bne.n	800123c <FLASH_ErasePage+0x14>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	d538      	bpl.n	80012aa <FLASH_ErasePage+0x82>
    { 
      flashstatus = FLASH_ERROR_PG;
 8001238:	2002      	movs	r0, #2
 800123a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800123c:	07db      	lsls	r3, r3, #31
 800123e:	d42c      	bmi.n	800129a <FLASH_ErasePage+0x72>
 8001240:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <FLASH_ErasePage+0xe4>)
 8001246:	68d1      	ldr	r1, [r2, #12]
 8001248:	0749      	lsls	r1, r1, #29
 800124a:	d505      	bpl.n	8001258 <FLASH_ErasePage+0x30>
      flashstatus = FLASH_ERROR_PG;
 800124c:	2002      	movs	r0, #2
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 800124e:	3b01      	subs	r3, #1
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf08      	it	eq
 8001254:	2005      	moveq	r0, #5
 8001256:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001258:	68d2      	ldr	r2, [r2, #12]
 800125a:	06d2      	lsls	r2, r2, #27
 800125c:	d41a      	bmi.n	8001294 <FLASH_ErasePage+0x6c>
  if(Timeout == 0x00 )
 800125e:	2b01      	cmp	r3, #1
 8001260:	d021      	beq.n	80012a6 <FLASH_ErasePage+0x7e>
    FLASH->CR|= CR_PER_Set;
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <FLASH_ErasePage+0xe4>)
 8001264:	6913      	ldr	r3, [r2, #16]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6113      	str	r3, [r2, #16]
    FLASH->AR = Page_Address; 
 800126c:	6150      	str	r0, [r2, #20]
    FLASH->CR|= CR_STRT_Set;
 800126e:	6913      	ldr	r3, [r2, #16]
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6113      	str	r3, [r2, #16]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001276:	68d3      	ldr	r3, [r2, #12]
 8001278:	f013 0f01 	tst.w	r3, #1
 800127c:	68d3      	ldr	r3, [r2, #12]
 800127e:	d119      	bne.n	80012b4 <FLASH_ErasePage+0x8c>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	d53b      	bpl.n	80012fc <FLASH_ErasePage+0xd4>
      flashstatus = FLASH_ERROR_PG;
 8001284:	2002      	movs	r0, #2
    FLASH->CR &= CR_PER_Reset;
 8001286:	f641 71fd 	movw	r1, #8189	; 0x1ffd
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <FLASH_ErasePage+0xe4>)
 800128c:	6913      	ldr	r3, [r2, #16]
 800128e:	400b      	ands	r3, r1
 8001290:	6113      	str	r3, [r2, #16]
 8001292:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 8001294:	2003      	movs	r0, #3
    Timeout--;
 8001296:	3b01      	subs	r3, #1
 8001298:	e7da      	b.n	8001250 <FLASH_ErasePage+0x28>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <FLASH_ErasePage+0xe8>)
 800129c:	68ca      	ldr	r2, [r1, #12]
 800129e:	07d2      	lsls	r2, r2, #31
 80012a0:	d5d0      	bpl.n	8001244 <FLASH_ErasePage+0x1c>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012a2:	3b01      	subs	r3, #1
 80012a4:	d1fa      	bne.n	800129c <FLASH_ErasePage+0x74>
    status = FLASH_TIMEOUT;
 80012a6:	2005      	movs	r0, #5
 80012a8:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012aa:	68cb      	ldr	r3, [r1, #12]
 80012ac:	06d9      	lsls	r1, r3, #27
 80012ae:	d5d8      	bpl.n	8001262 <FLASH_ErasePage+0x3a>
        flashstatus = FLASH_ERROR_WRP;
 80012b0:	2003      	movs	r0, #3
 80012b2:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012b4:	07d9      	lsls	r1, r3, #31
 80012b6:	d409      	bmi.n	80012cc <FLASH_ErasePage+0xa4>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012b8:	68d3      	ldr	r3, [r2, #12]
 80012ba:	075b      	lsls	r3, r3, #29
 80012bc:	d4e2      	bmi.n	8001284 <FLASH_ErasePage+0x5c>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012be:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012c0:	f013 0f10 	tst.w	r3, #16
 80012c4:	bf14      	ite	ne
 80012c6:	2003      	movne	r0, #3
 80012c8:	2004      	moveq	r0, #4
 80012ca:	e7dc      	b.n	8001286 <FLASH_ErasePage+0x5e>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <FLASH_ErasePage+0xe8>)
 80012ce:	68d1      	ldr	r1, [r2, #12]
 80012d0:	07c9      	lsls	r1, r1, #31
 80012d2:	d408      	bmi.n	80012e6 <FLASH_ErasePage+0xbe>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80012d4:	68d1      	ldr	r1, [r2, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	0749      	lsls	r1, r1, #29
 80012da:	d508      	bpl.n	80012ee <FLASH_ErasePage+0xc6>
      flashstatus = FLASH_ERROR_PG;
 80012dc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf08      	it	eq
 80012e2:	2005      	moveq	r0, #5
 80012e4:	e7cf      	b.n	8001286 <FLASH_ErasePage+0x5e>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80012e6:	3b01      	subs	r3, #1
 80012e8:	d1f1      	bne.n	80012ce <FLASH_ErasePage+0xa6>
    status = FLASH_TIMEOUT;
 80012ea:	2005      	movs	r0, #5
 80012ec:	e7cb      	b.n	8001286 <FLASH_ErasePage+0x5e>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012ee:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80012f0:	f012 0f10 	tst.w	r2, #16
 80012f4:	bf14      	ite	ne
 80012f6:	2003      	movne	r0, #3
 80012f8:	2004      	moveq	r0, #4
 80012fa:	e7f0      	b.n	80012de <FLASH_ErasePage+0xb6>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80012fc:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80012fe:	f013 0f10 	tst.w	r3, #16
 8001302:	bf0c      	ite	eq
 8001304:	2004      	moveq	r0, #4
 8001306:	2003      	movne	r0, #3
 8001308:	e7bd      	b.n	8001286 <FLASH_ErasePage+0x5e>
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000
 8001310:	000affff 	.word	0x000affff

08001314 <FLASH_ProgramHalfWord>:
{
 8001314:	b410      	push	{r4}
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001316:	4c39      	ldr	r4, [pc, #228]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001318:	68e3      	ldr	r3, [r4, #12]
 800131a:	f013 0f01 	tst.w	r3, #1
 800131e:	68e3      	ldr	r3, [r4, #12]
 8001320:	d104      	bne.n	800132c <FLASH_ProgramHalfWord+0x18>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001322:	075b      	lsls	r3, r3, #29
 8001324:	d538      	bpl.n	8001398 <FLASH_ProgramHalfWord+0x84>
      flashstatus = FLASH_ERROR_PG;
 8001326:	2002      	movs	r0, #2
}
 8001328:	bc10      	pop	{r4}
 800132a:	4770      	bx	lr
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800132c:	07db      	lsls	r3, r3, #31
 800132e:	d429      	bmi.n	8001384 <FLASH_ProgramHalfWord+0x70>
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001334:	4a31      	ldr	r2, [pc, #196]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001336:	68d4      	ldr	r4, [r2, #12]
 8001338:	0764      	lsls	r4, r4, #29
 800133a:	d505      	bpl.n	8001348 <FLASH_ProgramHalfWord+0x34>
      flashstatus = FLASH_ERROR_PG;
 800133c:	2002      	movs	r0, #2
    Timeout--;
 800133e:	3b01      	subs	r3, #1
    status = FLASH_TIMEOUT;
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf08      	it	eq
 8001344:	2005      	moveq	r0, #5
 8001346:	e7ef      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	06d2      	lsls	r2, r2, #27
 800134c:	d417      	bmi.n	800137e <FLASH_ProgramHalfWord+0x6a>
  if(Timeout == 0x00 )
 800134e:	2b01      	cmp	r3, #1
 8001350:	d01f      	beq.n	8001392 <FLASH_ProgramHalfWord+0x7e>
    FLASH->CR |= CR_PG_Set;
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
 8001354:	6913      	ldr	r3, [r2, #16]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 800135c:	8001      	strh	r1, [r0, #0]
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f013 0f01 	tst.w	r3, #1
 8001364:	68d3      	ldr	r3, [r2, #12]
 8001366:	d11c      	bne.n	80013a2 <FLASH_ProgramHalfWord+0x8e>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 8001368:	075b      	lsls	r3, r3, #29
 800136a:	d53f      	bpl.n	80013ec <FLASH_ProgramHalfWord+0xd8>
      flashstatus = FLASH_ERROR_PG;
 800136c:	2002      	movs	r0, #2
    FLASH->CR &= CR_PG_Reset;
 800136e:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <FLASH_ProgramHalfWord+0xe8>)
}
 8001374:	bc10      	pop	{r4}
    FLASH->CR &= CR_PG_Reset;
 8001376:	6913      	ldr	r3, [r2, #16]
 8001378:	400b      	ands	r3, r1
 800137a:	6113      	str	r3, [r2, #16]
}
 800137c:	4770      	bx	lr
        flashstatus = FLASH_ERROR_WRP;
 800137e:	2003      	movs	r0, #3
    Timeout--;
 8001380:	3b01      	subs	r3, #1
 8001382:	e7dd      	b.n	8001340 <FLASH_ProgramHalfWord+0x2c>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001384:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001388:	68e2      	ldr	r2, [r4, #12]
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	d5d2      	bpl.n	8001334 <FLASH_ProgramHalfWord+0x20>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 800138e:	3b01      	subs	r3, #1
 8001390:	d1fa      	bne.n	8001388 <FLASH_ProgramHalfWord+0x74>
    status = FLASH_TIMEOUT;
 8001392:	2005      	movs	r0, #5
}
 8001394:	bc10      	pop	{r4}
 8001396:	4770      	bx	lr
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001398:	68e3      	ldr	r3, [r4, #12]
 800139a:	06dc      	lsls	r4, r3, #27
 800139c:	d5d9      	bpl.n	8001352 <FLASH_ProgramHalfWord+0x3e>
        flashstatus = FLASH_ERROR_WRP;
 800139e:	2003      	movs	r0, #3
 80013a0:	e7c2      	b.n	8001328 <FLASH_ProgramHalfWord+0x14>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013a2:	07d9      	lsls	r1, r3, #31
 80013a4:	d409      	bmi.n	80013ba <FLASH_ProgramHalfWord+0xa6>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013a6:	68d3      	ldr	r3, [r2, #12]
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	d4df      	bmi.n	800136c <FLASH_ProgramHalfWord+0x58>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ac:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013ae:	f013 0f10 	tst.w	r3, #16
 80013b2:	bf14      	ite	ne
 80013b4:	2003      	movne	r0, #3
 80013b6:	2004      	moveq	r0, #4
 80013b8:	e7d9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80013ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013be:	68d1      	ldr	r1, [r2, #12]
 80013c0:	07cc      	lsls	r4, r1, #31
 80013c2:	d408      	bmi.n	80013d6 <FLASH_ProgramHalfWord+0xc2>
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80013c4:	68d1      	ldr	r1, [r2, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	0749      	lsls	r1, r1, #29
 80013ca:	d508      	bpl.n	80013de <FLASH_ProgramHalfWord+0xca>
      flashstatus = FLASH_ERROR_PG;
 80013cc:	2002      	movs	r0, #2
    status = FLASH_TIMEOUT;
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf08      	it	eq
 80013d2:	2005      	moveq	r0, #5
 80013d4:	e7cb      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80013d6:	3b01      	subs	r3, #1
 80013d8:	d1f1      	bne.n	80013be <FLASH_ProgramHalfWord+0xaa>
    status = FLASH_TIMEOUT;
 80013da:	2005      	movs	r0, #5
 80013dc:	e7c7      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013de:	68d2      	ldr	r2, [r2, #12]
        flashstatus = FLASH_COMPLETE;
 80013e0:	f012 0f10 	tst.w	r2, #16
 80013e4:	bf14      	ite	ne
 80013e6:	2003      	movne	r0, #3
 80013e8:	2004      	moveq	r0, #4
 80013ea:	e7f0      	b.n	80013ce <FLASH_ProgramHalfWord+0xba>
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80013ec:	68d3      	ldr	r3, [r2, #12]
        flashstatus = FLASH_ERROR_WRP;
 80013ee:	f013 0f10 	tst.w	r3, #16
 80013f2:	bf0c      	ite	eq
 80013f4:	2004      	moveq	r0, #4
 80013f6:	2003      	movne	r0, #3
 80013f8:	e7b9      	b.n	800136e <FLASH_ProgramHalfWord+0x5a>
 80013fa:	bf00      	nop
 80013fc:	40022000 	.word	0x40022000

08001400 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001400:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001402:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001404:	06eb      	lsls	r3, r5, #27
 8001406:	bf48      	it	mi
 8001408:	788b      	ldrbmi	r3, [r1, #2]
 800140a:	f005 040f 	and.w	r4, r5, #15
 800140e:	bf48      	it	mi
 8001410:	431c      	orrmi	r4, r3
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001412:	880b      	ldrh	r3, [r1, #0]
 8001414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001418:	d032      	beq.n	8001480 <GPIO_Init+0x80>
 800141a:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	f000 8081 	beq.w	8001524 <GPIO_Init+0x124>
 8001422:	2d28      	cmp	r5, #40	; 0x28
 8001424:	f000 80b6 	beq.w	8001594 <GPIO_Init+0x194>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8001428:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800142a:	bf44      	itt	mi
 800142c:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001430:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001432:	0799      	lsls	r1, r3, #30
        tmpreg &= ~pinmask;
 8001434:	bf44      	itt	mi
 8001436:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 800143a:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 800143e:	0759      	lsls	r1, r3, #29
        tmpreg &= ~pinmask;
 8001440:	bf44      	itt	mi
 8001442:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001446:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 800144a:	0719      	lsls	r1, r3, #28
        tmpreg &= ~pinmask;
 800144c:	bf44      	itt	mi
 800144e:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001452:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 8001456:	06d9      	lsls	r1, r3, #27
        tmpreg &= ~pinmask;
 8001458:	bf44      	itt	mi
 800145a:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800145e:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 8001462:	0699      	lsls	r1, r3, #26
        tmpreg &= ~pinmask;
 8001464:	bf44      	itt	mi
 8001466:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800146a:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 800146e:	0659      	lsls	r1, r3, #25
        tmpreg &= ~pinmask;
 8001470:	bf44      	itt	mi
 8001472:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001476:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 800147a:	0619      	lsls	r1, r3, #24
 800147c:	d471      	bmi.n	8001562 <GPIO_Init+0x162>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800147e:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d930      	bls.n	80014e6 <GPIO_Init+0xe6>
 8001484:	2d28      	cmp	r5, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8001486:	6842      	ldr	r2, [r0, #4]
 8001488:	d02f      	beq.n	80014ea <GPIO_Init+0xea>
 800148a:	2d48      	cmp	r5, #72	; 0x48
 800148c:	d06c      	beq.n	8001568 <GPIO_Init+0x168>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800148e:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8001490:	bf44      	itt	mi
 8001492:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001496:	4322      	orrmi	r2, r4
      if (currentpin == pos)
 8001498:	059d      	lsls	r5, r3, #22
        tmpreg &= ~pinmask;
 800149a:	bf44      	itt	mi
 800149c:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80014a0:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
      if (currentpin == pos)
 80014a4:	0559      	lsls	r1, r3, #21
        tmpreg &= ~pinmask;
 80014a6:	bf44      	itt	mi
 80014a8:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80014ac:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
      if (currentpin == pos)
 80014b0:	051d      	lsls	r5, r3, #20
        tmpreg &= ~pinmask;
 80014b2:	bf44      	itt	mi
 80014b4:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80014b8:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
      if (currentpin == pos)
 80014bc:	04d9      	lsls	r1, r3, #19
        tmpreg &= ~pinmask;
 80014be:	bf44      	itt	mi
 80014c0:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80014c4:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
      if (currentpin == pos)
 80014c8:	049d      	lsls	r5, r3, #18
        tmpreg &= ~pinmask;
 80014ca:	bf44      	itt	mi
 80014cc:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80014d0:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
      if (currentpin == pos)
 80014d4:	0459      	lsls	r1, r3, #17
        tmpreg &= ~pinmask;
 80014d6:	bf44      	itt	mi
 80014d8:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 80014dc:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
      if (currentpin == pos)
 80014e0:	041d      	lsls	r5, r3, #16
 80014e2:	d43b      	bmi.n	800155c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014e4:	6042      	str	r2, [r0, #4]
  }
}
 80014e6:	bc30      	pop	{r4, r5}
 80014e8:	4770      	bx	lr
      if (currentpin == pos)
 80014ea:	05d9      	lsls	r1, r3, #23
 80014ec:	f100 80d6 	bmi.w	800169c <GPIO_Init+0x29c>
 80014f0:	059d      	lsls	r5, r3, #22
 80014f2:	f100 80cb 	bmi.w	800168c <GPIO_Init+0x28c>
 80014f6:	0559      	lsls	r1, r3, #21
 80014f8:	f100 80c0 	bmi.w	800167c <GPIO_Init+0x27c>
 80014fc:	051d      	lsls	r5, r3, #20
 80014fe:	f100 80b5 	bmi.w	800166c <GPIO_Init+0x26c>
 8001502:	04d9      	lsls	r1, r3, #19
 8001504:	f100 80aa 	bmi.w	800165c <GPIO_Init+0x25c>
 8001508:	049d      	lsls	r5, r3, #18
 800150a:	f100 809f 	bmi.w	800164c <GPIO_Init+0x24c>
 800150e:	0459      	lsls	r1, r3, #17
 8001510:	f100 8094 	bmi.w	800163c <GPIO_Init+0x23c>
 8001514:	041b      	lsls	r3, r3, #16
 8001516:	d5e5      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800151c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001520:	6143      	str	r3, [r0, #20]
 8001522:	e7df      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001524:	07d9      	lsls	r1, r3, #31
 8001526:	f100 80e3 	bmi.w	80016f0 <GPIO_Init+0x2f0>
 800152a:	0799      	lsls	r1, r3, #30
 800152c:	f100 80d9 	bmi.w	80016e2 <GPIO_Init+0x2e2>
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	f100 80cf 	bmi.w	80016d4 <GPIO_Init+0x2d4>
 8001536:	0719      	lsls	r1, r3, #28
 8001538:	f100 80c5 	bmi.w	80016c6 <GPIO_Init+0x2c6>
 800153c:	06d9      	lsls	r1, r3, #27
 800153e:	f100 80bb 	bmi.w	80016b8 <GPIO_Init+0x2b8>
 8001542:	0699      	lsls	r1, r3, #26
 8001544:	f100 80b1 	bmi.w	80016aa <GPIO_Init+0x2aa>
 8001548:	0659      	lsls	r1, r3, #25
 800154a:	f100 80d7 	bmi.w	80016fc <GPIO_Init+0x2fc>
 800154e:	0619      	lsls	r1, r3, #24
 8001550:	d595      	bpl.n	800147e <GPIO_Init+0x7e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001552:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 8001554:	f364 721f 	bfi	r2, r4, #28, #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001558:	6101      	str	r1, [r0, #16]
 800155a:	e790      	b.n	800147e <GPIO_Init+0x7e>
        tmpreg |= (currentmode << pos);
 800155c:	f364 721f 	bfi	r2, r4, #28, #4
 8001560:	e7c0      	b.n	80014e4 <GPIO_Init+0xe4>
        tmpreg |= (currentmode << pos);
 8001562:	f364 721f 	bfi	r2, r4, #28, #4
 8001566:	e78a      	b.n	800147e <GPIO_Init+0x7e>
      if (currentpin == pos)
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d448      	bmi.n	80015fe <GPIO_Init+0x1fe>
 800156c:	059d      	lsls	r5, r3, #22
 800156e:	d43e      	bmi.n	80015ee <GPIO_Init+0x1ee>
 8001570:	0559      	lsls	r1, r3, #21
 8001572:	d434      	bmi.n	80015de <GPIO_Init+0x1de>
 8001574:	051d      	lsls	r5, r3, #20
 8001576:	d42a      	bmi.n	80015ce <GPIO_Init+0x1ce>
 8001578:	04d9      	lsls	r1, r3, #19
 800157a:	d44f      	bmi.n	800161c <GPIO_Init+0x21c>
 800157c:	049d      	lsls	r5, r3, #18
 800157e:	d445      	bmi.n	800160c <GPIO_Init+0x20c>
 8001580:	0459      	lsls	r1, r3, #17
 8001582:	d453      	bmi.n	800162c <GPIO_Init+0x22c>
 8001584:	041d      	lsls	r5, r3, #16
 8001586:	d5ad      	bpl.n	80014e4 <GPIO_Init+0xe4>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        tmpreg |= (currentmode << pos);
 800158c:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001590:	6103      	str	r3, [r0, #16]
 8001592:	e7a7      	b.n	80014e4 <GPIO_Init+0xe4>
      if (currentpin == pos)
 8001594:	07d9      	lsls	r1, r3, #31
 8001596:	f100 80e2 	bmi.w	800175e <GPIO_Init+0x35e>
 800159a:	0799      	lsls	r1, r3, #30
 800159c:	f100 80d8 	bmi.w	8001750 <GPIO_Init+0x350>
 80015a0:	0759      	lsls	r1, r3, #29
 80015a2:	f100 80ce 	bmi.w	8001742 <GPIO_Init+0x342>
 80015a6:	0719      	lsls	r1, r3, #28
 80015a8:	f100 80c4 	bmi.w	8001734 <GPIO_Init+0x334>
 80015ac:	06d9      	lsls	r1, r3, #27
 80015ae:	f100 80ba 	bmi.w	8001726 <GPIO_Init+0x326>
 80015b2:	0699      	lsls	r1, r3, #26
 80015b4:	f100 80b0 	bmi.w	8001718 <GPIO_Init+0x318>
 80015b8:	0659      	lsls	r1, r3, #25
 80015ba:	f100 80a6 	bmi.w	800170a <GPIO_Init+0x30a>
 80015be:	0619      	lsls	r1, r3, #24
 80015c0:	f57f af5d 	bpl.w	800147e <GPIO_Init+0x7e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015c4:	2180      	movs	r1, #128	; 0x80
        tmpreg |= (currentmode << pos);
 80015c6:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015ca:	6141      	str	r1, [r0, #20]
 80015cc:	e757      	b.n	800147e <GPIO_Init+0x7e>
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 80015d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80015d6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015da:	6101      	str	r1, [r0, #16]
 80015dc:	e7cc      	b.n	8001578 <GPIO_Init+0x178>
 80015de:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 80015e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80015e6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ea:	6101      	str	r1, [r0, #16]
 80015ec:	e7c2      	b.n	8001574 <GPIO_Init+0x174>
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 80015f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80015f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80015fa:	6101      	str	r1, [r0, #16]
 80015fc:	e7b8      	b.n	8001570 <GPIO_Init+0x170>
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 8001602:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001606:	4322      	orrs	r2, r4
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001608:	6101      	str	r1, [r0, #16]
 800160a:	e7af      	b.n	800156c <GPIO_Init+0x16c>
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001610:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001614:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001618:	6101      	str	r1, [r0, #16]
 800161a:	e7b1      	b.n	8001580 <GPIO_Init+0x180>
 800161c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001620:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001624:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001628:	6101      	str	r1, [r0, #16]
 800162a:	e7a7      	b.n	800157c <GPIO_Init+0x17c>
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001634:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001638:	6101      	str	r1, [r0, #16]
 800163a:	e7a3      	b.n	8001584 <GPIO_Init+0x184>
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        tmpreg &= ~pinmask;
 8001640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001644:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001648:	6141      	str	r1, [r0, #20]
 800164a:	e763      	b.n	8001514 <GPIO_Init+0x114>
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        tmpreg &= ~pinmask;
 8001650:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 8001654:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001658:	6141      	str	r1, [r0, #20]
 800165a:	e758      	b.n	800150e <GPIO_Init+0x10e>
 800165c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        tmpreg &= ~pinmask;
 8001660:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 8001664:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001668:	6141      	str	r1, [r0, #20]
 800166a:	e74d      	b.n	8001508 <GPIO_Init+0x108>
 800166c:	f44f 6100 	mov.w	r1, #2048	; 0x800
        tmpreg &= ~pinmask;
 8001670:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 8001674:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001678:	6141      	str	r1, [r0, #20]
 800167a:	e742      	b.n	8001502 <GPIO_Init+0x102>
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
        tmpreg &= ~pinmask;
 8001680:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001684:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001688:	6141      	str	r1, [r0, #20]
 800168a:	e737      	b.n	80014fc <GPIO_Init+0xfc>
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
        tmpreg &= ~pinmask;
 8001690:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001694:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001698:	6141      	str	r1, [r0, #20]
 800169a:	e72c      	b.n	80014f6 <GPIO_Init+0xf6>
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
        tmpreg &= ~pinmask;
 80016a0:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016a4:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80016a6:	6141      	str	r1, [r0, #20]
 80016a8:	e722      	b.n	80014f0 <GPIO_Init+0xf0>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016aa:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 80016ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 80016b0:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016b4:	6101      	str	r1, [r0, #16]
 80016b6:	e747      	b.n	8001548 <GPIO_Init+0x148>
 80016b8:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 80016ba:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 80016be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016c2:	6101      	str	r1, [r0, #16]
 80016c4:	e73d      	b.n	8001542 <GPIO_Init+0x142>
 80016c6:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 80016c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 80016cc:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016d0:	6101      	str	r1, [r0, #16]
 80016d2:	e733      	b.n	800153c <GPIO_Init+0x13c>
 80016d4:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 80016d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 80016da:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016de:	6101      	str	r1, [r0, #16]
 80016e0:	e729      	b.n	8001536 <GPIO_Init+0x136>
 80016e2:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 80016e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 80016e8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016ec:	6101      	str	r1, [r0, #16]
 80016ee:	e71f      	b.n	8001530 <GPIO_Init+0x130>
 80016f0:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 80016f2:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 80016f6:	4322      	orrs	r2, r4
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016f8:	6101      	str	r1, [r0, #16]
 80016fa:	e716      	b.n	800152a <GPIO_Init+0x12a>
 80016fc:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 80016fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001702:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001706:	6101      	str	r1, [r0, #16]
 8001708:	e721      	b.n	800154e <GPIO_Init+0x14e>
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800170a:	2140      	movs	r1, #64	; 0x40
        tmpreg &= ~pinmask;
 800170c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        tmpreg |= (currentmode << pos);
 8001710:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001714:	6141      	str	r1, [r0, #20]
 8001716:	e752      	b.n	80015be <GPIO_Init+0x1be>
 8001718:	2120      	movs	r1, #32
        tmpreg &= ~pinmask;
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        tmpreg |= (currentmode << pos);
 800171e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001722:	6141      	str	r1, [r0, #20]
 8001724:	e748      	b.n	80015b8 <GPIO_Init+0x1b8>
 8001726:	2110      	movs	r1, #16
        tmpreg &= ~pinmask;
 8001728:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        tmpreg |= (currentmode << pos);
 800172c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001730:	6141      	str	r1, [r0, #20]
 8001732:	e73e      	b.n	80015b2 <GPIO_Init+0x1b2>
 8001734:	2108      	movs	r1, #8
        tmpreg &= ~pinmask;
 8001736:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        tmpreg |= (currentmode << pos);
 800173a:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800173e:	6141      	str	r1, [r0, #20]
 8001740:	e734      	b.n	80015ac <GPIO_Init+0x1ac>
 8001742:	2104      	movs	r1, #4
        tmpreg &= ~pinmask;
 8001744:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        tmpreg |= (currentmode << pos);
 8001748:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800174c:	6141      	str	r1, [r0, #20]
 800174e:	e72a      	b.n	80015a6 <GPIO_Init+0x1a6>
 8001750:	2102      	movs	r1, #2
        tmpreg &= ~pinmask;
 8001752:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        tmpreg |= (currentmode << pos);
 8001756:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800175a:	6141      	str	r1, [r0, #20]
 800175c:	e720      	b.n	80015a0 <GPIO_Init+0x1a0>
 800175e:	2101      	movs	r1, #1
        tmpreg &= ~pinmask;
 8001760:	f022 020f 	bic.w	r2, r2, #15
        tmpreg |= (currentmode << pos);
 8001764:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001766:	6141      	str	r1, [r0, #20]
 8001768:	e717      	b.n	800159a <GPIO_Init+0x19a>
 800176a:	bf00      	nop

0800176c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800176c:	6880      	ldr	r0, [r0, #8]
}
 800176e:	b280      	uxth	r0, r0
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8001774:	68c0      	ldr	r0, [r0, #12]
}
 8001776:	b280      	uxth	r0, r0
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800177c:	6101      	str	r1, [r0, #16]
 800177e:	4770      	bx	lr

08001780 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8001780:	6141      	str	r1, [r0, #20]
 8001782:	4770      	bx	lr

08001784 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001784:	b90a      	cbnz	r2, 800178a <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8001786:	6141      	str	r1, [r0, #20]
 8001788:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800178a:	6101      	str	r1, [r0, #16]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001790:	2800      	cmp	r0, #0
  {
    tmpreg = AFIO->MAPR2;
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001794:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
    tmpreg = AFIO->MAPR2;
 8001798:	bfb4      	ite	lt
 800179a:	69db      	ldrlt	r3, [r3, #28]
    tmpreg = AFIO->MAPR;
 800179c:	685b      	ldrge	r3, [r3, #4]
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800179e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
{
 80017a2:	b430      	push	{r4, r5}
  tmp = GPIO_Remap & LSB_MASK;
 80017a4:	b284      	uxth	r4, r0
  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80017a6:	d01e      	beq.n	80017e6 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80017a8:	02c2      	lsls	r2, r0, #11
 80017aa:	d513      	bpl.n	80017d4 <GPIO_PinRemapConfig+0x44>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017ac:	2203      	movs	r2, #3
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80017ae:	f3c0 4503 	ubfx	r5, r0, #16, #4
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80017b2:	40aa      	lsls	r2, r5
    tmpreg &= ~tmp1;
 80017b4:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017b8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }

  if (NewState != DISABLE)
 80017bc:	b119      	cbz	r1, 80017c6 <GPIO_PinRemapConfig+0x36>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017be:	0d42      	lsrs	r2, r0, #21
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	4094      	lsls	r4, r2
 80017c4:	4323      	orrs	r3, r4
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    AFIO->MAPR2 = tmpreg;
 80017c6:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80017c8:	2800      	cmp	r0, #0
    AFIO->MAPR2 = tmpreg;
 80017ca:	bfb4      	ite	lt
 80017cc:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80017ce:	6053      	strge	r3, [r2, #4]
  }  
}
 80017d0:	bc30      	pop	{r4, r5}
 80017d2:	4770      	bx	lr
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80017d4:	0d42      	lsrs	r2, r0, #21
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	fa04 f202 	lsl.w	r2, r4, r2
 80017dc:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80017e0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80017e4:	e7ea      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017e6:	4d04      	ldr	r5, [pc, #16]	; (80017f8 <GPIO_PinRemapConfig+0x68>)
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80017e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80017ec:	686a      	ldr	r2, [r5, #4]
 80017ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f2:	606a      	str	r2, [r5, #4]
 80017f4:	e7e2      	b.n	80017bc <GPIO_PinRemapConfig+0x2c>
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000

080017fc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80017fc:	b410      	push	{r4}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80017fe:	240f      	movs	r4, #15
 8001800:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8001804:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800180c:	f001 0103 	and.w	r1, r1, #3
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001810:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001812:	0089      	lsls	r1, r1, #2
 8001814:	408c      	lsls	r4, r1
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001816:	ea22 0204 	bic.w	r2, r2, r4
 800181a:	609a      	str	r2, [r3, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	fa00 f101 	lsl.w	r1, r0, r1
 8001822:	4311      	orrs	r1, r2
 8001824:	6099      	str	r1, [r3, #8]
}
 8001826:	bc10      	pop	{r4}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800182c:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <RCC_GetClocksFreq+0x88>)
{
 800182e:	b430      	push	{r4, r5}
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001830:	6853      	ldr	r3, [r2, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
  
  switch (tmp)
 8001836:	2b04      	cmp	r3, #4
 8001838:	d006      	beq.n	8001848 <RCC_GetClocksFreq+0x1c>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d025      	beq.n	800188a <RCC_GetClocksFreq+0x5e>
 800183e:	b11b      	cbz	r3, 8001848 <RCC_GetClocksFreq+0x1c>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <RCC_GetClocksFreq+0x8c>)
      break;
 8001842:	4613      	mov	r3, r2
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001844:	6002      	str	r2, [r0, #0]
      break;
 8001846:	e001      	b.n	800184c <RCC_GetClocksFreq+0x20>
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <RCC_GetClocksFreq+0x8c>)
 800184a:	6003      	str	r3, [r0, #0]
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800184e:	4c1b      	ldr	r4, [pc, #108]	; (80018bc <RCC_GetClocksFreq+0x90>)
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001850:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8001852:	4d1b      	ldr	r5, [pc, #108]	; (80018c0 <RCC_GetClocksFreq+0x94>)
  tmp = tmp >> 4;
 8001854:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001858:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800185a:	40cb      	lsrs	r3, r1
 800185c:	6043      	str	r3, [r0, #4]
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800185e:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8001860:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 8001864:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001866:	fa23 f101 	lsr.w	r1, r3, r1
 800186a:	6081      	str	r1, [r0, #8]
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800186c:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 800186e:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8001872:	5c61      	ldrb	r1, [r4, r1]
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001874:	40cb      	lsrs	r3, r1
 8001876:	60c3      	str	r3, [r0, #12]
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001878:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 800187a:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 800187e:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8001880:	bc30      	pop	{r4, r5}
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001882:	fbb3 f3f2 	udiv	r3, r3, r2
 8001886:	6103      	str	r3, [r0, #16]
}
 8001888:	4770      	bx	lr
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800188a:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800188c:	6851      	ldr	r1, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 800188e:	f3c3 4383 	ubfx	r3, r3, #18, #4
      if (pllsource == 0x00)
 8001892:	03c9      	lsls	r1, r1, #15
      pllmull = ( pllmull >> 18) + 2;
 8001894:	f103 0302 	add.w	r3, r3, #2
      if (pllsource == 0x00)
 8001898:	d507      	bpl.n	80018aa <RCC_GetClocksFreq+0x7e>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800189a:	6852      	ldr	r2, [r2, #4]
 800189c:	0392      	lsls	r2, r2, #14
 800189e:	d404      	bmi.n	80018aa <RCC_GetClocksFreq+0x7e>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <RCC_GetClocksFreq+0x8c>)
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	6003      	str	r3, [r0, #0]
 80018a8:	e7d0      	b.n	800184c <RCC_GetClocksFreq+0x20>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80018aa:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <RCC_GetClocksFreq+0x98>)
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	6003      	str	r3, [r0, #0]
 80018b2:	e7cb      	b.n	800184c <RCC_GetClocksFreq+0x20>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	007a1200 	.word	0x007a1200
 80018bc:	20000004 	.word	0x20000004
 80018c0:	20000000 	.word	0x20000000
 80018c4:	003d0900 	.word	0x003d0900

080018c8 <RCC_APB2PeriphClockCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <RCC_APB2PeriphClockCmd+0x14>)
 80018ca:	6993      	ldr	r3, [r2, #24]
  if (NewState != DISABLE)
 80018cc:	b919      	cbnz	r1, 80018d6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80018ce:	ea23 0000 	bic.w	r0, r3, r0
 80018d2:	6190      	str	r0, [r2, #24]
 80018d4:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 80018d6:	4318      	orrs	r0, r3
 80018d8:	6190      	str	r0, [r2, #24]
 80018da:	4770      	bx	lr
 80018dc:	40021000 	.word	0x40021000

080018e0 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <TIM_TimeBaseInit+0xa0>)
  tmpcr1 = TIMx->CR1;  
 80018e2:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80018e4:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80018e6:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80018e8:	d012      	beq.n	8001910 <TIM_TimeBaseInit+0x30>
 80018ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ee:	4290      	cmp	r0, r2
 80018f0:	d00e      	beq.n	8001910 <TIM_TimeBaseInit+0x30>
 80018f2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018f6:	d00b      	beq.n	8001910 <TIM_TimeBaseInit+0x30>
 80018f8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80018fc:	4290      	cmp	r0, r2
 80018fe:	d007      	beq.n	8001910 <TIM_TimeBaseInit+0x30>
 8001900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001904:	4290      	cmp	r0, r2
 8001906:	d003      	beq.n	8001910 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001908:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800190c:	4290      	cmp	r0, r2
 800190e:	d103      	bne.n	8001918 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001910:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001916:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001918:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <TIM_TimeBaseInit+0xa4>)
 800191a:	4290      	cmp	r0, r2
 800191c:	d027      	beq.n	800196e <TIM_TimeBaseInit+0x8e>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d023      	beq.n	800196e <TIM_TimeBaseInit+0x8e>
{
 8001926:	b470      	push	{r4, r5, r6}
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800192c:	88ce      	ldrh	r6, [r1, #6]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800192e:	888d      	ldrh	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001930:	880c      	ldrh	r4, [r1, #0]
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001932:	b29b      	uxth	r3, r3
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001934:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001938:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800193a:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 800193c:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800193e:	8585      	strh	r5, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001940:	8504      	strh	r4, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001942:	d00e      	beq.n	8001962 <TIM_TimeBaseInit+0x82>
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <TIM_TimeBaseInit+0xa8>)
 8001946:	4298      	cmp	r0, r3
 8001948:	d00b      	beq.n	8001962 <TIM_TimeBaseInit+0x82>
 800194a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800194e:	4298      	cmp	r0, r3
 8001950:	d007      	beq.n	8001962 <TIM_TimeBaseInit+0x82>
 8001952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001956:	4298      	cmp	r0, r3
 8001958:	d003      	beq.n	8001962 <TIM_TimeBaseInit+0x82>
 800195a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800195e:	4298      	cmp	r0, r3
 8001960:	d101      	bne.n	8001966 <TIM_TimeBaseInit+0x86>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001962:	7a0b      	ldrb	r3, [r1, #8]
 8001964:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001966:	2301      	movs	r3, #1
}
 8001968:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800196a:	8283      	strh	r3, [r0, #20]
}
 800196c:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 800196e:	8003      	strh	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001970:	888b      	ldrh	r3, [r1, #4]
 8001972:	8583      	strh	r3, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001974:	880b      	ldrh	r3, [r1, #0]
 8001976:	8503      	strh	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001978:	2301      	movs	r3, #1
 800197a:	8283      	strh	r3, [r0, #20]
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40001000 	.word	0x40001000
 8001988:	40013400 	.word	0x40013400

0800198c <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800198c:	8c02      	ldrh	r2, [r0, #32]
{
 800198e:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	0412      	lsls	r2, r2, #16
 8001996:	0c12      	lsrs	r2, r2, #16
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001998:	890d      	ldrh	r5, [r1, #8]
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800199a:	8402      	strh	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800199c:	8c03      	ldrh	r3, [r0, #32]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800199e:	884e      	ldrh	r6, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 80019a0:	8884      	ldrh	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80019a2:	8b02      	ldrh	r2, [r0, #24]
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80019a4:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019a8:	4335      	orrs	r5, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80019aa:	041b      	lsls	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80019ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80019b0:	4e18      	ldr	r6, [pc, #96]	; (8001a14 <TIM_OC1Init+0x88>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80019b2:	0c1b      	lsrs	r3, r3, #16
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80019b4:	0412      	lsls	r2, r2, #16
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80019b6:	880f      	ldrh	r7, [r1, #0]
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019b8:	432b      	orrs	r3, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80019ba:	0c12      	lsrs	r2, r2, #16
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80019bc:	42b0      	cmp	r0, r6
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80019be:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 80019c0:	b2a4      	uxth	r4, r4
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80019c2:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80019c6:	d015      	beq.n	80019f4 <TIM_OC1Init+0x68>
 80019c8:	4d13      	ldr	r5, [pc, #76]	; (8001a18 <TIM_OC1Init+0x8c>)
 80019ca:	42a8      	cmp	r0, r5
 80019cc:	d012      	beq.n	80019f4 <TIM_OC1Init+0x68>
 80019ce:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80019d2:	42a8      	cmp	r0, r5
 80019d4:	d00e      	beq.n	80019f4 <TIM_OC1Init+0x68>
 80019d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019da:	42a8      	cmp	r0, r5
 80019dc:	d00a      	beq.n	80019f4 <TIM_OC1Init+0x68>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80019de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019e2:	42a8      	cmp	r0, r5
 80019e4:	d006      	beq.n	80019f4 <TIM_OC1Init+0x68>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80019e6:	88c9      	ldrh	r1, [r1, #6]
  TIMx->CR2 = tmpcr2;
 80019e8:	8084      	strh	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80019ea:	8302      	strh	r2, [r0, #24]
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80019ec:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80019ee:	8681      	strh	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80019f0:	8403      	strh	r3, [r0, #32]
}
 80019f2:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80019f4:	894e      	ldrh	r6, [r1, #10]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80019f6:	898d      	ldrh	r5, [r1, #12]
 80019f8:	89cf      	ldrh	r7, [r1, #14]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80019fa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80019fe:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8001a00:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001a04:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a06:	433d      	orrs	r5, r7
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8001a08:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a0c:	432c      	orrs	r4, r5
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001a0e:	4333      	orrs	r3, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001a10:	b2a4      	uxth	r4, r4
 8001a12:	e7e8      	b.n	80019e6 <TIM_OC1Init+0x5a>
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40013400 	.word	0x40013400

08001a1c <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a22:	6003      	str	r3, [r0, #0]
 8001a24:	6042      	str	r2, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001a26:	7203      	strb	r3, [r0, #8]
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a2c:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001a2e:	b929      	cbnz	r1, 8001a3c <TIM_Cmd+0x10>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	8003      	strh	r3, [r0, #0]
 8001a3a:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	8003      	strh	r3, [r0, #0]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001a48:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8001a4c:	b921      	cbnz	r1, 8001a58 <TIM_CtrlPWMOutputs+0x10>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8001a4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a52:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001a56:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 8001a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8001a66:	4770      	bx	lr

08001a68 <TIM_ITConfig>:
 8001a68:	8983      	ldrh	r3, [r0, #12]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b91a      	cbnz	r2, 8001a76 <TIM_ITConfig+0xe>
 8001a6e:	ea23 0101 	bic.w	r1, r3, r1
 8001a72:	8181      	strh	r1, [r0, #12]
 8001a74:	4770      	bx	lr
 8001a76:	4319      	orrs	r1, r3
 8001a78:	8181      	strh	r1, [r0, #12]
 8001a7a:	4770      	bx	lr

08001a7c <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8001a7c:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8001a7e:	f023 0308 	bic.w	r3, r3, #8
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001a86:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001a88:	8301      	strh	r1, [r0, #24]
 8001a8a:	4770      	bx	lr

08001a8c <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001a8c:	43c9      	mvns	r1, r1
 8001a8e:	b289      	uxth	r1, r1
 8001a90:	8201      	strh	r1, [r0, #16]
 8001a92:	4770      	bx	lr

08001a94 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	460d      	mov	r5, r1
 8001a98:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001a9a:	8a03      	ldrh	r3, [r0, #16]
 8001a9c:	88ca      	ldrh	r2, [r1, #6]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa4:	4313      	orrs	r3, r2
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8001aa6:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001aa8:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001aaa:	8982      	ldrh	r2, [r0, #12]
 8001aac:	88ae      	ldrh	r6, [r5, #4]
 8001aae:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8001ab2:	f023 030c 	bic.w	r3, r3, #12
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	8928      	ldrh	r0, [r5, #8]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	896a      	ldrh	r2, [r5, #10]
 8001abe:	4333      	orrs	r3, r6
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001ac6:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001ac8:	8aa3      	ldrh	r3, [r4, #20]
{
 8001aca:	b086      	sub	sp, #24
  tmpreg = USARTx->CR3;
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad2:	430b      	orrs	r3, r1
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001ad4:	a801      	add	r0, sp, #4
  USARTx->CR3 = (uint16_t)tmpreg;
 8001ad6:	82a3      	strh	r3, [r4, #20]
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001ad8:	f7ff fea8 	bl	800182c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001adc:	9904      	ldr	r1, [sp, #16]
  if (usartxbase == USART1_BASE)
 8001ade:	481a      	ldr	r0, [pc, #104]	; (8001b48 <USART_Init+0xb4>)
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001ae0:	9b03      	ldr	r3, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001ae2:	89a2      	ldrh	r2, [r4, #12]
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001ae4:	4284      	cmp	r4, r0
 8001ae6:	bf08      	it	eq
 8001ae8:	460b      	moveq	r3, r1
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001aea:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001aee:	682a      	ldr	r2, [r5, #0]
 8001af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001af4:	bf14      	ite	ne
 8001af6:	0052      	lslne	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001af8:	0092      	lsleq	r2, r2, #2
 8001afa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b02:	2264      	movs	r2, #100	; 0x64
  }
  tmpreg = (integerdivider / 100) << 4;
 8001b04:	4d11      	ldr	r5, [pc, #68]	; (8001b4c <USART_Init+0xb8>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b06:	89a1      	ldrh	r1, [r4, #12]
  tmpreg = (integerdivider / 100) << 4;
 8001b08:	fba5 6003 	umull	r6, r0, r5, r3
 8001b0c:	0940      	lsrs	r0, r0, #5
 8001b0e:	fb02 3310 	mls	r3, r2, r0, r3
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b12:	040a      	lsls	r2, r1, #16
  tmpreg = (integerdivider / 100) << 4;
 8001b14:	ea4f 1000 	mov.w	r0, r0, lsl #4
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001b18:	d40a      	bmi.n	8001b30 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	3332      	adds	r3, #50	; 0x32
 8001b1e:	fba5 2303 	umull	r2, r3, r5, r3
 8001b22:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8001b26:	4303      	orrs	r3, r0
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	8123      	strh	r3, [r4, #8]
}
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001b30:	00d9      	lsls	r1, r3, #3
 8001b32:	3132      	adds	r1, #50	; 0x32
 8001b34:	fba5 3101 	umull	r3, r1, r5, r1
 8001b38:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8001b3c:	ea42 0300 	orr.w	r3, r2, r0
  USARTx->BRR = (uint16_t)tmpreg;
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	8123      	strh	r3, [r4, #8]
}
 8001b44:	b006      	add	sp, #24
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	51eb851f 	.word	0x51eb851f

08001b50 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001b50:	8983      	ldrh	r3, [r0, #12]
  if (NewState != DISABLE)
 8001b52:	b929      	cbnz	r1, 8001b60 <USART_Cmd+0x10>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	8183      	strh	r3, [r0, #12]
 8001b5e:	4770      	bx	lr
    USARTx->CR1 |= CR1_UE_Set;
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b66:	8183      	strh	r3, [r0, #12]
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8001b6c:	2301      	movs	r3, #1
{
 8001b6e:	b410      	push	{r4}
  itpos = USART_IT & IT_Mask;
 8001b70:	f001 041f 	and.w	r4, r1, #31
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001b74:	f3c1 1142 	ubfx	r1, r1, #5, #3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b78:	2901      	cmp	r1, #1
  itmask = (((uint32_t)0x01) << itpos);
 8001b7a:	fa03 f304 	lsl.w	r3, r3, r4
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b7e:	d00f      	beq.n	8001ba0 <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b80:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001b82:	bf0c      	ite	eq
 8001b84:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b86:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8001b88:	b92a      	cbnz	r2, 8001b96 <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b8a:	6802      	ldr	r2, [r0, #0]
  }
}
 8001b8c:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001b8e:	ea22 0303 	bic.w	r3, r2, r3
 8001b92:	6003      	str	r3, [r0, #0]
}
 8001b94:	4770      	bx	lr
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b96:	6802      	ldr	r2, [r0, #0]
}
 8001b98:	bc10      	pop	{r4}
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	6003      	str	r3, [r0, #0]
}
 8001b9e:	4770      	bx	lr
    usartxbase += 0x0C;
 8001ba0:	300c      	adds	r0, #12
 8001ba2:	e7f1      	b.n	8001b88 <USART_ITConfig+0x1c>

08001ba4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001ba4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001ba8:	8081      	strh	r1, [r0, #4]
 8001baa:	4770      	bx	lr

08001bac <coolant_init>:

#include "grbl.h"


void coolant_init()
{
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001bb0:	2708      	movs	r7, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001bb2:	2510      	movs	r5, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bb4:	f04f 0803 	mov.w	r8, #3
{
 8001bb8:	b082      	sub	sp, #8
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001bba:	4c14      	ldr	r4, [pc, #80]	; (8001c0c <coolant_init+0x60>)
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001bbc:	ae02      	add	r6, sp, #8
	RCC_APB2PeriphClockCmd(RCC_COOLANT_FLOOD_PORT, ENABLE);
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	f7ff fe81 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_FLOOD_BIT;
 8001bc6:	f826 5d04 	strh.w	r5, [r6, #-4]!
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001bca:	4631      	mov	r1, r6
 8001bcc:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001bce:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bd2:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_Init(COOLANT_FLOOD_PORT, &GPIO_InitStructure);
 8001bd6:	f7ff fc13 	bl	8001400 <GPIO_Init>
	RCC_APB2PeriphClockCmd(RCC_COOLANT_MIST_PORT, ENABLE);
 8001bda:	4638      	mov	r0, r7
 8001bdc:	2101      	movs	r1, #1
 8001bde:	f7ff fe73 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001be2:	4631      	mov	r1, r6
 8001be4:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001be6:	f88d 8006 	strb.w	r8, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001bea:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_InitStructure.GPIO_Pin = 1 << COOLANT_MIST_BIT;
 8001bee:	f8ad 7004 	strh.w	r7, [sp, #4]
	GPIO_Init(COOLANT_MIST_PORT, &GPIO_InitStructure);
 8001bf2:	f7ff fc05 	bl	8001400 <GPIO_Init>
#endif
  #else
#ifdef AVRTARGET
	COOLANT_FLOOD_PORT &= ~(1 << COOLANT_FLOOD_BIT);
#else
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f7ff fdc1 	bl	8001780 <GPIO_ResetBits>
#endif
    #else
#ifdef AVRTARGET
	COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
#else
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001bfe:	4639      	mov	r1, r7
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff fdbd 	bl	8001780 <GPIO_ResetBits>
}
 8001c06:	b002      	add	sp, #8
 8001c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c0c:	40010c00 	.word	0x40010c00

08001c10 <coolant_get_state>:
{
 8001c10:	b510      	push	{r4, lr}
    if (bit_istrue(
 8001c12:	4807      	ldr	r0, [pc, #28]	; (8001c30 <coolant_get_state+0x20>)
 8001c14:	f7ff fdae 	bl	8001774 <GPIO_ReadOutputData>
  uint8_t cl_state = COOLANT_STATE_DISABLE;
 8001c18:	f3c0 1400 	ubfx	r4, r0, #4, #1
      if (bit_istrue(
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <coolant_get_state+0x20>)
 8001c1e:	f7ff fda9 	bl	8001774 <GPIO_ReadOutputData>
 8001c22:	0703      	lsls	r3, r0, #28
      cl_state |= COOLANT_STATE_MIST;
 8001c24:	bf48      	it	mi
 8001c26:	f044 0402 	orrmi.w	r4, r4, #2
}
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010c00 	.word	0x40010c00

08001c34 <coolant_stop>:
{
 8001c34:	b510      	push	{r4, lr}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c36:	4c05      	ldr	r4, [pc, #20]	; (8001c4c <coolant_stop+0x18>)
 8001c38:	2110      	movs	r1, #16
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f7ff fda0 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c40:	4620      	mov	r0, r4
#endif
    #endif
  #endif
#endif
}
 8001c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c46:	2108      	movs	r1, #8
 8001c48:	f7ff bd9a 	b.w	8001780 <GPIO_ResetBits>
 8001c4c:	40010c00 	.word	0x40010c00

08001c50 <coolant_set_state>:
// Main program only. Immediately sets flood coolant running state and also mist coolant, 
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
 8001c50:	b538      	push	{r3, r4, r5, lr}
  if (sys.abort) { return; } // Block during abort.  
 8001c52:	4d0f      	ldr	r5, [pc, #60]	; (8001c90 <coolant_set_state+0x40>)
 8001c54:	786b      	ldrb	r3, [r5, #1]
 8001c56:	b93b      	cbnz	r3, 8001c68 <coolant_set_state+0x18>
 8001c58:	4604      	mov	r4, r0
  
  if (mode == COOLANT_DISABLE) {
 8001c5a:	b130      	cbz	r0, 8001c6a <coolant_set_state+0x1a>
    coolant_stop(); 
  
  } else {
  
#if defined(AVRTARGET) || defined(STM32F103C8)
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001c5c:	0642      	lsls	r2, r0, #25
 8001c5e:	d40d      	bmi.n	8001c7c <coolant_set_state+0x2c>
#endif
      #endif
    }
  
    #ifdef ENABLE_M7
      if (mode & COOLANT_MIST_ENABLE) {
 8001c60:	0623      	lsls	r3, r4, #24
 8001c62:	d410      	bmi.n	8001c86 <coolant_set_state+0x36>
        #endif
      }
    #endif
#endif  
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001c64:	2300      	movs	r3, #0
 8001c66:	732b      	strb	r3, [r5, #12]
 8001c68:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <coolant_set_state+0x44>)
 8001c6e:	f7ff fd87 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c72:	2108      	movs	r1, #8
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <coolant_set_state+0x44>)
 8001c76:	f7ff fd83 	bl	8001780 <GPIO_ResetBits>
 8001c7a:	e7f3      	b.n	8001c64 <coolant_set_state+0x14>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <coolant_set_state+0x44>)
 8001c80:	f7ff fd7c 	bl	800177c <GPIO_SetBits>
 8001c84:	e7ec      	b.n	8001c60 <coolant_set_state+0x10>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001c86:	2108      	movs	r1, #8
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <coolant_set_state+0x44>)
 8001c8a:	f7ff fd77 	bl	800177c <GPIO_SetBits>
 8001c8e:	e7e9      	b.n	8001c64 <coolant_set_state+0x14>
 8001c90:	20001188 	.word	0x20001188
 8001c94:	40010c00 	.word	0x40010c00

08001c98 <coolant_sync>:


// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
 8001c98:	b538      	push	{r3, r4, r5, lr}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8001c9a:	4c12      	ldr	r4, [pc, #72]	; (8001ce4 <coolant_sync+0x4c>)
 8001c9c:	7823      	ldrb	r3, [r4, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d004      	beq.n	8001cac <coolant_sync+0x14>
 8001ca2:	4605      	mov	r5, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8001ca4:	f004 fabe 	bl	8006224 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.  
 8001ca8:	7863      	ldrb	r3, [r4, #1]
 8001caa:	b103      	cbz	r3, 8001cae <coolant_sync+0x16>
 8001cac:	bd38      	pop	{r3, r4, r5, pc}
  if (mode == COOLANT_DISABLE) {
 8001cae:	b135      	cbz	r5, 8001cbe <coolant_sync+0x26>
	  if (mode & COOLANT_FLOOD_ENABLE) {
 8001cb0:	066a      	lsls	r2, r5, #25
 8001cb2:	d40d      	bmi.n	8001cd0 <coolant_sync+0x38>
      if (mode & COOLANT_MIST_ENABLE) {
 8001cb4:	062b      	lsls	r3, r5, #24
 8001cb6:	d410      	bmi.n	8001cda <coolant_sync+0x42>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8001cb8:	2300      	movs	r3, #0
 8001cba:	7323      	strb	r3, [r4, #12]
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_ResetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001cbe:	2110      	movs	r1, #16
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <coolant_sync+0x50>)
 8001cc2:	f7ff fd5d 	bl	8001780 <GPIO_ResetBits>
	GPIO_ResetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <coolant_sync+0x50>)
 8001cca:	f7ff fd59 	bl	8001780 <GPIO_ResetBits>
 8001cce:	e7f3      	b.n	8001cb8 <coolant_sync+0x20>
		GPIO_SetBits(COOLANT_FLOOD_PORT,1 << COOLANT_FLOOD_BIT);
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <coolant_sync+0x50>)
 8001cd4:	f7ff fd52 	bl	800177c <GPIO_SetBits>
 8001cd8:	e7ec      	b.n	8001cb4 <coolant_sync+0x1c>
		  GPIO_SetBits(COOLANT_MIST_PORT, 1 << COOLANT_MIST_BIT);
 8001cda:	2108      	movs	r1, #8
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <coolant_sync+0x50>)
 8001cde:	f7ff fd4d 	bl	800177c <GPIO_SetBits>
 8001ce2:	e7e9      	b.n	8001cb8 <coolant_sync+0x20>
 8001ce4:	20001188 	.word	0x20001188
 8001ce8:	40010c00 	.word	0x40010c00

08001cec <eeprom_init>:
		nSize -= 4;
		nAddress += 4;
	}
}
void eeprom_init()
{
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <eeprom_init+0x30>)
 8001cee:	490c      	ldr	r1, [pc, #48]	; (8001d20 <eeprom_init+0x34>)
 8001cf0:	b410      	push	{r4}
 8001cf2:	1c5c      	adds	r4, r3, #1
 8001cf4:	1b09      	subs	r1, r1, r4
 8001cf6:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	uint16_t VarIdx = 0;
	uint8_t *pTmp = EE_Buffer;

	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
	{
		*pTmp++ = (*(__IO uint8_t*)(EEPROM_START_ADDRESS + VarIdx));
 8001cfa:	5cca      	ldrb	r2, [r1, r3]
 8001cfc:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
 8001d00:	4298      	cmp	r0, r3
 8001d02:	d1fa      	bne.n	8001cfa <eeprom_init+0xe>
	}

	if (EE_Buffer[0] != SETTINGS_VERSION)
 8001d04:	7823      	ldrb	r3, [r4, #0]
 8001d06:	2b0a      	cmp	r3, #10
 8001d08:	d006      	beq.n	8001d18 <eeprom_init+0x2c>
 8001d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0e:	21ff      	movs	r1, #255	; 0xff
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <eeprom_init+0x38>)
		for (VarIdx = 0; VarIdx < PAGE_SIZE; VarIdx++)
		{
			*pTmp++ = 0xFF;
		}
	}
}
 8001d12:	bc10      	pop	{r4}
 8001d14:	f009 b917 	b.w	800af46 <memset>
 8001d18:	bc10      	pop	{r4}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000cd3 	.word	0x20000cd3
 8001d20:	0801fc01 	.word	0x0801fc01
 8001d24:	20000cd4 	.word	0x20000cd4

08001d28 <eeprom_get_char>:
	EEAR = addr; // Set EEPROM address register.
	EECR = (1<<EERE); // Start EEPROM read operation.
	return EEDR; // Return the byte read from EEPROM.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	return EE_Buffer[addr];
 8001d28:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <eeprom_get_char+0x8>)
#endif
}
 8001d2a:	5c18      	ldrb	r0, [r3, r0]
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000cd4 	.word	0x20000cd4

08001d34 <eeprom_put_char>:
	}
	
	sei(); // Restore interrupt flag state.
#endif
#if defined(WIN32) || defined(STM32F103C8)
	EE_Buffer[addr] = new_value;
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <eeprom_put_char+0x8>)
 8001d36:	5419      	strb	r1, [r3, r0]
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000cd4 	.word	0x20000cd4

08001d40 <memcpy_to_eeprom_with_checksum>:
}

// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8001d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d44:	4606      	mov	r6, r0
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d040      	beq.n	8001dcc <memcpy_to_eeprom_with_checksum+0x8c>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	4f21      	ldr	r7, [pc, #132]	; (8001dd4 <memcpy_to_eeprom_with_checksum+0x94>)
 8001d4e:	1e44      	subs	r4, r0, #1
 8001d50:	443c      	add	r4, r7
 8001d52:	188d      	adds	r5, r1, r2
 8001d54:	2b00      	cmp	r3, #0
    checksum = (checksum << 1) || (checksum >> 7);
 8001d56:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001d5a:	bf18      	it	ne
 8001d5c:	2301      	movne	r3, #1
    checksum += *source;
 8001d5e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001d62:	4403      	add	r3, r0
  for(; size > 0; size--) { 
 8001d64:	42a9      	cmp	r1, r5
    checksum += *source;
 8001d66:	b2db      	uxtb	r3, r3
	EE_Buffer[addr] = new_value;
 8001d68:	f804 0f01 	strb.w	r0, [r4, #1]!
  for(; size > 0; size--) { 
 8001d6c:	d1f2      	bne.n	8001d54 <memcpy_to_eeprom_with_checksum+0x14>
 8001d6e:	4416      	add	r6, r2
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001d70:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <memcpy_to_eeprom_with_checksum+0x98>)
	EE_Buffer[addr] = new_value;
 8001d72:	55bb      	strb	r3, [r7, r6]
	FlashStatus = FLASH_ErasePage(EEPROM_START_ADDRESS);
 8001d74:	f7ff fa58 	bl	8001228 <FLASH_ErasePage>
	if (FlashStatus != FLASH_COMPLETE)
 8001d78:	2804      	cmp	r0, #4
 8001d7a:	d001      	beq.n	8001d80 <memcpy_to_eeprom_with_checksum+0x40>
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*pBuffer != 0xffff)
 8001d80:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8001d84:	4d15      	ldr	r5, [pc, #84]	; (8001ddc <memcpy_to_eeprom_with_checksum+0x9c>)
	if (FlashStatus != FLASH_COMPLETE)
 8001d86:	4c14      	ldr	r4, [pc, #80]	; (8001dd8 <memcpy_to_eeprom_with_checksum+0x98>)
	while (nSize > 0)
 8001d88:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001de0 <memcpy_to_eeprom_with_checksum+0xa0>
 8001d8c:	1eae      	subs	r6, r5, #2
		if (*pBuffer != 0xffff)
 8001d8e:	f835 1c04 	ldrh.w	r1, [r5, #-4]
 8001d92:	42b9      	cmp	r1, r7
 8001d94:	d002      	beq.n	8001d9c <memcpy_to_eeprom_with_checksum+0x5c>
			FLASH_ProgramHalfWord(nAddress, *pBuffer++);
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff fabc 	bl	8001314 <FLASH_ProgramHalfWord>
		if (*pBuffer != 0xffff)
 8001d9c:	8831      	ldrh	r1, [r6, #0]
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001d9e:	1ca0      	adds	r0, r4, #2
		if (*pBuffer != 0xffff)
 8001da0:	42b9      	cmp	r1, r7
		nAddress += 4;
 8001da2:	f104 0404 	add.w	r4, r4, #4
		if (*pBuffer != 0xffff)
 8001da6:	d009      	beq.n	8001dbc <memcpy_to_eeprom_with_checksum+0x7c>
			FLASH_ProgramHalfWord(nAddress + 2, *pBuffer++);
 8001da8:	f7ff fab4 	bl	8001314 <FLASH_ProgramHalfWord>
	while (nSize > 0)
 8001dac:	4544      	cmp	r4, r8
 8001dae:	f105 0504 	add.w	r5, r5, #4
 8001db2:	f106 0604 	add.w	r6, r6, #4
 8001db6:	d1ea      	bne.n	8001d8e <memcpy_to_eeprom_with_checksum+0x4e>
 8001db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dbc:	4544      	cmp	r4, r8
 8001dbe:	f105 0504 	add.w	r5, r5, #4
 8001dc2:	f106 0604 	add.w	r6, r6, #4
 8001dc6:	d1e2      	bne.n	8001d8e <memcpy_to_eeprom_with_checksum+0x4e>
 8001dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  unsigned char checksum = 0;
 8001dcc:	4613      	mov	r3, r2
 8001dce:	4f01      	ldr	r7, [pc, #4]	; (8001dd4 <memcpy_to_eeprom_with_checksum+0x94>)
 8001dd0:	e7ce      	b.n	8001d70 <memcpy_to_eeprom_with_checksum+0x30>
 8001dd2:	bf00      	nop
 8001dd4:	20000cd4 	.word	0x20000cd4
 8001dd8:	0801fc00 	.word	0x0801fc00
 8001ddc:	20000cd8 	.word	0x20000cd8
 8001de0:	08020000 	.word	0x08020000

08001de4 <memcpy_from_eeprom_with_checksum>:
  eeprom_flush();
#endif
#endif
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8001de4:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8001de6:	b1ca      	cbz	r2, 8001e1c <memcpy_from_eeprom_with_checksum+0x38>
 8001de8:	2300      	movs	r3, #0
 8001dea:	4f0e      	ldr	r7, [pc, #56]	; (8001e24 <memcpy_from_eeprom_with_checksum+0x40>)
 8001dec:	1e4d      	subs	r5, r1, #1
 8001dee:	443d      	add	r5, r7
 8001df0:	1886      	adds	r6, r0, r2
 8001df2:	2b00      	cmp	r3, #0
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8001df4:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8001df8:	bf18      	it	ne
 8001dfa:	2301      	movne	r3, #1
	return EE_Buffer[addr];
 8001dfc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    checksum += data;    
    *(destination++) = data; 
 8001e00:	f800 4b01 	strb.w	r4, [r0], #1
    checksum += data;    
 8001e04:	4423      	add	r3, r4
  for(; size > 0; size--) { 
 8001e06:	42b0      	cmp	r0, r6
    checksum += data;    
 8001e08:	b2db      	uxtb	r3, r3
  for(; size > 0; size--) { 
 8001e0a:	d1f2      	bne.n	8001df2 <memcpy_from_eeprom_with_checksum+0xe>
 8001e0c:	4411      	add	r1, r2
  }
  return(checksum == eeprom_get_char(source));
 8001e0e:	5c78      	ldrb	r0, [r7, r1]
}
 8001e10:	bcf0      	pop	{r4, r5, r6, r7}
 8001e12:	1ac0      	subs	r0, r0, r3
 8001e14:	fab0 f080 	clz	r0, r0
 8001e18:	0940      	lsrs	r0, r0, #5
 8001e1a:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	4f01      	ldr	r7, [pc, #4]	; (8001e24 <memcpy_from_eeprom_with_checksum+0x40>)
 8001e20:	e7f5      	b.n	8001e0e <memcpy_from_eeprom_with_checksum+0x2a>
 8001e22:	bf00      	nop
 8001e24:	20000cd4 	.word	0x20000cd4

08001e28 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8001e28:	b508      	push	{r3, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	225c      	movs	r2, #92	; 0x5c
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <gc_init+0x24>)
 8001e30:	f009 f889 	bl	800af46 <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8001e34:	4906      	ldr	r1, [pc, #24]	; (8001e50 <gc_init+0x28>)
 8001e36:	2000      	movs	r0, #0
 8001e38:	f005 fd6e 	bl	8007918 <settings_read_coord_data>
 8001e3c:	b100      	cbz	r0, 8001e40 <gc_init+0x18>
 8001e3e:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001e40:	2007      	movs	r0, #7
  }
}
 8001e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8001e46:	f004 bce3 	b.w	8006810 <report_status_message>
 8001e4a:	bf00      	nop
 8001e4c:	200010d4 	.word	0x200010d4
 8001e50:	20001104 	.word	0x20001104

08001e54 <gc_sync_position>:

// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8001e54:	4901      	ldr	r1, [pc, #4]	; (8001e5c <gc_sync_position+0x8>)
 8001e56:	4802      	ldr	r0, [pc, #8]	; (8001e60 <gc_sync_position+0xc>)
 8001e58:	f007 bd70 	b.w	800993c <system_convert_array_steps_to_mpos>
 8001e5c:	200011b4 	.word	0x200011b4
 8001e60:	200010f0 	.word	0x200010f0

08001e64 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e68:	4607      	mov	r7, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001e6a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 8002100 <gc_execute_line+0x29c>
 8001e6e:	2254      	movs	r2, #84	; 0x54
 8001e70:	2100      	movs	r1, #0
{
 8001e72:	b09f      	sub	sp, #124	; 0x7c
  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8001e74:	4640      	mov	r0, r8
 8001e76:	f009 f866 	bl	800af46 <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8001e7a:	4b9d      	ldr	r3, [pc, #628]	; (80020f0 <gc_execute_line+0x28c>)
 8001e7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001e7e:	f8c8 0001 	str.w	r0, [r8, #1]
 8001e82:	f8c8 1005 	str.w	r1, [r8, #5]
 8001e86:	f8c8 2009 	str.w	r2, [r8, #9]
  uint16_t command_words = 0; // Tracks G and M command words. Also used for modal group violations.
  uint16_t value_words = 0; // Tracks value words.
  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8001e8a:	783b      	ldrb	r3, [r7, #0]
 8001e8c:	2b24      	cmp	r3, #36	; 0x24
 8001e8e:	f000 811c 	beq.w	80020ca <gc_execute_line+0x266>
 8001e92:	2310      	movs	r3, #16
  char letter;
  float value;
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8001e94:	2200      	movs	r2, #0
 8001e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e98:	2304      	movs	r3, #4
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8001e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8001e9c:	930a      	str	r3, [sp, #40]	; 0x28
            word_bit = MODAL_GROUP_M8;
            switch(int_value) {
              #ifdef ENABLE_M7
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
              #endif
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001e9e:	f04f 0900 	mov.w	r9, #0
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001ea2:	f817 a002 	ldrb.w	sl, [r7, r2]
 8001ea6:	f88d 2053 	strb.w	r2, [sp, #83]	; 0x53
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8001eaa:	464c      	mov	r4, r9
 8001eac:	f8cd 9020 	str.w	r9, [sp, #32]
 8001eb0:	f8cd 9018 	str.w	r9, [sp, #24]
 8001eb4:	f8cd 901c 	str.w	r9, [sp, #28]
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8001eb8:	f1ba 0f00 	cmp.w	sl, #0
 8001ebc:	f000 80e5 	beq.w	800208a <gc_execute_line+0x226>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8001ec0:	f1aa 0541 	sub.w	r5, sl, #65	; 0x41
 8001ec4:	b2eb      	uxtb	r3, r5
 8001ec6:	2b19      	cmp	r3, #25
 8001ec8:	f200 82ac 	bhi.w	8002424 <gc_execute_line+0x5c0>
    char_counter++;
 8001ecc:	1c53      	adds	r3, r2, #1
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001ece:	f10d 0153 	add.w	r1, sp, #83	; 0x53
 8001ed2:	aa15      	add	r2, sp, #84	; 0x54
 8001ed4:	4638      	mov	r0, r7
    char_counter++;
 8001ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8001eda:	f002 f909 	bl	80040f0 <read_float>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	f000 82a5 	beq.w	800242e <gc_execute_line+0x5ca>
    int_value = truncf(value);
 8001ee4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8001ee8:	4658      	mov	r0, fp
 8001eea:	f7ff f8e3 	bl	80010b4 <__aeabi_f2uiz>
 8001eee:	b2c6      	uxtb	r6, r0
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7fe fe89 	bl	8000c08 <__aeabi_i2f>
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	4658      	mov	r0, fp
 8001efa:	f7fe fdcf 	bl	8000a9c <__aeabi_fsub>
 8001efe:	497d      	ldr	r1, [pc, #500]	; (80020f4 <gc_execute_line+0x290>)
 8001f00:	f7fe fed6 	bl	8000cb0 <__aeabi_fmul>
 8001f04:	f009 f8dc 	bl	800b0c0 <lroundf>
    switch(letter) {
 8001f08:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
	mantissa = (uint16_t)lroundf(100 * (value - int_value)); // Compute mantissa for Gxx.x commands.
 8001f0c:	b282      	uxth	r2, r0
    switch(letter) {
 8001f0e:	d024      	beq.n	8001f5a <gc_execute_line+0xf6>
 8001f10:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
 8001f14:	f040 8085 	bne.w	8002022 <gc_execute_line+0x1be>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	f040 82c5 	bne.w	80024a8 <gc_execute_line+0x644>
 8001f1e:	2e1e      	cmp	r6, #30
 8001f20:	f200 8104 	bhi.w	800212c <gc_execute_line+0x2c8>
 8001f24:	2201      	movs	r2, #1
 8001f26:	4974      	ldr	r1, [pc, #464]	; (80020f8 <gc_execute_line+0x294>)
 8001f28:	40b2      	lsls	r2, r6
 8001f2a:	420a      	tst	r2, r1
 8001f2c:	f040 8098 	bne.w	8002060 <gc_execute_line+0x1fc>
 8001f30:	f412 7f60 	tst.w	r2, #896	; 0x380
 8001f34:	f040 80bc 	bne.w	80020b0 <gc_execute_line+0x24c>
 8001f38:	f012 0f38 	tst.w	r2, #56	; 0x38
 8001f3c:	f000 80f6 	beq.w	800212c <gc_execute_line+0x2c8>
            switch(int_value) {
 8001f40:	2e04      	cmp	r6, #4
 8001f42:	f000 8203 	beq.w	800234c <gc_execute_line+0x4e8>
 8001f46:	2e05      	cmp	r6, #5
 8001f48:	f000 8291 	beq.w	800246e <gc_execute_line+0x60a>
 8001f4c:	2e03      	cmp	r6, #3
 8001f4e:	f000 820b 	beq.w	8002368 <gc_execute_line+0x504>
 8001f52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f56:	230c      	movs	r3, #12
 8001f58:	e089      	b.n	800206e <gc_execute_line+0x20a>
        switch(int_value) {
 8001f5a:	2e5e      	cmp	r6, #94	; 0x5e
 8001f5c:	f200 80e6 	bhi.w	800212c <gc_execute_line+0x2c8>
 8001f60:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001f64:	00d000d0 	.word	0x00d000d0
 8001f68:	00d000d0 	.word	0x00d000d0
 8001f6c:	00e4014a 	.word	0x00e4014a
 8001f70:	00e400e4 	.word	0x00e400e4
 8001f74:	00e400e4 	.word	0x00e400e4
 8001f78:	00e40132 	.word	0x00e40132
 8001f7c:	00e400e4 	.word	0x00e400e4
 8001f80:	00e400e4 	.word	0x00e400e4
 8001f84:	014400e4 	.word	0x014400e4
 8001f88:	01440144 	.word	0x01440144
 8001f8c:	01120112 	.word	0x01120112
 8001f90:	00e400e4 	.word	0x00e400e4
 8001f94:	00e400e4 	.word	0x00e400e4
 8001f98:	00e400e4 	.word	0x00e400e4
 8001f9c:	00e40132 	.word	0x00e40132
 8001fa0:	00e40132 	.word	0x00e40132
 8001fa4:	00e400e4 	.word	0x00e400e4
 8001fa8:	00e400e4 	.word	0x00e400e4
 8001fac:	00e400e4 	.word	0x00e400e4
 8001fb0:	00e400d0 	.word	0x00e400d0
 8001fb4:	00e400f0 	.word	0x00e400f0
 8001fb8:	012200e4 	.word	0x012200e4
 8001fbc:	00e400e4 	.word	0x00e400e4
 8001fc0:	00e400e4 	.word	0x00e400e4
 8001fc4:	012200e4 	.word	0x012200e4
 8001fc8:	00e400e4 	.word	0x00e400e4
 8001fcc:	014a00e4 	.word	0x014a00e4
 8001fd0:	01180118 	.word	0x01180118
 8001fd4:	01180118 	.word	0x01180118
 8001fd8:	01180118 	.word	0x01180118
 8001fdc:	011e00e4 	.word	0x011e00e4
 8001fe0:	00e400e4 	.word	0x00e400e4
 8001fe4:	00e400e4 	.word	0x00e400e4
 8001fe8:	00e400e4 	.word	0x00e400e4
 8001fec:	00e400e4 	.word	0x00e400e4
 8001ff0:	00e400e4 	.word	0x00e400e4
 8001ff4:	00e400e4 	.word	0x00e400e4
 8001ff8:	00e400e4 	.word	0x00e400e4
 8001ffc:	00e400e4 	.word	0x00e400e4
 8002000:	00e400e4 	.word	0x00e400e4
 8002004:	00e400fe 	.word	0x00e400fe
 8002008:	00e400e4 	.word	0x00e400e4
 800200c:	00e400e4 	.word	0x00e400e4
 8002010:	00e400e4 	.word	0x00e400e4
 8002014:	00e400e4 	.word	0x00e400e4
 8002018:	01030103 	.word	0x01030103
 800201c:	010c0132 	.word	0x010c0132
 8002020:	010c      	.short	0x010c
      default:

        /* Non-Command Words: This initial parsing phase only checks for repeats of the remaining
           legal g-code words and stores their value. Error-checking is performed later since some
           words (I,J,K,L,P,R) have multiple connotations and/or depend on the issued commands. */
        switch(letter){
 8002022:	2d19      	cmp	r5, #25
 8002024:	f200 8082 	bhi.w	800212c <gc_execute_line+0x2c8>
 8002028:	e8df f015 	tbh	[pc, r5, lsl #1]
 800202c:	017a0114 	.word	0x017a0114
 8002030:	00800080 	.word	0x00800080
 8002034:	01840080 	.word	0x01840080
 8002038:	00800080 	.word	0x00800080
 800203c:	010200f3 	.word	0x010200f3
 8002040:	013b0132 	.word	0x013b0132
 8002044:	01400080 	.word	0x01400080
 8002048:	01530080 	.word	0x01530080
 800204c:	01580080 	.word	0x01580080
 8002050:	0163015d 	.word	0x0163015d
 8002054:	00800080 	.word	0x00800080
 8002058:	01700080 	.word	0x01700080
 800205c:	0128011e 	.word	0x0128011e
            switch(int_value) {
 8002060:	2e00      	cmp	r6, #0
 8002062:	d068      	beq.n	8002136 <gc_execute_line+0x2d2>
 8002064:	2e01      	cmp	r6, #1
 8002066:	d13d      	bne.n	80020e4 <gc_execute_line+0x280>
 8002068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800206c:	230b      	movs	r3, #11
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800206e:	fa44 f303 	asr.w	r3, r4, r3
 8002072:	07d8      	lsls	r0, r3, #31
 8002074:	f100 8212 	bmi.w	800249c <gc_execute_line+0x638>
        command_words |= bit(word_bit);
 8002078:	4314      	orrs	r4, r2
 800207a:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 800207e:	f817 a002 	ldrb.w	sl, [r7, r2]
 8002082:	f1ba 0f00 	cmp.w	sl, #0
 8002086:	f47f af1b 	bne.w	8001ec0 <gc_execute_line+0x5c>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 800208a:	9b06      	ldr	r3, [sp, #24]
 800208c:	b123      	cbz	r3, 8002098 <gc_execute_line+0x234>
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 800208e:	9b07      	ldr	r3, [sp, #28]
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf08      	it	eq
 8002094:	2302      	moveq	r3, #2
 8002096:	9307      	str	r3, [sp, #28]
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8002098:	f019 0f20 	tst.w	r9, #32
 800209c:	f000 8176 	beq.w	800238c <gc_execute_line+0x528>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <gc_execute_line+0x298>)
 80020a2:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 80020a6:	429a      	cmp	r2, r3
 80020a8:	f340 8170 	ble.w	800238c <gc_execute_line+0x528>
 80020ac:	241b      	movs	r4, #27
 80020ae:	e03e      	b.n	800212e <gc_execute_line+0x2ca>
            switch(int_value) {
 80020b0:	2e08      	cmp	r6, #8
 80020b2:	f000 8144 	beq.w	800233e <gc_execute_line+0x4da>
 80020b6:	2e09      	cmp	r6, #9
 80020b8:	f000 81be 	beq.w	8002438 <gc_execute_line+0x5d4>
 80020bc:	2e07      	cmp	r6, #7
 80020be:	f000 814c 	beq.w	800235a <gc_execute_line+0x4f6>
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	230d      	movs	r3, #13
 80020c8:	e7d1      	b.n	800206e <gc_execute_line+0x20a>
	gc_block.modal.motion = MOTION_MODE_LINEAR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f888 3001 	strb.w	r3, [r8, #1]
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 80020d0:	9309      	str	r3, [sp, #36]	; 0x24
 80020d2:	2311      	movs	r3, #17
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80020d4:	2200      	movs	r2, #0
 80020d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80020d8:	2305      	movs	r3, #5
 80020da:	f888 2002 	strb.w	r2, [r8, #2]
 80020de:	930a      	str	r3, [sp, #40]	; 0x28
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 80020e0:	2203      	movs	r2, #3
 80020e2:	e6dc      	b.n	8001e9e <gc_execute_line+0x3a>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 80020e4:	f888 6008 	strb.w	r6, [r8, #8]
 80020e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ec:	230b      	movs	r3, #11
 80020ee:	e7be      	b.n	800206e <gc_execute_line+0x20a>
 80020f0:	200010d4 	.word	0x200010d4
 80020f4:	42c80000 	.word	0x42c80000
 80020f8:	40000007 	.word	0x40000007
 80020fc:	00989680 	.word	0x00989680
 8002100:	20001130 	.word	0x20001130
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8002104:	9b07      	ldr	r3, [sp, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 8320 	bne.w	800274c <gc_execute_line+0x8e8>
            if (int_value == 38){
 800210c:	2e26      	cmp	r6, #38	; 0x26
            gc_block.modal.motion = int_value;
 800210e:	f888 6001 	strb.w	r6, [r8, #1]
            if (int_value == 38){
 8002112:	f040 81c5 	bne.w	80024a0 <gc_execute_line+0x63c>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8002116:	f1a2 0314 	sub.w	r3, r2, #20
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b1e      	cmp	r3, #30
 800211e:	d805      	bhi.n	800212c <gc_execute_line+0x2c8>
 8002120:	49c9      	ldr	r1, [pc, #804]	; (8002448 <gc_execute_line+0x5e4>)
 8002122:	fa21 f303 	lsr.w	r3, r1, r3
 8002126:	07de      	lsls	r6, r3, #31
 8002128:	f100 8125 	bmi.w	8002376 <gc_execute_line+0x512>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
      if (gc_block.values.l != 20) {
        if (gc_block.values.l == 2) {
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 800212c:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 800212e:	4620      	mov	r0, r4
 8002130:	b01f      	add	sp, #124	; 0x7c
 8002132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8002136:	2303      	movs	r3, #3
 8002138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213c:	f888 3008 	strb.w	r3, [r8, #8]
 8002140:	230b      	movs	r3, #11
 8002142:	e794      	b.n	800206e <gc_execute_line+0x20a>
        switch(int_value) {
 8002144:	2107      	movs	r1, #7
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8002146:	2a00      	cmp	r2, #0
 8002148:	f040 81ae 	bne.w	80024a8 <gc_execute_line+0x644>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800214c:	fa44 f301 	asr.w	r3, r4, r1
 8002150:	07dd      	lsls	r5, r3, #31
 8002152:	f100 81a3 	bmi.w	800249c <gc_execute_line+0x638>
        command_words |= bit(word_bit);
 8002156:	2301      	movs	r3, #1
 8002158:	408b      	lsls	r3, r1
 800215a:	431c      	orrs	r4, r3
 800215c:	b2a4      	uxth	r4, r4
        break;
 800215e:	e78c      	b.n	800207a <gc_execute_line+0x216>
            gc_block.modal.motion = int_value;
 8002160:	2350      	movs	r3, #80	; 0x50
 8002162:	2101      	movs	r1, #1
 8002164:	f888 3001 	strb.w	r3, [r8, #1]
 8002168:	e7ed      	b.n	8002146 <gc_execute_line+0x2e2>
            if (mantissa == 0) {
 800216a:	2a00      	cmp	r2, #0
 800216c:	f040 8186 	bne.w	800247c <gc_execute_line+0x618>
              gc_block.modal.distance = int_value - 90;
 8002170:	f1a6 035a 	sub.w	r3, r6, #90	; 0x5a
 8002174:	f888 3004 	strb.w	r3, [r8, #4]
 8002178:	2103      	movs	r1, #3
 800217a:	e7e7      	b.n	800214c <gc_execute_line+0x2e8>
            gc_block.modal.feed_rate = 94 - int_value;
 800217c:	f1c6 035e 	rsb	r3, r6, #94	; 0x5e
 8002180:	f888 3002 	strb.w	r3, [r8, #2]
            break;
 8002184:	2105      	movs	r1, #5
 8002186:	e7de      	b.n	8002146 <gc_execute_line+0x2e2>
            gc_block.modal.units = 21 - int_value;
 8002188:	f1c6 0315 	rsb	r3, r6, #21
 800218c:	f888 3003 	strb.w	r3, [r8, #3]
            break;
 8002190:	2106      	movs	r1, #6
 8002192:	e7d8      	b.n	8002146 <gc_execute_line+0x2e2>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8002194:	f1a6 0336 	sub.w	r3, r6, #54	; 0x36
 8002198:	f888 3007 	strb.w	r3, [r8, #7]
            break;
 800219c:	2109      	movs	r1, #9
 800219e:	e7d2      	b.n	8002146 <gc_execute_line+0x2e2>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1c3      	bne.n	800212c <gc_execute_line+0x2c8>
 80021a4:	210a      	movs	r1, #10
 80021a6:	e7d1      	b.n	800214c <gc_execute_line+0x2e8>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 80021a8:	9b07      	ldr	r3, [sp, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 82ce 	bne.w	800274c <gc_execute_line+0x8e8>
            if (int_value == 49) { // G49
 80021b0:	2e31      	cmp	r6, #49	; 0x31
 80021b2:	f000 8183 	beq.w	80024bc <gc_execute_line+0x658>
            } else if (mantissa == 10) { // G43.1
 80021b6:	2a0a      	cmp	r2, #10
 80021b8:	d1b8      	bne.n	800212c <gc_execute_line+0x2c8>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f888 3006 	strb.w	r3, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021c0:	2303      	movs	r3, #3
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 80021c2:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80021c4:	9307      	str	r3, [sp, #28]
 80021c6:	e7c1      	b.n	800214c <gc_execute_line+0x2e8>
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	f040 815f 	bne.w	800248c <gc_execute_line+0x628>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 80021ce:	9b07      	ldr	r3, [sp, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 82bb 	bne.w	800274c <gc_execute_line+0x8e8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021d6:	2e1c      	cmp	r6, #28
            gc_block.non_modal_command = int_value;
 80021d8:	f888 6000 	strb.w	r6, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021dc:	f000 816b 	beq.w	80024b6 <gc_execute_line+0x652>
 80021e0:	2e1e      	cmp	r6, #30
 80021e2:	f000 8168 	beq.w	80024b6 <gc_execute_line+0x652>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80021e6:	2301      	movs	r3, #1
 80021e8:	9307      	str	r3, [sp, #28]
 80021ea:	e00d      	b.n	8002208 <gc_execute_line+0x3a4>
            gc_block.modal.plane_select = int_value - 17;
 80021ec:	f1a6 0311 	sub.w	r3, r6, #17
 80021f0:	f888 3005 	strb.w	r3, [r8, #5]
            break;
 80021f4:	2102      	movs	r1, #2
 80021f6:	e7a6      	b.n	8002146 <gc_execute_line+0x2e2>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021f8:	2e1c      	cmp	r6, #28
            gc_block.non_modal_command = int_value;
 80021fa:	f888 6000 	strb.w	r6, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 80021fe:	f000 812d 	beq.w	800245c <gc_execute_line+0x5f8>
 8002202:	2e1e      	cmp	r6, #30
 8002204:	f000 812a 	beq.w	800245c <gc_execute_line+0x5f8>
 8002208:	2e5c      	cmp	r6, #92	; 0x5c
 800220a:	f000 8127 	beq.w	800245c <gc_execute_line+0x5f8>
 800220e:	2100      	movs	r1, #0
 8002210:	e799      	b.n	8002146 <gc_execute_line+0x2e2>
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8002212:	9b08      	ldr	r3, [sp, #32]
 8002214:	2502      	movs	r5, #2
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	9308      	str	r3, [sp, #32]
 800221c:	2301      	movs	r3, #1
 800221e:	f8c8 b014 	str.w	fp, [r8, #20]
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002222:	fa49 f303 	asr.w	r3, r9, r3
 8002226:	07db      	lsls	r3, r3, #31
 8002228:	d40f      	bmi.n	800224a <gc_execute_line+0x3e6>
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 800222a:	ea45 0909 	orr.w	r9, r5, r9
 800222e:	e724      	b.n	800207a <gc_execute_line+0x216>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8002230:	9b08      	ldr	r3, [sp, #32]
 8002232:	f8c8 b018 	str.w	fp, [r8, #24]
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	9308      	str	r3, [sp, #32]
 800223c:	2302      	movs	r3, #2
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 800223e:	fa49 f303 	asr.w	r3, r9, r3
 8002242:	07db      	lsls	r3, r3, #31
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8002244:	f04f 0504 	mov.w	r5, #4
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8002248:	d5ef      	bpl.n	800222a <gc_execute_line+0x3c6>
 800224a:	2419      	movs	r4, #25
}
 800224c:	4620      	mov	r0, r4
 800224e:	b01f      	add	sp, #124	; 0x7c
 8002250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		  case 'A': word_bit = WORD_A; gc_block.values.xyz[A_AXIS] = value; axis_words |= (1<<A_AXIS); break;
 8002254:	9b06      	ldr	r3, [sp, #24]
 8002256:	f8c8 b04c 	str.w	fp, [r8, #76]	; 0x4c
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	9306      	str	r3, [sp, #24]
 8002260:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002264:	230d      	movs	r3, #13
 8002266:	e7dc      	b.n	8002222 <gc_execute_line+0x3be>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8002268:	9b06      	ldr	r3, [sp, #24]
 800226a:	f8c8 b044 	str.w	fp, [r8, #68]	; 0x44
 800226e:	f043 0302 	orr.w	r3, r3, #2
 8002272:	9306      	str	r3, [sp, #24]
 8002274:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002278:	230b      	movs	r3, #11
 800227a:	e7d2      	b.n	8002222 <gc_execute_line+0x3be>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 800227c:	9b06      	ldr	r3, [sp, #24]
 800227e:	f8c8 b048 	str.w	fp, [r8, #72]	; 0x48
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	9306      	str	r3, [sp, #24]
 8002288:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800228c:	230c      	movs	r3, #12
 800228e:	e7c8      	b.n	8002222 <gc_execute_line+0x3be>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8002290:	9b08      	ldr	r3, [sp, #32]
 8002292:	f8c8 b01c 	str.w	fp, [r8, #28]
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	9308      	str	r3, [sp, #32]
 800229c:	2508      	movs	r5, #8
 800229e:	2303      	movs	r3, #3
 80022a0:	e7bf      	b.n	8002222 <gc_execute_line+0x3be>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 80022a2:	f888 6028 	strb.w	r6, [r8, #40]	; 0x28
 80022a6:	2510      	movs	r5, #16
 80022a8:	2304      	movs	r3, #4
 80022aa:	e7ba      	b.n	8002222 <gc_execute_line+0x3be>
          case 'N': word_bit = WORD_N; gc_block.values.n = truncf(value); break;
 80022ac:	4658      	mov	r0, fp
 80022ae:	f7fe fedb 	bl	8001068 <__aeabi_f2iz>
 80022b2:	2520      	movs	r5, #32
 80022b4:	2305      	movs	r3, #5
 80022b6:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 80022ba:	fa49 f303 	asr.w	r3, r9, r3
 80022be:	07da      	lsls	r2, r3, #31
 80022c0:	d4c3      	bmi.n	800224a <gc_execute_line+0x3e6>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 80022c2:	4658      	mov	r0, fp
 80022c4:	2100      	movs	r1, #0
 80022c6:	f7fe fe91 	bl	8000fec <__aeabi_fcmplt>
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d0ad      	beq.n	800222a <gc_execute_line+0x3c6>
 80022ce:	2404      	movs	r4, #4
 80022d0:	e72d      	b.n	800212e <gc_execute_line+0x2ca>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 80022d2:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
 80022d6:	2540      	movs	r5, #64	; 0x40
 80022d8:	2306      	movs	r3, #6
 80022da:	e7ee      	b.n	80022ba <gc_execute_line+0x456>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 80022dc:	f8c8 b034 	str.w	fp, [r8, #52]	; 0x34
 80022e0:	2580      	movs	r5, #128	; 0x80
 80022e2:	2307      	movs	r3, #7
 80022e4:	e79d      	b.n	8002222 <gc_execute_line+0x3be>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 80022e6:	f8c8 b038 	str.w	fp, [r8, #56]	; 0x38
 80022ea:	f44f 7580 	mov.w	r5, #256	; 0x100
 80022ee:	2308      	movs	r3, #8
 80022f0:	e7e3      	b.n	80022ba <gc_execute_line+0x456>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 80022f2:	4956      	ldr	r1, [pc, #344]	; (800244c <gc_execute_line+0x5e8>)
 80022f4:	4658      	mov	r0, fp
 80022f6:	f7fe fe97 	bl	8001028 <__aeabi_fcmpgt>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	f040 822d 	bne.w	800275a <gc_execute_line+0x8f6>
					gc_block.values.t = int_value;
 8002300:	f888 603c 	strb.w	r6, [r8, #60]	; 0x3c
				break;
 8002304:	f44f 7500 	mov.w	r5, #512	; 0x200
 8002308:	2309      	movs	r3, #9
 800230a:	e7d6      	b.n	80022ba <gc_execute_line+0x456>
		  case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 800230c:	9b06      	ldr	r3, [sp, #24]
 800230e:	f8c8 b040 	str.w	fp, [r8, #64]	; 0x40
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	9306      	str	r3, [sp, #24]
 8002318:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800231c:	230a      	movs	r3, #10
 800231e:	e780      	b.n	8002222 <gc_execute_line+0x3be>
          case 'B': word_bit = WORD_B; gc_block.values.xyz[B_AXIS] = value; axis_words |= (1<<B_AXIS); break;
 8002320:	9b06      	ldr	r3, [sp, #24]
 8002322:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
 8002326:	f043 0310 	orr.w	r3, r3, #16
 800232a:	9306      	str	r3, [sp, #24]
 800232c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8002330:	230e      	movs	r3, #14
 8002332:	e776      	b.n	8002222 <gc_execute_line+0x3be>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 8002334:	f8c8 b010 	str.w	fp, [r8, #16]
 8002338:	2501      	movs	r5, #1
 800233a:	2300      	movs	r3, #0
 800233c:	e7bd      	b.n	80022ba <gc_execute_line+0x456>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 800233e:	2340      	movs	r3, #64	; 0x40
 8002340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002344:	f888 3009 	strb.w	r3, [r8, #9]
 8002348:	230d      	movs	r3, #13
 800234a:	e690      	b.n	800206e <gc_execute_line+0x20a>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 800234c:	2320      	movs	r3, #32
 800234e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002352:	f888 300a 	strb.w	r3, [r8, #10]
 8002356:	230c      	movs	r3, #12
 8002358:	e689      	b.n	800206e <gc_execute_line+0x20a>
                case 7: gc_block.modal.coolant = COOLANT_MIST_ENABLE; break;
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002360:	f888 3009 	strb.w	r3, [r8, #9]
 8002364:	230d      	movs	r3, #13
 8002366:	e682      	b.n	800206e <gc_execute_line+0x20a>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8002368:	2310      	movs	r3, #16
 800236a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800236e:	f888 300a 	strb.w	r3, [r8, #10]
 8002372:	230c      	movs	r3, #12
 8002374:	e67b      	b.n	800206e <gc_execute_line+0x20a>
              gc_block.modal.motion += (mantissa/10)+100;
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <gc_execute_line+0x5ec>)
 8002378:	2101      	movs	r1, #1
 800237a:	fba3 2302 	umull	r2, r3, r3, r2
 800237e:	08db      	lsrs	r3, r3, #3
 8002380:	3b76      	subs	r3, #118	; 0x76
 8002382:	f888 3001 	strb.w	r3, [r8, #1]
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8002386:	2302      	movs	r3, #2
 8002388:	9307      	str	r3, [sp, #28]
 800238a:	e6df      	b.n	800214c <gc_execute_line+0x2e8>
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800238c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 808c 	bne.w	80024ac <gc_execute_line+0x648>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 8002394:	f898 3002 	ldrb.w	r3, [r8, #2]
 8002398:	2b01      	cmp	r3, #1
 800239a:	f000 8112 	beq.w	80025c2 <gc_execute_line+0x75e>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <gc_execute_line+0x5f0>)
 80023a0:	785b      	ldrb	r3, [r3, #1]
 80023a2:	b93b      	cbnz	r3, 80023b4 <gc_execute_line+0x550>
        if (bit_istrue(value_words,bit(WORD_F))) {
 80023a4:	f019 0f01 	tst.w	r9, #1
 80023a8:	f040 80a7 	bne.w	80024fa <gc_execute_line+0x696>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <gc_execute_line+0x5f0>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f8c8 3010 	str.w	r3, [r8, #16]
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 80023b4:	f419 7f80 	tst.w	r9, #256	; 0x100
 80023b8:	d103      	bne.n	80023c2 <gc_execute_line+0x55e>
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <gc_execute_line+0x5f0>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 80023c2:	f898 5000 	ldrb.w	r5, [r8]
 80023c6:	2d04      	cmp	r5, #4
 80023c8:	f000 80b6 	beq.w	8002538 <gc_execute_line+0x6d4>
  switch (gc_block.modal.plane_select) {
 80023cc:	f898 3005 	ldrb.w	r3, [r8, #5]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a8 	beq.w	8002526 <gc_execute_line+0x6c2>
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 809c 	bne.w	8002514 <gc_execute_line+0x6b0>
 80023dc:	2600      	movs	r6, #0
 80023de:	2702      	movs	r7, #2
      axis_linear = Y_AXIS;
 80023e0:	930f      	str	r3, [sp, #60]	; 0x3c
  switch (gc_block.modal.plane_select) {
 80023e2:	2305      	movs	r3, #5
      axis_1 = X_AXIS;
 80023e4:	960e      	str	r6, [sp, #56]	; 0x38
      axis_0 = Z_AXIS;
 80023e6:	970d      	str	r7, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 80023e8:	930c      	str	r3, [sp, #48]	; 0x30
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 80023ea:	f898 3003 	ldrb.w	r3, [r8, #3]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	f000 80a8 	beq.w	8002544 <gc_execute_line+0x6e0>
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 80023f4:	9b07      	ldr	r3, [sp, #28]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	f000 80d8 	beq.w	80025ac <gc_execute_line+0x748>
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 80023fc:	f8df c058 	ldr.w	ip, [pc, #88]	; 8002458 <gc_execute_line+0x5f4>
 8002400:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
 8002404:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002408:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800240c:	f8dc 3000 	ldr.w	r3, [ip]
 8002410:	f8ce 3000 	str.w	r3, [lr]
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8002414:	05a3      	lsls	r3, r4, #22
 8002416:	d565      	bpl.n	80024e4 <gc_execute_line+0x680>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8002418:	f898 0007 	ldrb.w	r0, [r8, #7]
 800241c:	2806      	cmp	r0, #6
 800241e:	d955      	bls.n	80024cc <gc_execute_line+0x668>
 8002420:	241d      	movs	r4, #29
 8002422:	e684      	b.n	800212e <gc_execute_line+0x2ca>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8002424:	2401      	movs	r4, #1
}
 8002426:	4620      	mov	r0, r4
 8002428:	b01f      	add	sp, #124	; 0x7c
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 800242e:	2402      	movs	r4, #2
}
 8002430:	4620      	mov	r0, r4
 8002432:	b01f      	add	sp, #124	; 0x7c
 8002434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8002438:	2300      	movs	r3, #0
 800243a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243e:	f888 3009 	strb.w	r3, [r8, #9]
 8002442:	230d      	movs	r3, #13
 8002444:	e613      	b.n	800206e <gc_execute_line+0x20a>
 8002446:	bf00      	nop
 8002448:	40100401 	.word	0x40100401
 800244c:	437f0000 	.word	0x437f0000
 8002450:	cccccccd 	.word	0xcccccccd
 8002454:	200010d4 	.word	0x200010d4
 8002458:	20001104 	.word	0x20001104
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 800245c:	b112      	cbz	r2, 8002464 <gc_execute_line+0x600>
 800245e:	2a0a      	cmp	r2, #10
 8002460:	f47f ae64 	bne.w	800212c <gc_execute_line+0x2c8>
              gc_block.non_modal_command += mantissa;
 8002464:	1833      	adds	r3, r6, r0
 8002466:	f888 3000 	strb.w	r3, [r8]
 800246a:	2100      	movs	r1, #0
 800246c:	e66e      	b.n	800214c <gc_execute_line+0x2e8>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 800246e:	2300      	movs	r3, #0
 8002470:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002474:	f888 300a 	strb.w	r3, [r8, #10]
 8002478:	230c      	movs	r3, #12
 800247a:	e5f8      	b.n	800206e <gc_execute_line+0x20a>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 800247c:	2a0a      	cmp	r2, #10
 800247e:	f47f ae55 	bne.w	800212c <gc_execute_line+0x2c8>
 8002482:	2e5a      	cmp	r6, #90	; 0x5a
 8002484:	f43f ae52 	beq.w	800212c <gc_execute_line+0x2c8>
 8002488:	2104      	movs	r1, #4
 800248a:	e65f      	b.n	800214c <gc_execute_line+0x2e8>
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 800248c:	2e1c      	cmp	r6, #28
            gc_block.non_modal_command = int_value;
 800248e:	f888 6000 	strb.w	r6, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8002492:	d0e4      	beq.n	800245e <gc_execute_line+0x5fa>
 8002494:	2e1e      	cmp	r6, #30
 8002496:	f47f aeb7 	bne.w	8002208 <gc_execute_line+0x3a4>
 800249a:	e7e0      	b.n	800245e <gc_execute_line+0x5fa>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 800249c:	2415      	movs	r4, #21
 800249e:	e646      	b.n	800212e <gc_execute_line+0x2ca>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 80024a0:	2302      	movs	r3, #2
 80024a2:	2101      	movs	r1, #1
 80024a4:	9307      	str	r3, [sp, #28]
 80024a6:	e64e      	b.n	8002146 <gc_execute_line+0x2e2>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 80024a8:	2417      	movs	r4, #23
 80024aa:	e640      	b.n	800212e <gc_execute_line+0x2ca>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 80024ac:	f019 0f01 	tst.w	r9, #1
 80024b0:	d123      	bne.n	80024fa <gc_execute_line+0x696>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 80024b2:	2416      	movs	r4, #22
 80024b4:	e63b      	b.n	800212e <gc_execute_line+0x2ca>
              axis_command = AXIS_COMMAND_NON_MODAL;
 80024b6:	2301      	movs	r3, #1
 80024b8:	9307      	str	r3, [sp, #28]
 80024ba:	e7d3      	b.n	8002464 <gc_execute_line+0x600>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 80024bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80024c0:	2108      	movs	r1, #8
 80024c2:	f888 3006 	strb.w	r3, [r8, #6]
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 80024c6:	2303      	movs	r3, #3
 80024c8:	9307      	str	r3, [sp, #28]
 80024ca:	e63f      	b.n	800214c <gc_execute_line+0x2e8>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 80024cc:	4ba4      	ldr	r3, [pc, #656]	; (8002760 <gc_execute_line+0x8fc>)
 80024ce:	799b      	ldrb	r3, [r3, #6]
 80024d0:	4283      	cmp	r3, r0
 80024d2:	d007      	beq.n	80024e4 <gc_execute_line+0x680>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80024d4:	a919      	add	r1, sp, #100	; 0x64
 80024d6:	f005 fa1f 	bl	8007918 <settings_read_coord_data>
 80024da:	2800      	cmp	r0, #0
 80024dc:	f000 8134 	beq.w	8002748 <gc_execute_line+0x8e4>
 80024e0:	f898 5000 	ldrb.w	r5, [r8]
  switch (gc_block.non_modal_command) {
 80024e4:	2d0a      	cmp	r5, #10
 80024e6:	f000 8103 	beq.w	80026f0 <gc_execute_line+0x88c>
 80024ea:	2d5c      	cmp	r5, #92	; 0x5c
 80024ec:	d17a      	bne.n	80025e4 <gc_execute_line+0x780>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80024ee:	9b06      	ldr	r3, [sp, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 813b 	bne.w	800276c <gc_execute_line+0x908>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80024f6:	241a      	movs	r4, #26
 80024f8:	e619      	b.n	800212e <gc_execute_line+0x2ca>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 80024fa:	f898 3003 	ldrb.w	r3, [r8, #3]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f47f af58 	bne.w	80023b4 <gc_execute_line+0x550>
 8002504:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8002508:	4996      	ldr	r1, [pc, #600]	; (8002764 <gc_execute_line+0x900>)
 800250a:	f7fe fbd1 	bl	8000cb0 <__aeabi_fmul>
 800250e:	f8c8 0010 	str.w	r0, [r8, #16]
 8002512:	e74f      	b.n	80023b4 <gc_execute_line+0x550>
 8002514:	2306      	movs	r3, #6
 8002516:	2602      	movs	r6, #2
 8002518:	2701      	movs	r7, #1
 800251a:	930c      	str	r3, [sp, #48]	; 0x30
      axis_linear = X_AXIS;
 800251c:	2300      	movs	r3, #0
      axis_1 = Z_AXIS;
 800251e:	960e      	str	r6, [sp, #56]	; 0x38
      axis_0 = Y_AXIS;
 8002520:	970d      	str	r7, [sp, #52]	; 0x34
      axis_linear = X_AXIS;
 8002522:	930f      	str	r3, [sp, #60]	; 0x3c
 8002524:	e761      	b.n	80023ea <gc_execute_line+0x586>
  switch (gc_block.modal.plane_select) {
 8002526:	461f      	mov	r7, r3
      axis_0 = X_AXIS;
 8002528:	930d      	str	r3, [sp, #52]	; 0x34
  switch (gc_block.modal.plane_select) {
 800252a:	2303      	movs	r3, #3
 800252c:	2601      	movs	r6, #1
 800252e:	930c      	str	r3, [sp, #48]	; 0x30
      axis_linear = Z_AXIS;
 8002530:	2302      	movs	r3, #2
      axis_1 = Y_AXIS;
 8002532:	960e      	str	r6, [sp, #56]	; 0x38
      axis_linear = Z_AXIS;
 8002534:	930f      	str	r3, [sp, #60]	; 0x3c
 8002536:	e758      	b.n	80023ea <gc_execute_line+0x586>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8002538:	f019 0f40 	tst.w	r9, #64	; 0x40
 800253c:	f040 8108 	bne.w	8002750 <gc_execute_line+0x8ec>
 8002540:	241c      	movs	r4, #28
 8002542:	e5f4      	b.n	800212e <gc_execute_line+0x2ca>
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002544:	9b06      	ldr	r3, [sp, #24]
 8002546:	07d9      	lsls	r1, r3, #31
 8002548:	d507      	bpl.n	800255a <gc_execute_line+0x6f6>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800254a:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
 800254e:	4985      	ldr	r1, [pc, #532]	; (8002764 <gc_execute_line+0x900>)
 8002550:	f7fe fbae 	bl	8000cb0 <__aeabi_fmul>
 8002554:	9b06      	ldr	r3, [sp, #24]
 8002556:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
      if (bit_istrue(axis_words,bit(idx)) ) {
 800255a:	079a      	lsls	r2, r3, #30
 800255c:	d507      	bpl.n	800256e <gc_execute_line+0x70a>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800255e:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 8002562:	4980      	ldr	r1, [pc, #512]	; (8002764 <gc_execute_line+0x900>)
 8002564:	f7fe fba4 	bl	8000cb0 <__aeabi_fmul>
 8002568:	9b06      	ldr	r3, [sp, #24]
 800256a:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
      if (bit_istrue(axis_words,bit(idx)) ) {
 800256e:	0758      	lsls	r0, r3, #29
 8002570:	d507      	bpl.n	8002582 <gc_execute_line+0x71e>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002572:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8002576:	497b      	ldr	r1, [pc, #492]	; (8002764 <gc_execute_line+0x900>)
 8002578:	f7fe fb9a 	bl	8000cb0 <__aeabi_fmul>
 800257c:	9b06      	ldr	r3, [sp, #24]
 800257e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002582:	0719      	lsls	r1, r3, #28
 8002584:	d507      	bpl.n	8002596 <gc_execute_line+0x732>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8002586:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
 800258a:	4976      	ldr	r1, [pc, #472]	; (8002764 <gc_execute_line+0x900>)
 800258c:	f7fe fb90 	bl	8000cb0 <__aeabi_fmul>
 8002590:	9b06      	ldr	r3, [sp, #24]
 8002592:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
      if (bit_istrue(axis_words,bit(idx)) ) {
 8002596:	06da      	lsls	r2, r3, #27
 8002598:	f57f af2c 	bpl.w	80023f4 <gc_execute_line+0x590>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800259c:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 80025a0:	4970      	ldr	r1, [pc, #448]	; (8002764 <gc_execute_line+0x900>)
 80025a2:	f7fe fb85 	bl	8000cb0 <__aeabi_fmul>
 80025a6:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
 80025aa:	e723      	b.n	80023f4 <gc_execute_line+0x590>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 80025ac:	f898 3006 	ldrb.w	r3, [r8, #6]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	f47f af23 	bne.w	80023fc <gc_execute_line+0x598>
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 80025b6:	9b06      	ldr	r3, [sp, #24]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	f43f af1f 	beq.w	80023fc <gc_execute_line+0x598>
 80025be:	2425      	movs	r4, #37	; 0x25
 80025c0:	e5b5      	b.n	800212e <gc_execute_line+0x2ca>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 80025c2:	9b07      	ldr	r3, [sp, #28]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f47f aef5 	bne.w	80023b4 <gc_execute_line+0x550>
		if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 80025ca:	f898 3001 	ldrb.w	r3, [r8, #1]
 80025ce:	2b50      	cmp	r3, #80	; 0x50
 80025d0:	f43f aef0 	beq.w	80023b4 <gc_execute_line+0x550>
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f43f aeed 	beq.w	80023b4 <gc_execute_line+0x550>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 80025da:	f019 0f01 	tst.w	r9, #1
 80025de:	f43f af68 	beq.w	80024b2 <gc_execute_line+0x64e>
 80025e2:	e6e7      	b.n	80023b4 <gc_execute_line+0x550>
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
 80025e4:	9b07      	ldr	r3, [sp, #28]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d05b      	beq.n	80026a2 <gc_execute_line+0x83e>
        if (axis_words) {
 80025ea:	9a06      	ldr	r2, [sp, #24]
 80025ec:	2a00      	cmp	r2, #0
 80025ee:	d058      	beq.n	80026a2 <gc_execute_line+0x83e>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80025f0:	495b      	ldr	r1, [pc, #364]	; (8002760 <gc_execute_line+0x8fc>)
 80025f2:	f898 3004 	ldrb.w	r3, [r8, #4]
 80025f6:	f8d1 a058 	ldr.w	sl, [r1, #88]	; 0x58
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 8140 	bne.w	8002880 <gc_execute_line+0xa1c>
 8002600:	2d35      	cmp	r5, #53	; 0x35
 8002602:	4613      	mov	r3, r2
 8002604:	f000 810e 	beq.w	8002824 <gc_execute_line+0x9c0>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002608:	07d1      	lsls	r1, r2, #31
 800260a:	f140 81d4 	bpl.w	80029b6 <gc_execute_line+0xb52>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800260e:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 8002612:	9819      	ldr	r0, [sp, #100]	; 0x64
 8002614:	f7fe fa44 	bl	8000aa0 <__addsf3>
 8002618:	4b51      	ldr	r3, [pc, #324]	; (8002760 <gc_execute_line+0x8fc>)
 800261a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800261c:	f7fe fa40 	bl	8000aa0 <__addsf3>
 8002620:	9b06      	ldr	r3, [sp, #24]
 8002622:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002626:	079a      	lsls	r2, r3, #30
 8002628:	f140 81c0 	bpl.w	80029ac <gc_execute_line+0xb48>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800262c:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 8002630:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002632:	f7fe fa35 	bl	8000aa0 <__addsf3>
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <gc_execute_line+0x8fc>)
 8002638:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800263a:	f7fe fa31 	bl	8000aa0 <__addsf3>
 800263e:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002642:	9b06      	ldr	r3, [sp, #24]
 8002644:	075b      	lsls	r3, r3, #29
 8002646:	f140 816c 	bpl.w	8002922 <gc_execute_line+0xabe>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800264a:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 800264e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002650:	f7fe fa26 	bl	8000aa0 <__addsf3>
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <gc_execute_line+0x8fc>)
 8002656:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002658:	f7fe fa22 	bl	8000aa0 <__addsf3>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 800265c:	4651      	mov	r1, sl
 800265e:	f7fe fa1f 	bl	8000aa0 <__addsf3>
 8002662:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002666:	9b06      	ldr	r3, [sp, #24]
 8002668:	0718      	lsls	r0, r3, #28
 800266a:	f140 81ce 	bpl.w	8002a0a <gc_execute_line+0xba6>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800266e:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 8002672:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002674:	f7fe fa14 	bl	8000aa0 <__addsf3>
 8002678:	4b39      	ldr	r3, [pc, #228]	; (8002760 <gc_execute_line+0x8fc>)
 800267a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800267c:	f7fe fa10 	bl	8000aa0 <__addsf3>
 8002680:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002684:	9b06      	ldr	r3, [sp, #24]
 8002686:	06d9      	lsls	r1, r3, #27
 8002688:	f140 8146 	bpl.w	8002918 <gc_execute_line+0xab4>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800268c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800268e:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 8002692:	f7fe fa05 	bl	8000aa0 <__addsf3>
 8002696:	4b32      	ldr	r3, [pc, #200]	; (8002760 <gc_execute_line+0x8fc>)
 8002698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800269a:	f7fe fa01 	bl	8000aa0 <__addsf3>
 800269e:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
      switch (gc_block.non_modal_command) {
 80026a2:	2d1e      	cmp	r5, #30
 80026a4:	f000 812a 	beq.w	80028fc <gc_execute_line+0xa98>
 80026a8:	2d35      	cmp	r5, #53	; 0x35
 80026aa:	f000 80dd 	beq.w	8002868 <gc_execute_line+0xa04>
 80026ae:	2d1c      	cmp	r5, #28
 80026b0:	f000 81cb 	beq.w	8002a4a <gc_execute_line+0xbe6>
 80026b4:	f898 5001 	ldrb.w	r5, [r8, #1]
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 80026b8:	2d50      	cmp	r5, #80	; 0x50
 80026ba:	f000 81ce 	beq.w	8002a5a <gc_execute_line+0xbf6>
 80026be:	f04f 0a00 	mov.w	sl, #0
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 80026c2:	9b07      	ldr	r3, [sp, #28]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	f000 8140 	beq.w	800294a <gc_execute_line+0xae6>
      switch (gc_block.modal.motion) {
 80026ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 80026cc:	2a00      	cmp	r2, #0
 80026ce:	f000 80a5 	beq.w	800281c <gc_execute_line+0x9b8>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F)));
 80026d2:	f029 0921 	bic.w	r9, r9, #33	; 0x21
 80026d6:	fa1f f389 	uxth.w	r3, r9
  if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A)|bit(WORD_B))); } // Remove axis words.
 80026da:	9907      	ldr	r1, [sp, #28]
 80026dc:	b119      	cbz	r1, 80026e6 <gc_execute_line+0x882>
 80026de:	f423 49f8 	bic.w	r9, r3, #31744	; 0x7c00
 80026e2:	fa1f f389 	uxth.w	r3, r9
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8153 	beq.w	8002992 <gc_execute_line+0xb2e>
 80026ec:	2424      	movs	r4, #36	; 0x24
 80026ee:	e51e      	b.n	800212e <gc_execute_line+0x2ca>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80026f0:	9b06      	ldr	r3, [sp, #24]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f43f aeff 	beq.w	80024f6 <gc_execute_line+0x692>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 80026f8:	f019 0f50 	tst.w	r9, #80	; 0x50
 80026fc:	f43f af20 	beq.w	8002540 <gc_execute_line+0x6dc>
      coord_select = truncf(gc_block.values.p); // Convert p value to int.
 8002700:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8002704:	f7fe fcd6 	bl	80010b4 <__aeabi_f2uiz>
 8002708:	b2c0      	uxtb	r0, r0
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 800270a:	2806      	cmp	r0, #6
 800270c:	f63f ae88 	bhi.w	8002420 <gc_execute_line+0x5bc>
      if (gc_block.values.l != 20) {
 8002710:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8002714:	2b14      	cmp	r3, #20
 8002716:	d006      	beq.n	8002726 <gc_execute_line+0x8c2>
        if (gc_block.values.l == 2) {
 8002718:	2b02      	cmp	r3, #2
 800271a:	f47f ad07 	bne.w	800212c <gc_execute_line+0x2c8>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 800271e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8002722:	f47f ad03 	bne.w	800212c <gc_execute_line+0x2c8>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 8002726:	f029 0950 	bic.w	r9, r9, #80	; 0x50
 800272a:	fa1f f989 	uxth.w	r9, r9
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 800272e:	2800      	cmp	r0, #0
 8002730:	f000 84f0 	beq.w	8003114 <gc_execute_line+0x12b0>
 8002734:	3801      	subs	r0, #1
 8002736:	fa5f fa80 	uxtb.w	sl, r0
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800273a:	490b      	ldr	r1, [pc, #44]	; (8002768 <gc_execute_line+0x904>)
 800273c:	4650      	mov	r0, sl
 800273e:	f005 f8eb 	bl	8007918 <settings_read_coord_data>
 8002742:	2800      	cmp	r0, #0
 8002744:	f040 847c 	bne.w	8003040 <gc_execute_line+0x11dc>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002748:	2407      	movs	r4, #7
 800274a:	e4f0      	b.n	800212e <gc_execute_line+0x2ca>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 800274c:	2418      	movs	r4, #24
 800274e:	e4ee      	b.n	800212e <gc_execute_line+0x2ca>
    bit_false(value_words,bit(WORD_P));
 8002750:	f029 0940 	bic.w	r9, r9, #64	; 0x40
 8002754:	fa1f f989 	uxth.w	r9, r9
 8002758:	e638      	b.n	80023cc <gc_execute_line+0x568>
				if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 800275a:	2426      	movs	r4, #38	; 0x26
 800275c:	e4e7      	b.n	800212e <gc_execute_line+0x2ca>
 800275e:	bf00      	nop
 8002760:	200010d4 	.word	0x200010d4
 8002764:	41cb3333 	.word	0x41cb3333
 8002768:	20001144 	.word	0x20001144
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 800276c:	4bac      	ldr	r3, [pc, #688]	; (8002a20 <gc_execute_line+0xbbc>)
 800276e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        if (bit_istrue(axis_words,bit(idx)) ) {
 8002770:	9b06      	ldr	r3, [sp, #24]
 8002772:	07d9      	lsls	r1, r3, #31
 8002774:	f140 80e4 	bpl.w	8002940 <gc_execute_line+0xadc>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002778:	4ba9      	ldr	r3, [pc, #676]	; (8002a20 <gc_execute_line+0xbbc>)
 800277a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800277c:	69d8      	ldr	r0, [r3, #28]
 800277e:	f7fe f98d 	bl	8000a9c <__aeabi_fsub>
 8002782:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 8002786:	f7fe f989 	bl	8000a9c <__aeabi_fsub>
 800278a:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
        if (bit_istrue(axis_words,bit(idx)) ) {
 800278e:	9b06      	ldr	r3, [sp, #24]
 8002790:	079a      	lsls	r2, r3, #30
 8002792:	f140 80d0 	bpl.w	8002936 <gc_execute_line+0xad2>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 8002796:	4ba2      	ldr	r3, [pc, #648]	; (8002a20 <gc_execute_line+0xbbc>)
 8002798:	991a      	ldr	r1, [sp, #104]	; 0x68
 800279a:	6a18      	ldr	r0, [r3, #32]
 800279c:	f7fe f97e 	bl	8000a9c <__aeabi_fsub>
 80027a0:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80027a4:	f7fe f97a 	bl	8000a9c <__aeabi_fsub>
 80027a8:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
        if (bit_istrue(axis_words,bit(idx)) ) {
 80027ac:	9b06      	ldr	r3, [sp, #24]
 80027ae:	075b      	lsls	r3, r3, #29
 80027b0:	d561      	bpl.n	8002876 <gc_execute_line+0xa12>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80027b2:	4b9b      	ldr	r3, [pc, #620]	; (8002a20 <gc_execute_line+0xbbc>)
 80027b4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80027b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027b8:	f7fe f970 	bl	8000a9c <__aeabi_fsub>
 80027bc:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80027c0:	f7fe f96c 	bl	8000a9c <__aeabi_fsub>
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fe f969 	bl	8000a9c <__aeabi_fsub>
 80027ca:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
        if (bit_istrue(axis_words,bit(idx)) ) {
 80027ce:	9b06      	ldr	r3, [sp, #24]
 80027d0:	071d      	lsls	r5, r3, #28
 80027d2:	f140 80ab 	bpl.w	800292c <gc_execute_line+0xac8>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80027d6:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <gc_execute_line+0xbbc>)
 80027d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80027da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80027dc:	f7fe f95e 	bl	8000a9c <__aeabi_fsub>
 80027e0:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 80027e4:	f7fe f95a 	bl	8000a9c <__aeabi_fsub>
 80027e8:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
        if (bit_istrue(axis_words,bit(idx)) ) {
 80027ec:	9b06      	ldr	r3, [sp, #24]
 80027ee:	06d8      	lsls	r0, r3, #27
 80027f0:	f140 80ca 	bpl.w	8002988 <gc_execute_line+0xb24>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80027f4:	4b8a      	ldr	r3, [pc, #552]	; (8002a20 <gc_execute_line+0xbbc>)
 80027f6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80027f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80027fa:	f7fe f94f 	bl	8000a9c <__aeabi_fsub>
 80027fe:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8002802:	f7fe f94b 	bl	8000a9c <__aeabi_fsub>
 8002806:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 800280a:	f04f 0a00 	mov.w	sl, #0
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 800280e:	f898 5001 	ldrb.w	r5, [r8, #1]
 8002812:	2d50      	cmp	r5, #80	; 0x50
 8002814:	f47f af55 	bne.w	80026c2 <gc_execute_line+0x85e>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002818:	241f      	movs	r4, #31
 800281a:	e488      	b.n	800212e <gc_execute_line+0x2ca>
      bit_false(value_words, (bit(WORD_N) | bit(WORD_F) | bit(WORD_S) | bit(WORD_T))); // Remove single-meaning value words.
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <gc_execute_line+0xbc0>)
 800281e:	ea09 0303 	and.w	r3, r9, r3
 8002822:	e75a      	b.n	80026da <gc_execute_line+0x876>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002824:	07da      	lsls	r2, r3, #31
 8002826:	d404      	bmi.n	8002832 <gc_execute_line+0x9ce>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002828:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <gc_execute_line+0xbbc>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002830:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002832:	079d      	lsls	r5, r3, #30
 8002834:	d404      	bmi.n	8002840 <gc_execute_line+0x9dc>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002836:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <gc_execute_line+0xbbc>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 800283e:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002840:	0758      	lsls	r0, r3, #29
 8002842:	d404      	bmi.n	800284e <gc_execute_line+0x9ea>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002844:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <gc_execute_line+0xbbc>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800284c:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800284e:	0719      	lsls	r1, r3, #28
 8002850:	d404      	bmi.n	800285c <gc_execute_line+0x9f8>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002852:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <gc_execute_line+0xbbc>)
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 800285a:	9b06      	ldr	r3, [sp, #24]
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800285c:	06da      	lsls	r2, r3, #27
 800285e:	d403      	bmi.n	8002868 <gc_execute_line+0xa04>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <gc_execute_line+0xbbc>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 8002868:	f898 5001 	ldrb.w	r5, [r8, #1]
 800286c:	2d01      	cmp	r5, #1
 800286e:	f67f af26 	bls.w	80026be <gc_execute_line+0x85a>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 8002872:	241e      	movs	r4, #30
 8002874:	e45b      	b.n	800212e <gc_execute_line+0x2ca>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <gc_execute_line+0xbbc>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800287e:	e7a6      	b.n	80027ce <gc_execute_line+0x96a>
 8002880:	2d35      	cmp	r5, #53	; 0x35
 8002882:	4613      	mov	r3, r2
 8002884:	d0ce      	beq.n	8002824 <gc_execute_line+0x9c0>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 8002886:	07db      	lsls	r3, r3, #31
 8002888:	f140 80da 	bpl.w	8002a40 <gc_execute_line+0xbdc>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 800288c:	4b64      	ldr	r3, [pc, #400]	; (8002a20 <gc_execute_line+0xbbc>)
 800288e:	f8d8 1040 	ldr.w	r1, [r8, #64]	; 0x40
 8002892:	69d8      	ldr	r0, [r3, #28]
 8002894:	f7fe f904 	bl	8000aa0 <__addsf3>
 8002898:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 800289c:	9b06      	ldr	r3, [sp, #24]
 800289e:	0798      	lsls	r0, r3, #30
 80028a0:	f140 80c9 	bpl.w	8002a36 <gc_execute_line+0xbd2>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <gc_execute_line+0xbbc>)
 80028a6:	f8d8 1044 	ldr.w	r1, [r8, #68]	; 0x44
 80028aa:	6a18      	ldr	r0, [r3, #32]
 80028ac:	f7fe f8f8 	bl	8000aa0 <__addsf3>
 80028b0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028b4:	9b06      	ldr	r3, [sp, #24]
 80028b6:	0759      	lsls	r1, r3, #29
 80028b8:	f140 80b8 	bpl.w	8002a2c <gc_execute_line+0xbc8>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028bc:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <gc_execute_line+0xbbc>)
 80028be:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
 80028c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80028c4:	f7fe f8ec 	bl	8000aa0 <__addsf3>
 80028c8:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028cc:	9b06      	ldr	r3, [sp, #24]
 80028ce:	071a      	lsls	r2, r3, #28
 80028d0:	f140 80a0 	bpl.w	8002a14 <gc_execute_line+0xbb0>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028d4:	4b52      	ldr	r3, [pc, #328]	; (8002a20 <gc_execute_line+0xbbc>)
 80028d6:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
 80028da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80028dc:	f7fe f8e0 	bl	8000aa0 <__addsf3>
 80028e0:	f8c8 004c 	str.w	r0, [r8, #76]	; 0x4c
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80028e4:	9b06      	ldr	r3, [sp, #24]
 80028e6:	06db      	lsls	r3, r3, #27
 80028e8:	d516      	bpl.n	8002918 <gc_execute_line+0xab4>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80028ea:	4b4d      	ldr	r3, [pc, #308]	; (8002a20 <gc_execute_line+0xbbc>)
 80028ec:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 80028f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f2:	f7fe f8d5 	bl	8000aa0 <__addsf3>
 80028f6:	f8c8 0050 	str.w	r0, [r8, #80]	; 0x50
 80028fa:	e6d2      	b.n	80026a2 <gc_execute_line+0x83e>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80028fc:	494a      	ldr	r1, [pc, #296]	; (8002a28 <gc_execute_line+0xbc4>)
 80028fe:	2007      	movs	r0, #7
 8002900:	f005 f80a 	bl	8007918 <settings_read_coord_data>
 8002904:	2800      	cmp	r0, #0
 8002906:	f43f af1f 	beq.w	8002748 <gc_execute_line+0x8e4>
          if (axis_words) {
 800290a:	9b06      	ldr	r3, [sp, #24]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d158      	bne.n	80029c2 <gc_execute_line+0xb5e>
 8002910:	9a09      	ldr	r2, [sp, #36]	; 0x24
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8002912:	469a      	mov	sl, r3
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 8002914:	9307      	str	r3, [sp, #28]
 8002916:	e6d9      	b.n	80026cc <gc_execute_line+0x868>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002918:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <gc_execute_line+0xbbc>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 8002920:	e6bf      	b.n	80026a2 <gc_execute_line+0x83e>
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <gc_execute_line+0xbbc>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800292a:	e69c      	b.n	8002666 <gc_execute_line+0x802>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 800292c:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <gc_execute_line+0xbbc>)
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002934:	e75a      	b.n	80027ec <gc_execute_line+0x988>
 8002936:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <gc_execute_line+0xbbc>)
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 800293e:	e735      	b.n	80027ac <gc_execute_line+0x948>
 8002940:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <gc_execute_line+0xbbc>)
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002948:	e721      	b.n	800278e <gc_execute_line+0x92a>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 800294a:	b1ad      	cbz	r5, 8002978 <gc_execute_line+0xb14>
      if (gc_block.values.f == 0.0f) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 800294c:	2100      	movs	r1, #0
 800294e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8002952:	f7fe fb41 	bl	8000fd8 <__aeabi_fcmpeq>
 8002956:	2800      	cmp	r0, #0
 8002958:	f47f adab 	bne.w	80024b2 <gc_execute_line+0x64e>
      switch (gc_block.modal.motion) {
 800295c:	2d8c      	cmp	r5, #140	; 0x8c
 800295e:	f000 8288 	beq.w	8002e72 <gc_execute_line+0x100e>
 8002962:	f200 827e 	bhi.w	8002e62 <gc_execute_line+0xffe>
 8002966:	2d02      	cmp	r5, #2
 8002968:	f000 8249 	beq.w	8002dfe <gc_execute_line+0xf9a>
 800296c:	2d03      	cmp	r5, #3
 800296e:	f000 8248 	beq.w	8002e02 <gc_execute_line+0xf9e>
 8002972:	2d01      	cmp	r5, #1
 8002974:	f47f aea9 	bne.w	80026ca <gc_execute_line+0x866>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8002978:	9b06      	ldr	r3, [sp, #24]
 800297a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	9b07      	ldr	r3, [sp, #28]
 8002980:	bf08      	it	eq
 8002982:	2300      	moveq	r3, #0
 8002984:	9307      	str	r3, [sp, #28]
 8002986:	e6a1      	b.n	80026cc <gc_execute_line+0x868>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <gc_execute_line+0xbbc>)
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f8c8 3050 	str.w	r3, [r8, #80]	; 0x50
 8002990:	e73b      	b.n	800280a <gc_execute_line+0x9a6>
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 8002992:	9316      	str	r3, [sp, #88]	; 0x58
 8002994:	9317      	str	r3, [sp, #92]	; 0x5c
 8002996:	9318      	str	r3, [sp, #96]	; 0x60
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8002998:	2a00      	cmp	r2, #0
 800299a:	d065      	beq.n	8002a68 <gc_execute_line+0xc04>
      if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0)))) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 800299c:	f024 0449 	bic.w	r4, r4, #73	; 0x49
 80029a0:	2c00      	cmp	r4, #0
 80029a2:	f000 8385 	beq.w	80030b0 <gc_execute_line+0x124c>
 80029a6:	2410      	movs	r4, #16
 80029a8:	f7ff bbc1 	b.w	800212e <gc_execute_line+0x2ca>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <gc_execute_line+0xbbc>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 80029b4:	e645      	b.n	8002642 <gc_execute_line+0x7de>
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <gc_execute_line+0xbbc>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 80029be:	4613      	mov	r3, r2
 80029c0:	e631      	b.n	8002626 <gc_execute_line+0x7c2>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 80029c2:	07dd      	lsls	r5, r3, #31
 80029c4:	d404      	bmi.n	80029d0 <gc_execute_line+0xb6c>
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <gc_execute_line+0xbbc>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f8c8 3014 	str.w	r3, [r8, #20]
 80029ce:	9b06      	ldr	r3, [sp, #24]
 80029d0:	0798      	lsls	r0, r3, #30
 80029d2:	d404      	bmi.n	80029de <gc_execute_line+0xb7a>
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <gc_execute_line+0xbbc>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f8c8 3018 	str.w	r3, [r8, #24]
 80029dc:	9b06      	ldr	r3, [sp, #24]
 80029de:	0759      	lsls	r1, r3, #29
 80029e0:	d404      	bmi.n	80029ec <gc_execute_line+0xb88>
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <gc_execute_line+0xbbc>)
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	f8c8 301c 	str.w	r3, [r8, #28]
 80029ea:	9b06      	ldr	r3, [sp, #24]
 80029ec:	071a      	lsls	r2, r3, #28
 80029ee:	d404      	bmi.n	80029fa <gc_execute_line+0xb96>
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <gc_execute_line+0xbbc>)
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f8c8 3020 	str.w	r3, [r8, #32]
 80029f8:	9b06      	ldr	r3, [sp, #24]
 80029fa:	06dd      	lsls	r5, r3, #27
 80029fc:	f53f af05 	bmi.w	800280a <gc_execute_line+0x9a6>
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <gc_execute_line+0xbbc>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8002a08:	e6ff      	b.n	800280a <gc_execute_line+0x9a6>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <gc_execute_line+0xbbc>)
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002a12:	e637      	b.n	8002684 <gc_execute_line+0x820>
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <gc_execute_line+0xbbc>)
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
 8002a1c:	e762      	b.n	80028e4 <gc_execute_line+0xa80>
 8002a1e:	bf00      	nop
 8002a20:	200010d4 	.word	0x200010d4
 8002a24:	fffffcde 	.word	0xfffffcde
 8002a28:	20001144 	.word	0x20001144
 8002a2c:	4ba4      	ldr	r3, [pc, #656]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8002a34:	e74a      	b.n	80028cc <gc_execute_line+0xa68>
 8002a36:	4ba2      	ldr	r3, [pc, #648]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
 8002a3e:	e739      	b.n	80028b4 <gc_execute_line+0xa50>
 8002a40:	4b9f      	ldr	r3, [pc, #636]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8002a48:	e728      	b.n	800289c <gc_execute_line+0xa38>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002a4a:	499e      	ldr	r1, [pc, #632]	; (8002cc4 <gc_execute_line+0xe60>)
 8002a4c:	2006      	movs	r0, #6
 8002a4e:	f004 ff63 	bl	8007918 <settings_read_coord_data>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	f43f ae78 	beq.w	8002748 <gc_execute_line+0x8e4>
 8002a58:	e757      	b.n	800290a <gc_execute_line+0xaa6>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8002a5a:	9b06      	ldr	r3, [sp, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f47f aedb 	bne.w	8002818 <gc_execute_line+0x9b4>
 8002a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a64:	469a      	mov	sl, r3
 8002a66:	e631      	b.n	80026cc <gc_execute_line+0x868>
  if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8002a68:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <gc_execute_line+0xe64>)
 8002a6a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002a6e:	079c      	lsls	r4, r3, #30
 8002a70:	d514      	bpl.n	8002a9c <gc_execute_line+0xc38>
      if (!((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC)
 8002a72:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d904      	bls.n	8002a86 <gc_execute_line+0xc22>
          gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8002a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	9309      	str	r3, [sp, #36]	; 0x24
      if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) {
 8002a86:	9b06      	ldr	r3, [sp, #24]
 8002a88:	b11b      	cbz	r3, 8002a92 <gc_execute_line+0xc2e>
 8002a8a:	9b07      	ldr	r3, [sp, #28]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f000 81ae 	beq.w	8002dee <gc_execute_line+0xf8a>
        if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 8002a92:	4b8b      	ldr	r3, [pc, #556]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002a94:	7a5b      	ldrb	r3, [r3, #9]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	f000 832a 	beq.w	80030f0 <gc_execute_line+0x128c>
 8002a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a9e:	f003 0440 	and.w	r4, r3, #64	; 0x40
  gc_state.line_number = gc_block.values.n;
 8002aa2:	4987      	ldr	r1, [pc, #540]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002aa4:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002aa8:	f898 3002 	ldrb.w	r3, [r8, #2]
  gc_state.line_number = gc_block.values.n;
 8002aac:	618a      	str	r2, [r1, #24]
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 8002aae:	704b      	strb	r3, [r1, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 8002ab0:	b113      	cbz	r3, 8002ab8 <gc_execute_line+0xc54>
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002ab8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002abc:	4a80      	ldr	r2, [pc, #512]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002abe:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 8002ac2:	68d0      	ldr	r0, [r2, #12]
 8002ac4:	4629      	mov	r1, r5
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8002ac6:	6113      	str	r3, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8002ac8:	9316      	str	r3, [sp, #88]	; 0x58
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags, GC_PARSER_LASER_FORCE_SYNC)) {
 8002aca:	f7fe fa85 	bl	8000fd8 <__aeabi_fcmpeq>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	f000 80a8 	beq.w	8002c24 <gc_execute_line+0xdc0>
 8002ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ad6:	0698      	lsls	r0, r3, #26
 8002ad8:	f100 80a4 	bmi.w	8002c24 <gc_execute_line+0xdc0>
 8002adc:	4b78      	ldr	r3, [pc, #480]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002ade:	7a58      	ldrb	r0, [r3, #9]
  if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002ae0:	b904      	cbnz	r4, 8002ae4 <gc_execute_line+0xc80>
      pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 8002ae2:	9517      	str	r5, [sp, #92]	; 0x5c
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002ae4:	f898 300a 	ldrb.w	r3, [r8, #10]
  gc_state.tool = gc_block.values.t;
 8002ae8:	f898 203c 	ldrb.w	r2, [r8, #60]	; 0x3c
 8002aec:	4974      	ldr	r1, [pc, #464]	; (8002cc0 <gc_execute_line+0xe5c>)
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002aee:	4283      	cmp	r3, r0
  gc_state.tool = gc_block.values.t;
 8002af0:	750a      	strb	r2, [r1, #20]
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 8002af2:	d007      	beq.n	8002b04 <gc_execute_line+0xca0>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 8002af4:	4618      	mov	r0, r3
 8002af6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002af8:	f005 faae 	bl	8008058 <spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 8002afc:	f898 300a 	ldrb.w	r3, [r8, #10]
 8002b00:	4a6f      	ldr	r2, [pc, #444]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b02:	7253      	strb	r3, [r2, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002b04:	4a6e      	ldr	r2, [pc, #440]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b06:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002b0a:	7a52      	ldrb	r2, [r2, #9]
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002b0c:	f898 0009 	ldrb.w	r0, [r8, #9]
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002b10:	4313      	orrs	r3, r2
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002b12:	4a6b      	ldr	r2, [pc, #428]	; (8002cc0 <gc_execute_line+0xe5c>)
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 8002b14:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 8002b18:	7a12      	ldrb	r2, [r2, #8]
 8002b1a:	4282      	cmp	r2, r0
 8002b1c:	d009      	beq.n	8002b32 <gc_execute_line+0xcce>
    coolant_sync(gc_block.modal.coolant);
 8002b1e:	f7ff f8bb 	bl	8001c98 <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 8002b22:	f898 3009 	ldrb.w	r3, [r8, #9]
 8002b26:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b28:	b113      	cbz	r3, 8002b30 <gc_execute_line+0xccc>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 8002b2a:	7a12      	ldrb	r2, [r2, #8]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	4a64      	ldr	r2, [pc, #400]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b30:	7213      	strb	r3, [r2, #8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002b32:	4a63      	ldr	r2, [pc, #396]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b34:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002b38:	7a11      	ldrb	r1, [r2, #8]
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002b3a:	f898 2000 	ldrb.w	r2, [r8]
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002b3e:	430b      	orrs	r3, r1
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002b40:	2a04      	cmp	r2, #4
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 8002b42:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002b46:	f000 8145 	beq.w	8002dd4 <gc_execute_line+0xf70>
  gc_state.modal.units = gc_block.modal.units;
 8002b4a:	f898 3003 	ldrb.w	r3, [r8, #3]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002b4e:	495c      	ldr	r1, [pc, #368]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b50:	f898 2005 	ldrb.w	r2, [r8, #5]
  gc_state.modal.units = gc_block.modal.units;
 8002b54:	708b      	strb	r3, [r1, #2]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002b56:	9b07      	ldr	r3, [sp, #28]
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8002b58:	710a      	strb	r2, [r1, #4]
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	f000 8124 	beq.w	8002da8 <gc_execute_line+0xf44>
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8002b60:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002b62:	f898 6007 	ldrb.w	r6, [r8, #7]
 8002b66:	799b      	ldrb	r3, [r3, #6]
 8002b68:	42b3      	cmp	r3, r6
 8002b6a:	d009      	beq.n	8002b80 <gc_execute_line+0xd1c>
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002b6c:	4d57      	ldr	r5, [pc, #348]	; (8002ccc <gc_execute_line+0xe68>)
 8002b6e:	ac19      	add	r4, sp, #100	; 0x64
 8002b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b74:	6823      	ldr	r3, [r4, #0]
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 8002b76:	f805 6c3a 	strb.w	r6, [r5, #-58]
    memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(float));
 8002b7a:	602b      	str	r3, [r5, #0]
    system_flag_wco_change();
 8002b7c:	f006 fed4 	bl	8009928 <system_flag_wco_change>
  switch(gc_block.non_modal_command) {
 8002b80:	f898 3000 	ldrb.w	r3, [r8]
  gc_state.modal.distance = gc_block.modal.distance;
 8002b84:	f898 2004 	ldrb.w	r2, [r8, #4]
 8002b88:	494d      	ldr	r1, [pc, #308]	; (8002cc0 <gc_execute_line+0xe5c>)
  switch(gc_block.non_modal_command) {
 8002b8a:	2b26      	cmp	r3, #38	; 0x26
  gc_state.modal.distance = gc_block.modal.distance;
 8002b8c:	70ca      	strb	r2, [r1, #3]
  switch(gc_block.non_modal_command) {
 8002b8e:	f000 8092 	beq.w	8002cb6 <gc_execute_line+0xe52>
 8002b92:	d97e      	bls.n	8002c92 <gc_execute_line+0xe2e>
 8002b94:	2b5c      	cmp	r3, #92	; 0x5c
 8002b96:	d073      	beq.n	8002c80 <gc_execute_line+0xe1c>
 8002b98:	2b66      	cmp	r3, #102	; 0x66
 8002b9a:	d065      	beq.n	8002c68 <gc_execute_line+0xe04>
 8002b9c:	2b28      	cmp	r3, #40	; 0x28
 8002b9e:	d05e      	beq.n	8002c5e <gc_execute_line+0xdfa>
  gc_state.modal.motion = gc_block.modal.motion;
 8002ba0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ba4:	4a46      	ldr	r2, [pc, #280]	; (8002cc0 <gc_execute_line+0xe5c>)
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002ba6:	2b50      	cmp	r3, #80	; 0x50
  gc_state.modal.motion = gc_block.modal.motion;
 8002ba8:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
 8002baa:	d003      	beq.n	8002bb4 <gc_execute_line+0xd50>
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8002bac:	9a07      	ldr	r2, [sp, #28]
 8002bae:	2a02      	cmp	r2, #2
 8002bb0:	f000 8096 	beq.w	8002ce0 <gc_execute_line+0xe7c>
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8002bb4:	f898 4008 	ldrb.w	r4, [r8, #8]
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002bba:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 8002bbc:	2c00      	cmp	r4, #0
 8002bbe:	f43f aab6 	beq.w	800212e <gc_execute_line+0x2ca>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 8002bc2:	f003 fb2f 	bl	8006224 <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002bc8:	79db      	ldrb	r3, [r3, #7]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d03d      	beq.n	8002c4a <gc_execute_line+0xde6>
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002bce:	2101      	movs	r1, #1
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002bd0:	2400      	movs	r4, #0
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002bd2:	2264      	movs	r2, #100	; 0x64
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002bd4:	483a      	ldr	r0, [pc, #232]	; (8002cc0 <gc_execute_line+0xe5c>)
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <gc_execute_line+0xe6c>)
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 8002bd8:	7001      	strb	r1, [r0, #0]
      if (sys.state != STATE_CHECK_MODE) {
 8002bda:	7819      	ldrb	r1, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 8002bdc:	7104      	strb	r4, [r0, #4]
      if (sys.state != STATE_CHECK_MODE) {
 8002bde:	2902      	cmp	r1, #2
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 8002be0:	70c4      	strb	r4, [r0, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8002be2:	7044      	strb	r4, [r0, #1]
      gc_state.modal.coord_select = 0; // G54
 8002be4:	7184      	strb	r4, [r0, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 8002be6:	7244      	strb	r4, [r0, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 8002be8:	7204      	strb	r4, [r0, #8]
        sys.f_override = DEFAULT_FEED_OVERRIDE;
 8002bea:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
 8002bec:	725a      	strb	r2, [r3, #9]
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
 8002bee:	729a      	strb	r2, [r3, #10]
      if (sys.state != STATE_CHECK_MODE) {
 8002bf0:	d010      	beq.n	8002c14 <gc_execute_line+0xdb0>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8002bf2:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f004 fe8e 	bl	8007918 <settings_read_coord_data>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	f43f ada3 	beq.w	8002748 <gc_execute_line+0x8e4>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 8002c02:	f006 fe91 	bl	8009928 <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0f);
 8002c06:	4620      	mov	r0, r4
 8002c08:	2100      	movs	r1, #0
 8002c0a:	f005 f99b 	bl	8007f44 <spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7ff f81e 	bl	8001c50 <coolant_set_state>
      report_feedback_message(MESSAGE_PROGRAM_END);
 8002c14:	2008      	movs	r0, #8
 8002c16:	f003 fe29 	bl	800686c <report_feedback_message>
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 8002c1a:	2400      	movs	r4, #0
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002c1e:	71dc      	strb	r4, [r3, #7]
 8002c20:	f7ff ba85 	b.w	800212e <gc_execute_line+0x2ca>
      if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002c26:	7a58      	ldrb	r0, [r3, #9]
 8002c28:	b160      	cbz	r0, 8002c44 <gc_execute_line+0xde0>
        if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_ISMOTION)) {
 8002c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c2c:	0619      	lsls	r1, r3, #24
 8002c2e:	d409      	bmi.n	8002c44 <gc_execute_line+0xde0>
          if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8002c30:	2c00      	cmp	r4, #0
 8002c32:	f000 80d4 	beq.w	8002dde <gc_execute_line+0xf7a>
            spindle_sync(gc_state.modal.spindle, 0.0);
 8002c36:	2100      	movs	r1, #0
 8002c38:	f005 fa0e 	bl	8008058 <spindle_sync>
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002c3e:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 8002c42:	7a58      	ldrb	r0, [r3, #9]
      gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 8002c44:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002c46:	60dd      	str	r5, [r3, #12]
 8002c48:	e74a      	b.n	8002ae0 <gc_execute_line+0xc7c>
      if (sys.state != STATE_CHECK_MODE) {
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <gc_execute_line+0xe6c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d0e3      	beq.n	8002c1a <gc_execute_line+0xdb6>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8002c52:	2008      	movs	r0, #8
 8002c54:	f006 ff38 	bl	8009ac8 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8002c58:	f003 f8f2 	bl	8005e40 <protocol_execute_realtime>
 8002c5c:	e7dd      	b.n	8002c1a <gc_execute_line+0xdb6>
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8002c5e:	491d      	ldr	r1, [pc, #116]	; (8002cd4 <gc_execute_line+0xe70>)
 8002c60:	2007      	movs	r0, #7
 8002c62:	f004 fd7d 	bl	8007760 <settings_write_coord_data>
      break;
 8002c66:	e79b      	b.n	8002ba0 <gc_execute_line+0xd3c>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <gc_execute_line+0xe74>)
 8002c6c:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8002c70:	644b      	str	r3, [r1, #68]	; 0x44
 8002c72:	6053      	str	r3, [r2, #4]
 8002c74:	6093      	str	r3, [r2, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
 8002c78:	6113      	str	r3, [r2, #16]
      system_flag_wco_change();
 8002c7a:	f006 fe55 	bl	8009928 <system_flag_wco_change>
      break;
 8002c7e:	e78f      	b.n	8002ba0 <gc_execute_line+0xd3c>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8002c80:	4d16      	ldr	r5, [pc, #88]	; (8002cdc <gc_execute_line+0xe78>)
 8002c82:	4c15      	ldr	r4, [pc, #84]	; (8002cd8 <gc_execute_line+0xe74>)
 8002c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	6023      	str	r3, [r4, #0]
      system_flag_wco_change();
 8002c8c:	f006 fe4c 	bl	8009928 <system_flag_wco_change>
      break;
 8002c90:	e786      	b.n	8002ba0 <gc_execute_line+0xd3c>
  switch(gc_block.non_modal_command) {
 8002c92:	2b1c      	cmp	r3, #28
 8002c94:	d03e      	beq.n	8002d14 <gc_execute_line+0xeb0>
 8002c96:	2b1e      	cmp	r3, #30
 8002c98:	d03c      	beq.n	8002d14 <gc_execute_line+0xeb0>
 8002c9a:	2b0a      	cmp	r3, #10
 8002c9c:	d180      	bne.n	8002ba0 <gc_execute_line+0xd3c>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8002c9e:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <gc_execute_line+0xe60>)
 8002ca0:	4650      	mov	r0, sl
 8002ca2:	f004 fd5d 	bl	8007760 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <gc_execute_line+0xe5c>)
 8002ca8:	799b      	ldrb	r3, [r3, #6]
 8002caa:	4553      	cmp	r3, sl
 8002cac:	f47f af78 	bne.w	8002ba0 <gc_execute_line+0xd3c>
        memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(float));
 8002cb0:	4d04      	ldr	r5, [pc, #16]	; (8002cc4 <gc_execute_line+0xe60>)
 8002cb2:	4c06      	ldr	r4, [pc, #24]	; (8002ccc <gc_execute_line+0xe68>)
 8002cb4:	e7e6      	b.n	8002c84 <gc_execute_line+0xe20>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8002cb6:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <gc_execute_line+0xe70>)
 8002cb8:	2006      	movs	r0, #6
 8002cba:	f004 fd51 	bl	8007760 <settings_write_coord_data>
      break;
 8002cbe:	e76f      	b.n	8002ba0 <gc_execute_line+0xd3c>
 8002cc0:	200010d4 	.word	0x200010d4
 8002cc4:	20001144 	.word	0x20001144
 8002cc8:	2000134c 	.word	0x2000134c
 8002ccc:	20001104 	.word	0x20001104
 8002cd0:	20001188 	.word	0x20001188
 8002cd4:	200010f0 	.word	0x200010f0
 8002cd8:	20001118 	.word	0x20001118
 8002cdc:	20001170 	.word	0x20001170
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d05a      	beq.n	8002d9a <gc_execute_line+0xf36>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d04b      	beq.n	8002d80 <gc_execute_line+0xf1c>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8002ce8:	3b02      	subs	r3, #2
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d931      	bls.n	8002d52 <gc_execute_line+0xeee>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cee:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002cf2:	4cab      	ldr	r4, [pc, #684]	; (8002fa0 <gc_execute_line+0x113c>)
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cfa:	a916      	add	r1, sp, #88	; 0x58
 8002cfc:	4620      	mov	r0, r4
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8002cfe:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8002d02:	f001 f931 	bl	8003f68 <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8002d06:	b9e0      	cbnz	r0, 8002d42 <gc_execute_line+0xede>
 8002d08:	4da6      	ldr	r5, [pc, #664]	; (8002fa4 <gc_execute_line+0x1140>)
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8002d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	602b      	str	r3, [r5, #0]
 8002d12:	e74f      	b.n	8002bb4 <gc_execute_line+0xd50>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002d14:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8002d20:	9b07      	ldr	r3, [sp, #28]
 8002d22:	b11b      	cbz	r3, 8002d2c <gc_execute_line+0xec8>
 8002d24:	a916      	add	r1, sp, #88	; 0x58
 8002d26:	489e      	ldr	r0, [pc, #632]	; (8002fa0 <gc_execute_line+0x113c>)
 8002d28:	f000 feb0 	bl	8003a8c <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002d2c:	4d9e      	ldr	r5, [pc, #632]	; (8002fa8 <gc_execute_line+0x1144>)
 8002d2e:	4c9d      	ldr	r4, [pc, #628]	; (8002fa4 <gc_execute_line+0x1140>)
      mc_line(gc_block.values.ijk, pl_data);
 8002d30:	a916      	add	r1, sp, #88	; 0x58
 8002d32:	489d      	ldr	r0, [pc, #628]	; (8002fa8 <gc_execute_line+0x1144>)
 8002d34:	f000 feaa 	bl	8003a8c <mc_line>
      memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(float));
 8002d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	6023      	str	r3, [r4, #0]
      break;
 8002d40:	e72e      	b.n	8002ba0 <gc_execute_line+0xd3c>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8002d42:	2801      	cmp	r0, #1
 8002d44:	f47f af36 	bne.w	8002bb4 <gc_execute_line+0xd50>
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8002d48:	4998      	ldr	r1, [pc, #608]	; (8002fac <gc_execute_line+0x1148>)
 8002d4a:	4896      	ldr	r0, [pc, #600]	; (8002fa4 <gc_execute_line+0x1140>)
 8002d4c:	f006 fdf6 	bl	800993c <system_convert_array_steps_to_mpos>
 8002d50:	e730      	b.n	8002bb4 <gc_execute_line+0xd50>
          mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8002d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d54:	4c92      	ldr	r4, [pc, #584]	; (8002fa0 <gc_execute_line+0x113c>)
 8002d56:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d5a:	9304      	str	r3, [sp, #16]
 8002d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002d5e:	4d91      	ldr	r5, [pc, #580]	; (8002fa4 <gc_execute_line+0x1140>)
 8002d60:	9303      	str	r3, [sp, #12]
 8002d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d64:	f8d8 6034 	ldr.w	r6, [r8, #52]	; 0x34
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d6c:	a916      	add	r1, sp, #88	; 0x58
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	462a      	mov	r2, r5
 8002d72:	f1a4 032c 	sub.w	r3, r4, #44	; 0x2c
 8002d76:	4620      	mov	r0, r4
 8002d78:	9600      	str	r6, [sp, #0]
 8002d7a:	f000 febd 	bl	8003af8 <mc_arc>
 8002d7e:	e7c4      	b.n	8002d0a <gc_execute_line+0xea6>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002d80:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
        mc_line(gc_block.values.xyz, pl_data);
 8002d84:	4c86      	ldr	r4, [pc, #536]	; (8002fa0 <gc_execute_line+0x113c>)
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002d86:	f043 0301 	orr.w	r3, r3, #1
        mc_line(gc_block.values.xyz, pl_data);
 8002d8a:	a916      	add	r1, sp, #88	; 0x58
 8002d8c:	4620      	mov	r0, r4
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8002d8e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002d92:	4d84      	ldr	r5, [pc, #528]	; (8002fa4 <gc_execute_line+0x1140>)
        mc_line(gc_block.values.xyz, pl_data);
 8002d94:	f000 fe7a 	bl	8003a8c <mc_line>
 8002d98:	e7b7      	b.n	8002d0a <gc_execute_line+0xea6>
        mc_line(gc_block.values.xyz, pl_data);
 8002d9a:	4c81      	ldr	r4, [pc, #516]	; (8002fa0 <gc_execute_line+0x113c>)
 8002d9c:	a916      	add	r1, sp, #88	; 0x58
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f000 fe74 	bl	8003a8c <mc_line>
 8002da4:	4d7f      	ldr	r5, [pc, #508]	; (8002fa4 <gc_execute_line+0x1140>)
 8002da6:	e7b0      	b.n	8002d0a <gc_execute_line+0xea6>
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8002da8:	f898 3006 	ldrb.w	r3, [r8, #6]
 8002dac:	714b      	strb	r3, [r1, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 8002dae:	b913      	cbnz	r3, 8002db6 <gc_execute_line+0xf52>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0f;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8002db6:	f8d8 4048 	ldr.w	r4, [r8, #72]	; 0x48
 8002dba:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <gc_execute_line+0x114c>)
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002dc0:	f7fe f90a 	bl	8000fd8 <__aeabi_fcmpeq>
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f47f aecb 	bne.w	8002b60 <gc_execute_line+0xcfc>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8002dca:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <gc_execute_line+0x114c>)
 8002dcc:	659c      	str	r4, [r3, #88]	; 0x58
      system_flag_wco_change();
 8002dce:	f006 fdab 	bl	8009928 <system_flag_wco_change>
 8002dd2:	e6c5      	b.n	8002b60 <gc_execute_line+0xcfc>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 8002dd4:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8002dd8:	f001 f890 	bl	8003efc <mc_dwell>
 8002ddc:	e6b5      	b.n	8002b4a <gc_execute_line+0xce6>
          else { spindle_sync(gc_state.modal.spindle, gc_block.values.s); }
 8002dde:	4629      	mov	r1, r5
 8002de0:	f005 f93a 	bl	8008058 <spindle_sync>
 8002de4:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <gc_execute_line+0x114c>)
 8002de6:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 8002dea:	7a58      	ldrb	r0, [r3, #9]
 8002dec:	e72a      	b.n	8002c44 <gc_execute_line+0xde0>
        gc_parser_flags |= GC_PARSER_LASER_ISMOTION;
 8002dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	9309      	str	r3, [sp, #36]	; 0x24
 8002df8:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8002dfc:	e651      	b.n	8002aa2 <gc_execute_line+0xc3e>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 8002dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e00:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002e02:	9b06      	ldr	r3, [sp, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f43f ab76 	beq.w	80024f6 <gc_execute_line+0x692>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8002e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e0c:	4213      	tst	r3, r2
 8002e0e:	d102      	bne.n	8002e16 <gc_execute_line+0xfb2>
 8002e10:	2420      	movs	r4, #32
 8002e12:	f7ff b98c 	b.w	800212e <gc_execute_line+0x2ca>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <gc_execute_line+0x114c>)
 8002e18:	f107 0210 	add.w	r2, r7, #16
 8002e1c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8002e20:	69d9      	ldr	r1, [r3, #28]
 8002e22:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8002e26:	f7fd fe39 	bl	8000a9c <__aeabi_fsub>
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e2a:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <gc_execute_line+0x114c>)
 8002e2c:	f106 0210 	add.w	r2, r6, #16
 8002e30:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8002e34:	4683      	mov	fp, r0
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e36:	69d9      	ldr	r1, [r3, #28]
 8002e38:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8002e3c:	f7fd fe2e 	bl	8000a9c <__aeabi_fsub>
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002e40:	f019 0580 	ands.w	r5, r9, #128	; 0x80
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8002e44:	900a      	str	r0, [sp, #40]	; 0x28
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8002e46:	d05b      	beq.n	8002f00 <gc_execute_line+0x109c>
            bit_false(value_words,bit(WORD_R));
 8002e48:	f029 0980 	bic.w	r9, r9, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e4c:	2214      	movs	r2, #20
 8002e4e:	4954      	ldr	r1, [pc, #336]	; (8002fa0 <gc_execute_line+0x113c>)
 8002e50:	4854      	ldr	r0, [pc, #336]	; (8002fa4 <gc_execute_line+0x1140>)
            bit_false(value_words,bit(WORD_R));
 8002e52:	fa1f f989 	uxth.w	r9, r9
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e56:	f008 f867 	bl	800af28 <memcmp>
 8002e5a:	bb18      	cbnz	r0, 8002ea4 <gc_execute_line+0x1040>
 8002e5c:	2421      	movs	r4, #33	; 0x21
 8002e5e:	f7ff b966 	b.w	800212e <gc_execute_line+0x2ca>
      switch (gc_block.modal.motion) {
 8002e62:	2d8e      	cmp	r5, #142	; 0x8e
 8002e64:	d005      	beq.n	8002e72 <gc_execute_line+0x100e>
 8002e66:	d302      	bcc.n	8002e6e <gc_execute_line+0x100a>
 8002e68:	2d8f      	cmp	r5, #143	; 0x8f
 8002e6a:	f47f ac2e 	bne.w	80026ca <gc_execute_line+0x866>
            gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 8002e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e70:	9309      	str	r3, [sp, #36]	; 0x24
            if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) ||
 8002e72:	f105 0372 	add.w	r3, r5, #114	; 0x72
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d804      	bhi.n	8002e86 <gc_execute_line+0x1022>
                (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 8002e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	9309      	str	r3, [sp, #36]	; 0x24
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8002e86:	9b06      	ldr	r3, [sp, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f43f ab34 	beq.w	80024f6 <gc_execute_line+0x692>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8002e8e:	2214      	movs	r2, #20
 8002e90:	4943      	ldr	r1, [pc, #268]	; (8002fa0 <gc_execute_line+0x113c>)
 8002e92:	4844      	ldr	r0, [pc, #272]	; (8002fa4 <gc_execute_line+0x1140>)
 8002e94:	f008 f848 	bl	800af28 <memcmp>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d0df      	beq.n	8002e5c <gc_execute_line+0xff8>
 8002e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e9e:	f003 0201 	and.w	r2, r3, #1
 8002ea2:	e413      	b.n	80026cc <gc_execute_line+0x868>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8002ea4:	f898 3003 	ldrb.w	r3, [r8, #3]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <gc_execute_line+0x1056>
 8002eac:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8002eb0:	4940      	ldr	r1, [pc, #256]	; (8002fb4 <gc_execute_line+0x1150>)
 8002eb2:	f7fd fefd 	bl	8000cb0 <__aeabi_fmul>
 8002eb6:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002eba:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 8002ebe:	4608      	mov	r0, r1
 8002ec0:	f7fd fef6 	bl	8000cb0 <__aeabi_fmul>
 8002ec4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002ec8:	f7fd fef2 	bl	8000cb0 <__aeabi_fmul>
 8002ecc:	4659      	mov	r1, fp
 8002ece:	4605      	mov	r5, r0
 8002ed0:	4658      	mov	r0, fp
 8002ed2:	f7fd feed 	bl	8000cb0 <__aeabi_fmul>
 8002ed6:	4601      	mov	r1, r0
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f7fd fddf 	bl	8000a9c <__aeabi_fsub>
 8002ede:	4605      	mov	r5, r0
 8002ee0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	f7fd fee4 	bl	8000cb0 <__aeabi_fmul>
 8002ee8:	4601      	mov	r1, r0
 8002eea:	4628      	mov	r0, r5
 8002eec:	f7fd fdd6 	bl	8000a9c <__aeabi_fsub>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002ef0:	2100      	movs	r1, #0
            float h_x2_div_d = 4.0f * gc_block.values.r*gc_block.values.r - x*x - y*y;
 8002ef2:	4605      	mov	r5, r0
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8002ef4:	f7fe f87a 	bl	8000fec <__aeabi_fcmplt>
 8002ef8:	b148      	cbz	r0, 8002f0e <gc_execute_line+0x10aa>
 8002efa:	2422      	movs	r4, #34	; 0x22
 8002efc:	f7ff b917 	b.w	800212e <gc_execute_line+0x2ca>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8002f00:	9b08      	ldr	r3, [sp, #32]
 8002f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f04:	4213      	tst	r3, r2
 8002f06:	d157      	bne.n	8002fb8 <gc_execute_line+0x1154>
 8002f08:	2423      	movs	r4, #35	; 0x23
 8002f0a:	f7ff b910 	b.w	800212e <gc_execute_line+0x2ca>
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f008 f93a 	bl	800b188 <sqrtf>
 8002f14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f16:	4605      	mov	r5, r0
 8002f18:	4658      	mov	r0, fp
 8002f1a:	f001 f9b9 	bl	8004290 <hypot_f>
 8002f1e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8002f22:	4601      	mov	r1, r0
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7fd ff77 	bl	8000e18 <__aeabi_fdiv>
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f2a:	f898 3001 	ldrb.w	r3, [r8, #1]
            h_x2_div_d = -sqrtf(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8002f2e:	4605      	mov	r5, r0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f30:	2b03      	cmp	r3, #3
            if (gc_block.values.r < 0) {
 8002f32:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 8002f36:	bf08      	it	eq
 8002f38:	f100 4500 	addeq.w	r5, r0, #2147483648	; 0x80000000
            if (gc_block.values.r < 0) {
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	9308      	str	r3, [sp, #32]
 8002f42:	f7fe f853 	bl	8000fec <__aeabi_fcmplt>
 8002f46:	9b08      	ldr	r3, [sp, #32]
 8002f48:	b128      	cbz	r0, 8002f56 <gc_execute_line+0x10f2>
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002f4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
                h_x2_div_d = -h_x2_div_d;
 8002f4e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 8002f52:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
            gc_block.values.ijk[axis_0] = 0.5f*(x-(y*h_x2_div_d));
 8002f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f58:	4628      	mov	r0, r5
 8002f5a:	f7fd fea9 	bl	8000cb0 <__aeabi_fmul>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	4658      	mov	r0, fp
 8002f62:	f7fd fd9b 	bl	8000a9c <__aeabi_fsub>
 8002f66:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f6a:	f7fd fea1 	bl	8000cb0 <__aeabi_fmul>
 8002f6e:	3704      	adds	r7, #4
 8002f70:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8002f74:	6078      	str	r0, [r7, #4]
            gc_block.values.ijk[axis_1] = 0.5f*(y+(x*h_x2_div_d));
 8002f76:	4659      	mov	r1, fp
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f7fd fe99 	bl	8000cb0 <__aeabi_fmul>
 8002f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f80:	f7fd fd8e 	bl	8000aa0 <__addsf3>
 8002f84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002f88:	f7fd fe92 	bl	8000cb0 <__aeabi_fmul>
 8002f8c:	3604      	adds	r6, #4
 8002f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f90:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8002f94:	f003 0201 	and.w	r2, r3, #1
 8002f98:	6070      	str	r0, [r6, #4]
 8002f9a:	f7ff bb97 	b.w	80026cc <gc_execute_line+0x868>
 8002f9e:	bf00      	nop
 8002fa0:	20001170 	.word	0x20001170
 8002fa4:	200010f0 	.word	0x200010f0
 8002fa8:	20001144 	.word	0x20001144
 8002fac:	200011b4 	.word	0x200011b4
 8002fb0:	200010d4 	.word	0x200010d4
 8002fb4:	41cb3333 	.word	0x41cb3333
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002fb8:	f898 3003 	ldrb.w	r3, [r8, #3]
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002fbc:	f029 090e 	bic.w	r9, r9, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002fc0:	2b01      	cmp	r3, #1
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 8002fc2:	fa1f f989 	uxth.w	r9, r9
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8002fc6:	f000 80a9 	beq.w	800311c <gc_execute_line+0x12b8>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8002fca:	1d35      	adds	r5, r6, #4
 8002fcc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8002fd0:	6869      	ldr	r1, [r5, #4]
 8002fd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fd4:	f7fd fd62 	bl	8000a9c <__aeabi_fsub>
 8002fd8:	4606      	mov	r6, r0
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 8002fda:	3704      	adds	r7, #4
 8002fdc:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4658      	mov	r0, fp
 8002fe4:	f7fd fd5a 	bl	8000a9c <__aeabi_fsub>
            float target_r = hypot_f(x,y);
 8002fe8:	4631      	mov	r1, r6
 8002fea:	f001 f951 	bl	8004290 <hypot_f>
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002fee:	6869      	ldr	r1, [r5, #4]
            float target_r = hypot_f(x,y);
 8002ff0:	4606      	mov	r6, r0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 f94c 	bl	8004290 <hypot_f>
 8002ff8:	4607      	mov	r7, r0
            float delta_r = fabsf(target_r-gc_block.values.r);
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	4639      	mov	r1, r7
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 8002ffe:	f8c8 7034 	str.w	r7, [r8, #52]	; 0x34
            float delta_r = fabsf(target_r-gc_block.values.r);
 8003002:	f7fd fd4b 	bl	8000a9c <__aeabi_fsub>
 8003006:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
            if (delta_r > 0.005f) {
 800300a:	4628      	mov	r0, r5
 800300c:	4953      	ldr	r1, [pc, #332]	; (800315c <gc_execute_line+0x12f8>)
 800300e:	f7fe f80b 	bl	8001028 <__aeabi_fcmpgt>
 8003012:	2800      	cmp	r0, #0
 8003014:	f43f af42 	beq.w	8002e9c <gc_execute_line+0x1038>
              if (delta_r > 0.5f) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8003018:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800301c:	4628      	mov	r0, r5
 800301e:	f7fe f803 	bl	8001028 <__aeabi_fcmpgt>
 8003022:	2800      	cmp	r0, #0
 8003024:	f47f af1a 	bne.w	8002e5c <gc_execute_line+0xff8>
              if (delta_r > (0.001f*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 8003028:	494d      	ldr	r1, [pc, #308]	; (8003160 <gc_execute_line+0x12fc>)
 800302a:	4638      	mov	r0, r7
 800302c:	f7fd fe40 	bl	8000cb0 <__aeabi_fmul>
 8003030:	4601      	mov	r1, r0
 8003032:	4628      	mov	r0, r5
 8003034:	f7fd fff8 	bl	8001028 <__aeabi_fcmpgt>
 8003038:	2800      	cmp	r0, #0
 800303a:	f47f af0f 	bne.w	8002e5c <gc_execute_line+0xff8>
 800303e:	e72d      	b.n	8002e9c <gc_execute_line+0x1038>
          if (gc_block.values.l == 20) {
 8003040:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8003044:	2201      	movs	r2, #1
          if (gc_block.values.l == 20) {
 8003046:	9310      	str	r3, [sp, #64]	; 0x40
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8003048:	4b46      	ldr	r3, [pc, #280]	; (8003164 <gc_execute_line+0x1300>)
 800304a:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003174 <gc_execute_line+0x1310>
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	9412      	str	r4, [sp, #72]	; 0x48
 8003052:	9311      	str	r3, [sp, #68]	; 0x44
 8003054:	2300      	movs	r3, #0
 8003056:	9713      	str	r7, [sp, #76]	; 0x4c
 8003058:	4614      	mov	r4, r2
 800305a:	465f      	mov	r7, fp
 800305c:	46b3      	mov	fp, r6
 800305e:	461e      	mov	r6, r3
 8003060:	4d41      	ldr	r5, [pc, #260]	; (8003168 <gc_execute_line+0x1304>)
        if (bit_istrue(axis_words,bit(idx)) ) {
 8003062:	9b06      	ldr	r3, [sp, #24]
 8003064:	fa43 f106 	asr.w	r1, r3, r6
 8003068:	07c8      	lsls	r0, r1, #31
 800306a:	d504      	bpl.n	8003076 <gc_execute_line+0x1212>
          if (gc_block.values.l == 20) {
 800306c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800306e:	2b14      	cmp	r3, #20
 8003070:	d009      	beq.n	8003086 <gc_execute_line+0x1222>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8003072:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003074:	6029      	str	r1, [r5, #0]
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8003076:	2c05      	cmp	r4, #5
 8003078:	d015      	beq.n	80030a6 <gc_execute_line+0x1242>
 800307a:	3401      	adds	r4, #1
 800307c:	b2e4      	uxtb	r4, r4
 800307e:	3601      	adds	r6, #1
 8003080:	3704      	adds	r7, #4
 8003082:	3504      	adds	r5, #4
 8003084:	e7ed      	b.n	8003062 <gc_execute_line+0x11fe>
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8003086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003088:	6838      	ldr	r0, [r7, #0]
 800308a:	f7fd fd07 	bl	8000a9c <__aeabi_fsub>
 800308e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003090:	f7fd fd04 	bl	8000a9c <__aeabi_fsub>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8003094:	2e02      	cmp	r6, #2
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8003096:	6028      	str	r0, [r5, #0]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8003098:	d1ed      	bne.n	8003076 <gc_execute_line+0x1212>
 800309a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800309c:	f7fd fcfe 	bl	8000a9c <__aeabi_fsub>
 80030a0:	f8c8 001c 	str.w	r0, [r8, #28]
 80030a4:	e7e9      	b.n	800307a <gc_execute_line+0x1216>
 80030a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80030a8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80030aa:	465e      	mov	r6, fp
 80030ac:	f7ff bbaf 	b.w	800280e <gc_execute_line+0x9aa>
      if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 80030b0:	f898 3000 	ldrb.w	r3, [r8]
 80030b4:	2b35      	cmp	r3, #53	; 0x35
 80030b6:	d002      	beq.n	80030be <gc_execute_line+0x125a>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f47f ac74 	bne.w	80029a6 <gc_execute_line+0xb42>
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80030be:	4a29      	ldr	r2, [pc, #164]	; (8003164 <gc_execute_line+0x1300>)
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <gc_execute_line+0x1300>)
 80030c2:	7a11      	ldrb	r1, [r2, #8]
 80030c4:	7a5b      	ldrb	r3, [r3, #9]
      pl_data->spindle_speed = gc_state.spindle_speed;
 80030c6:	68d2      	ldr	r2, [r2, #12]
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80030c8:	430b      	orrs	r3, r1
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80030ca:	a816      	add	r0, sp, #88	; 0x58
 80030cc:	4927      	ldr	r1, [pc, #156]	; (800316c <gc_execute_line+0x1308>)
      plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 80030ce:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
      pl_data->spindle_speed = gc_state.spindle_speed;
 80030d2:	9217      	str	r2, [sp, #92]	; 0x5c
      uint8_t status = jog_execute(&plan_data, &gc_block);
 80030d4:	f000 f852 	bl	800317c <jog_execute>
      if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 80030d8:	4604      	mov	r4, r0
 80030da:	2800      	cmp	r0, #0
 80030dc:	f47f a827 	bne.w	800212e <gc_execute_line+0x2ca>
 80030e0:	4e23      	ldr	r6, [pc, #140]	; (8003170 <gc_execute_line+0x130c>)
 80030e2:	4d24      	ldr	r5, [pc, #144]	; (8003174 <gc_execute_line+0x1310>)
 80030e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80030e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e8:	6833      	ldr	r3, [r6, #0]
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	f7ff b81f 	b.w	800212e <gc_execute_line+0x2ca>
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <gc_execute_line+0x1300>)
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80030f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 80030f4:	781b      	ldrb	r3, [r3, #0]
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80030f6:	3b01      	subs	r3, #1
 80030f8:	2b02      	cmp	r3, #2
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80030fa:	4613      	mov	r3, r2
          if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC)
 80030fc:	d829      	bhi.n	8003152 <gc_execute_line+0x12ee>
            if (bit_istrue(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 80030fe:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8003102:	f43f acce 	beq.w	8002aa2 <gc_execute_line+0xc3e>
              gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8003106:	f043 0320 	orr.w	r3, r3, #32
 800310a:	b2db      	uxtb	r3, r3
 800310c:	9309      	str	r3, [sp, #36]	; 0x24
 800310e:	f003 0440 	and.w	r4, r3, #64	; 0x40
 8003112:	e4c6      	b.n	8002aa2 <gc_execute_line+0xc3e>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8003114:	f898 a007 	ldrb.w	sl, [r8, #7]
 8003118:	f7ff bb0f 	b.w	800273a <gc_execute_line+0x8d6>
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <gc_execute_line+0x1304>)
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 800311e:	960b      	str	r6, [sp, #44]	; 0x2c
 8003120:	4626      	mov	r6, r4
 8003122:	461c      	mov	r4, r3
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <gc_execute_line+0x1314>)
 8003126:	9b08      	ldr	r3, [sp, #32]
 8003128:	fa43 f105 	asr.w	r1, r3, r5
 800312c:	f011 0f01 	tst.w	r1, #1
 8003130:	f105 0501 	add.w	r5, r5, #1
 8003134:	d006      	beq.n	8003144 <gc_execute_line+0x12e0>
 8003136:	4611      	mov	r1, r2
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	920c      	str	r2, [sp, #48]	; 0x30
 800313c:	f7fd fdb8 	bl	8000cb0 <__aeabi_fmul>
 8003140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003142:	6020      	str	r0, [r4, #0]
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 8003144:	2d05      	cmp	r5, #5
 8003146:	f104 0404 	add.w	r4, r4, #4
 800314a:	d1ec      	bne.n	8003126 <gc_execute_line+0x12c2>
 800314c:	4634      	mov	r4, r6
 800314e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003150:	e73b      	b.n	8002fca <gc_execute_line+0x1166>
            if (bit_isfalse(gc_parser_flags, GC_PARSER_LASER_DISABLE)) {
 8003152:	f012 0440 	ands.w	r4, r2, #64	; 0x40
 8003156:	f47f aca4 	bne.w	8002aa2 <gc_execute_line+0xc3e>
 800315a:	e7d4      	b.n	8003106 <gc_execute_line+0x12a2>
 800315c:	3ba3d70a 	.word	0x3ba3d70a
 8003160:	3a83126f 	.word	0x3a83126f
 8003164:	200010d4 	.word	0x200010d4
 8003168:	20001144 	.word	0x20001144
 800316c:	20001130 	.word	0x20001130
 8003170:	20001170 	.word	0x20001170
 8003174:	200010f0 	.word	0x200010f0
 8003178:	41cb3333 	.word	0x41cb3333

0800317c <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	4605      	mov	r5, r0
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003180:	7a03      	ldrb	r3, [r0, #8]
  pl_data->feed_rate = gc_block->values.f;
 8003182:	6908      	ldr	r0, [r1, #16]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8003184:	f043 0304 	orr.w	r3, r3, #4
#ifdef USE_LINE_NUMBERS
  pl_data->line_number = gc_block->values.n;
#endif

  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003188:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <jog_execute+0x58>)
  pl_data->feed_rate = gc_block->values.f;
 800318a:	6028      	str	r0, [r5, #0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 800318c:	722b      	strb	r3, [r5, #8]
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 800318e:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8003192:	f101 0440 	add.w	r4, r1, #64	; 0x40
  if (bit_istrue(settings.flags, BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003196:	069b      	lsls	r3, r3, #26
 8003198:	d506      	bpl.n	80031a8 <jog_execute+0x2c>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 800319a:	4620      	mov	r0, r4
 800319c:	f006 fbf8 	bl	8009990 <system_check_travel_limits>
 80031a0:	b110      	cbz	r0, 80031a8 <jog_execute+0x2c>
 80031a2:	240f      	movs	r4, #15
      #endif
    }
  }

  return(STATUS_OK);
}
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
  if (sys.state == STATE_IDLE) {
 80031a8:	4e0b      	ldr	r6, [pc, #44]	; (80031d8 <jog_execute+0x5c>)
  mc_line(gc_block->values.xyz, pl_data);
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	f000 fc6d 	bl	8003a8c <mc_line>
  if (sys.state == STATE_IDLE) {
 80031b2:	7834      	ldrb	r4, [r6, #0]
 80031b4:	b114      	cbz	r4, 80031bc <jog_execute+0x40>
  return(STATUS_OK);
 80031b6:	2400      	movs	r4, #0
}
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 80031bc:	f001 faa0 	bl	8004700 <plan_get_current_block>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d0f8      	beq.n	80031b6 <jog_execute+0x3a>
      sys.state = STATE_JOG;
 80031c4:	2320      	movs	r3, #32
 80031c6:	7033      	strb	r3, [r6, #0]
      st_prep_buffer();
 80031c8:	f005 fbde 	bl	8008988 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 80031cc:	f004 fffa 	bl	80081c4 <st_wake_up>
}
 80031d0:	4620      	mov	r0, r4
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	2000134c 	.word	0x2000134c
 80031d8:	20001188 	.word	0x20001188

080031dc <limits_init>:
#ifndef HOMING_AXIS_LOCATE_SCALAR
  #define HOMING_AXIS_LOCATE_SCALAR  5.0f // Must be > 1 to ensure limit switch is cleared.
#endif

void limits_init()
{
 80031dc:	b530      	push	{r4, r5, lr}
    WDTCSR = (1<<WDP0); // Set time-out at ~32msec.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80031de:	2101      	movs	r1, #1
{
 80031e0:	b085      	sub	sp, #20
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80031e2:	2009      	movs	r0, #9
#ifdef DISABLE_LIMIT_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 80031e4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
	RCC_APB2PeriphClockCmd(RCC_LIMIT_PORT | RCC_APB2Periph_AFIO, ENABLE);
 80031e8:	f7fe fb6e 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80031ec:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031ee:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 80031f0:	a904      	add	r1, sp, #16
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);

	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 80031f2:	4d23      	ldr	r5, [pc, #140]	; (8003280 <limits_init+0xa4>)
	GPIO_InitStructure.GPIO_Pin = LIMIT_MASK;
 80031f4:	f821 4d10 	strh.w	r4, [r1, #-16]!
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 80031f8:	4822      	ldr	r0, [pc, #136]	; (8003284 <limits_init+0xa8>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 80031fa:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031fe:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(LIMIT_PORT, &GPIO_InitStructure);
 8003202:	f7fe f8fd 	bl	8001400 <GPIO_Init>
	if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE))
 8003206:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 800320a:	071b      	lsls	r3, r3, #28
 800320c:	d406      	bmi.n	800321c <limits_init+0x40>

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 800320e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003212:	4b1d      	ldr	r3, [pc, #116]	; (8003288 <limits_init+0xac>)
 8003214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	else
	{
		limits_disable();
	}
#endif
}
 8003218:	b005      	add	sp, #20
 800321a:	bd30      	pop	{r4, r5, pc}
		delay_ms(100); // added by MS for debug (issue#14)
 800321c:	2064      	movs	r0, #100	; 0x64
 800321e:	f001 f827 	bl	8004270 <delay_ms>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, X_LIMIT_BIT);
 8003222:	210c      	movs	r1, #12
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe fae9 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Y_LIMIT_BIT);
 800322a:	210d      	movs	r1, #13
 800322c:	2001      	movs	r0, #1
 800322e:	f7fe fae5 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, Z_LIMIT_BIT);
 8003232:	210e      	movs	r1, #14
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe fae1 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, A_LIMIT_BIT);
 800323a:	210f      	movs	r1, #15
 800323c:	2001      	movs	r0, #1
 800323e:	f7fe fadd 	bl	80017fc <GPIO_EXTILineConfig>
		GPIO_EXTILineConfig(GPIO_LIMIT_PORT, B_LIMIT_BIT);
 8003242:	210b      	movs	r1, #11
 8003244:	2001      	movs	r0, #1
 8003246:	f7fe fad9 	bl	80017fc <GPIO_EXTILineConfig>
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 800324a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 800324e:	2200      	movs	r2, #0
		if (bit_istrue(settings.flags, BITFLAG_INVERT_LIMIT_PINS )) { // for normally closed switches, we need to interrupt on the rising edge
 8003250:	f013 0f40 	tst.w	r3, #64	; 0x40
			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 8003254:	bf14      	ite	ne
 8003256:	2108      	movne	r1, #8
 8003258:	210c      	moveq	r1, #12
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800325a:	2301      	movs	r3, #1
		EXTI_Init(&EXTI_InitStructure);
 800325c:	a802      	add	r0, sp, #8
 800325e:	f88d 100d 	strb.w	r1, [sp, #13]
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 8003262:	f88d 200c 	strb.w	r2, [sp, #12]
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003266:	f88d 300e 	strb.w	r3, [sp, #14]
		EXTI_InitStructure.EXTI_Line = LIMIT_MASK;    //
 800326a:	9402      	str	r4, [sp, #8]
		EXTI_Init(&EXTI_InitStructure);
 800326c:	f7fd ff7e 	bl	800116c <EXTI_Init>
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn; //Enable keypad external interrupt channel
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <limits_init+0xb0>)
 8003272:	a804      	add	r0, sp, #16
 8003274:	f840 3d0c 	str.w	r3, [r0, #-12]!
		NVIC_Init(&NVIC_InitStructure);
 8003278:	f7fd ff46 	bl	8001108 <NVIC_Init>
}
 800327c:	b005      	add	sp, #20
 800327e:	bd30      	pop	{r4, r5, pc}
 8003280:	2000134c 	.word	0x2000134c
 8003284:	40010c00 	.word	0x40010c00
 8003288:	e000e100 	.word	0xe000e100
 800328c:	01020228 	.word	0x01020228

08003290 <limits_disable>:
 8003290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <limits_disable+0xc>)
 8003296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100

080032a0 <limits_get_state>:

// Returns limit state as a bit-wise uint8 variable. Each bit indicates an axis limit, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Axes are defined by their
// number in bit position, i.e. Z_AXIS is (1<<2) or bit 2, and Y_AXIS is (1<<1) or bit 1.
uint8_t limits_get_state()
{
 80032a0:	b510      	push	{r4, lr}
#if defined(AVRTARGET) || defined(STM32F103C8)
#if defined(AVRTARGET)
  uint8_t pin = (LIMIT_PIN & LIMIT_MASK);
#endif
#if defined(STM32F103C8)
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 80032a2:	4817      	ldr	r0, [pc, #92]	; (8003300 <limits_get_state+0x60>)
 80032a4:	f7fe fa62 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <limits_get_state+0x64>)
 80032aa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80032ae:	065b      	lsls	r3, r3, #25
 80032b0:	bf5c      	itt	pl
 80032b2:	f480 4078 	eorpl.w	r0, r0, #63488	; 0xf800
 80032b6:	b280      	uxthpl	r0, r0
  if (pin) {
 80032b8:	b300      	cbz	r0, 80032fc <limits_get_state+0x5c>
    uint8_t idx;
    for (idx=0; idx<N_AXIS; idx++) {
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <limits_get_state+0x68>)
 80032bc:	8813      	ldrh	r3, [r2, #0]
 80032be:	8854      	ldrh	r4, [r2, #2]
 80032c0:	4218      	tst	r0, r3
 80032c2:	bf07      	ittee	eq
 80032c4:	2300      	moveq	r3, #0
 80032c6:	2102      	moveq	r1, #2
 80032c8:	2103      	movne	r1, #3
 80032ca:	2301      	movne	r3, #1
 80032cc:	4220      	tst	r0, r4
 80032ce:	bf08      	it	eq
 80032d0:	4619      	moveq	r1, r3
 80032d2:	8894      	ldrh	r4, [r2, #4]
 80032d4:	f041 0304 	orr.w	r3, r1, #4
 80032d8:	4220      	tst	r0, r4
 80032da:	bf08      	it	eq
 80032dc:	460b      	moveq	r3, r1
 80032de:	88d4      	ldrh	r4, [r2, #6]
 80032e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80032e4:	4220      	tst	r0, r4
 80032e6:	f043 0108 	orr.w	r1, r3, #8
 80032ea:	bf18      	it	ne
 80032ec:	460b      	movne	r3, r1
 80032ee:	8911      	ldrh	r1, [r2, #8]
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	4208      	tst	r0, r1
 80032f6:	bf14      	ite	ne
 80032f8:	4610      	movne	r0, r2
 80032fa:	4618      	moveq	r0, r3
    }
  }
#endif
  return(limit_state);
}
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	bf00      	nop
 8003300:	40010c00 	.word	0x40010c00
 8003304:	2000134c 	.word	0x2000134c
 8003308:	0800c2d8 	.word	0x0800c2d8

0800330c <EXTI15_10_IRQHandler>:
#if defined(AVRTARGET) 
ISR(LIMIT_INT_vect) // DEFAULT: Limit pin change interrupt process.
#else
void EXTI15_10_IRQHandler(void)
#endif
{
 800330c:	b508      	push	{r3, lr}
#if defined (STM32F103C8)
	if (EXTI_GetITStatus(1 << X_LIMIT_BIT) != RESET)
 800330e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003312:	f7fd ff69 	bl	80011e8 <EXTI_GetITStatus>
 8003316:	2800      	cmp	r0, #0
 8003318:	d13b      	bne.n	8003392 <EXTI15_10_IRQHandler+0x86>
	{
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Y_LIMIT_BIT) != RESET)
 800331a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800331e:	f7fd ff63 	bl	80011e8 <EXTI_GetITStatus>
 8003322:	bb88      	cbnz	r0, 8003388 <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
	}
	if (EXTI_GetITStatus(1 << Z_LIMIT_BIT) != RESET)
 8003324:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003328:	f7fd ff5e 	bl	80011e8 <EXTI_GetITStatus>
 800332c:	bb38      	cbnz	r0, 800337e <EXTI15_10_IRQHandler+0x72>
	{
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
	}
// --- YSV 22-06-2018
	#if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << A_LIMIT_BIT) != RESET)
 800332e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003332:	f7fd ff59 	bl	80011e8 <EXTI_GetITStatus>
 8003336:	b9e8      	cbnz	r0, 8003374 <EXTI15_10_IRQHandler+0x68>
	{
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
	}	
	#endif
	#if defined(AB_AXIS) || defined(ABC_AXIS)
	if (EXTI_GetITStatus(1 << B_LIMIT_BIT) != RESET)
 8003338:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800333c:	f7fd ff54 	bl	80011e8 <EXTI_GetITStatus>
 8003340:	b998      	cbnz	r0, 800336a <EXTI15_10_IRQHandler+0x5e>

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 8003342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003346:	4a15      	ldr	r2, [pc, #84]	; (800339c <EXTI15_10_IRQHandler+0x90>)
  // Ignore limit switches if already in an alarm state or in-process of executing an alarm.
  // When in the alarm state, Grbl should have been reset or will force a reset, so any pending
  // moves in the planner and serial buffers are all cleared and newly sent blocks will be
  // locked out until a homing cycle or a kill lock command. Allows the user to disable the hard
  // limit setting if their limits are constantly triggering after a reset and move their axes.
  if (sys.state != STATE_ALARM) {
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <EXTI15_10_IRQHandler+0x94>)
 800334a:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d002      	beq.n	800335a <EXTI15_10_IRQHandler+0x4e>
    if (!(sys_rt_exec_alarm)) {
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <EXTI15_10_IRQHandler+0x98>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b103      	cbz	r3, 800335c <EXTI15_10_IRQHandler+0x50>
 800335a:	bd08      	pop	{r3, pc}
      if (limits_get_state()) {
        mc_reset(); // Initiate system kill.
        system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
      }
#else
      mc_reset(); // Initiate system kill.
 800335c:	f000 fe98 	bl	8004090 <mc_reset>
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
#endif
    }
  }
}
 8003360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT); // Indicate hard limit critical event
 8003364:	2001      	movs	r0, #1
 8003366:	f006 bbc3 	b.w	8009af0 <system_set_exec_alarm>
		EXTI_ClearITPendingBit(1 << B_LIMIT_BIT);
 800336a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800336e:	f7fd ff49 	bl	8001204 <EXTI_ClearITPendingBit>
 8003372:	e7e6      	b.n	8003342 <EXTI15_10_IRQHandler+0x36>
		EXTI_ClearITPendingBit(1 << A_LIMIT_BIT);
 8003374:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003378:	f7fd ff44 	bl	8001204 <EXTI_ClearITPendingBit>
 800337c:	e7dc      	b.n	8003338 <EXTI15_10_IRQHandler+0x2c>
		EXTI_ClearITPendingBit(1 << Z_LIMIT_BIT);
 800337e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003382:	f7fd ff3f 	bl	8001204 <EXTI_ClearITPendingBit>
 8003386:	e7d2      	b.n	800332e <EXTI15_10_IRQHandler+0x22>
		EXTI_ClearITPendingBit(1 << Y_LIMIT_BIT);
 8003388:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800338c:	f7fd ff3a 	bl	8001204 <EXTI_ClearITPendingBit>
 8003390:	e7c8      	b.n	8003324 <EXTI15_10_IRQHandler+0x18>
		EXTI_ClearITPendingBit(1 << X_LIMIT_BIT);
 8003392:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003396:	f7fd ff35 	bl	8001204 <EXTI_ClearITPendingBit>
 800339a:	e7be      	b.n	800331a <EXTI15_10_IRQHandler+0xe>
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	20001188 	.word	0x20001188
 80033a4:	200011c8 	.word	0x200011c8

080033a8 <limits_go_home>:
// mask, which prevents the stepper algorithm from executing step pulses. Homing motions typically
// circumvent the processes for executing motions in normal operation.
// NOTE: Only the abort realtime command can interrupt this process.
// TODO: Move limit pin-specific calls to a general function for portability.
void limits_go_home(uint8_t cycle_mask)
{
 80033a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.abort) { return; } // Block if system reset has been issued.
 80033ac:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8003668 <limits_go_home+0x2c0>
{
 80033b0:	b097      	sub	sp, #92	; 0x5c
  if (sys.abort) { return; } // Block if system reset has been issued.
 80033b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80033b6:	b113      	cbz	r3, 80033be <limits_go_home+0x16>
      #endif

    }
  }
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 80033b8:	b017      	add	sp, #92	; 0x5c
 80033ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033be:	4607      	mov	r7, r0
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80033c0:	2506      	movs	r5, #6
 80033c2:	4ca2      	ldr	r4, [pc, #648]	; (800364c <limits_go_home+0x2a4>)
 80033c4:	9008      	str	r0, [sp, #32]
 80033c6:	6861      	ldr	r1, [r4, #4]
 80033c8:	6820      	ldr	r0, [r4, #0]
 80033ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80033cc:	c203      	stmia	r2!, {r0, r1}
 80033ce:	8926      	ldrh	r6, [r4, #8]
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033d0:	f007 0401 	and.w	r4, r7, #1
  memset(pl_data,0,sizeof(plan_line_data_t));
 80033d4:	9310      	str	r3, [sp, #64]	; 0x40
 80033d6:	930e      	str	r3, [sp, #56]	; 0x38
 80033d8:	930f      	str	r3, [sp, #60]	; 0x3c
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033da:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 80033de:	8016      	strh	r6, [r2, #0]
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 80033e0:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033e4:	9309      	str	r3, [sp, #36]	; 0x24
 80033e6:	2c00      	cmp	r4, #0
 80033e8:	f040 80f9 	bne.w	80035de <limits_go_home+0x236>
  float max_travel = 0.0f;
 80033ec:	f04f 0900 	mov.w	r9, #0
 80033f0:	4f97      	ldr	r7, [pc, #604]	; (8003650 <limits_go_home+0x2a8>)
    if (bit_istrue(cycle_mask,bit(idx))) {
 80033f2:	9b08      	ldr	r3, [sp, #32]
 80033f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033f8:	9307      	str	r3, [sp, #28]
 80033fa:	b153      	cbz	r3, 8003412 <limits_go_home+0x6a>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80033fc:	4995      	ldr	r1, [pc, #596]	; (8003654 <limits_go_home+0x2ac>)
 80033fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003400:	f7fd fc56 	bl	8000cb0 <__aeabi_fmul>
 8003404:	4605      	mov	r5, r0
 8003406:	4601      	mov	r1, r0
 8003408:	4648      	mov	r0, r9
 800340a:	f7fd fe03 	bl	8001014 <__aeabi_fcmpge>
 800340e:	b900      	cbnz	r0, 8003412 <limits_go_home+0x6a>
 8003410:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003412:	9b08      	ldr	r3, [sp, #32]
 8003414:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003418:	9306      	str	r3, [sp, #24]
 800341a:	b153      	cbz	r3, 8003432 <limits_go_home+0x8a>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 800341c:	498d      	ldr	r1, [pc, #564]	; (8003654 <limits_go_home+0x2ac>)
 800341e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003420:	f7fd fc46 	bl	8000cb0 <__aeabi_fmul>
 8003424:	4605      	mov	r5, r0
 8003426:	4601      	mov	r1, r0
 8003428:	4648      	mov	r0, r9
 800342a:	f7fd fdf3 	bl	8001014 <__aeabi_fcmpge>
 800342e:	b900      	cbnz	r0, 8003432 <limits_go_home+0x8a>
 8003430:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003432:	9b08      	ldr	r3, [sp, #32]
 8003434:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003438:	9305      	str	r3, [sp, #20]
 800343a:	b153      	cbz	r3, 8003452 <limits_go_home+0xaa>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 800343c:	4985      	ldr	r1, [pc, #532]	; (8003654 <limits_go_home+0x2ac>)
 800343e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003440:	f7fd fc36 	bl	8000cb0 <__aeabi_fmul>
 8003444:	4605      	mov	r5, r0
 8003446:	4601      	mov	r1, r0
 8003448:	4648      	mov	r0, r9
 800344a:	f7fd fde3 	bl	8001014 <__aeabi_fcmpge>
 800344e:	b900      	cbnz	r0, 8003452 <limits_go_home+0xaa>
 8003450:	46a9      	mov	r9, r5
    if (bit_istrue(cycle_mask,bit(idx))) {
 8003452:	9b08      	ldr	r3, [sp, #32]
 8003454:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003458:	9304      	str	r3, [sp, #16]
 800345a:	b153      	cbz	r3, 8003472 <limits_go_home+0xca>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 800345c:	497d      	ldr	r1, [pc, #500]	; (8003654 <limits_go_home+0x2ac>)
 800345e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003460:	f7fd fc26 	bl	8000cb0 <__aeabi_fmul>
 8003464:	4605      	mov	r5, r0
 8003466:	4601      	mov	r1, r0
 8003468:	4648      	mov	r0, r9
 800346a:	f7fd fdd3 	bl	8001014 <__aeabi_fcmpge>
 800346e:	b900      	cbnz	r0, 8003472 <limits_go_home+0xca>
 8003470:	46a9      	mov	r9, r5
 8003472:	b2e3      	uxtb	r3, r4
 8003474:	9303      	str	r3, [sp, #12]
  float homing_rate = settings.homing_seek_rate;
 8003476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003478:	464a      	mov	r2, r9
 800347a:	4619      	mov	r1, r3
 800347c:	2304      	movs	r3, #4
  bool approach = true;
 800347e:	2401      	movs	r4, #1
 8003480:	4689      	mov	r9, r1
 8003482:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8003660 <limits_go_home+0x2b8>
 8003486:	4d74      	ldr	r5, [pc, #464]	; (8003658 <limits_go_home+0x2b0>)
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003488:	4e74      	ldr	r6, [pc, #464]	; (800365c <limits_go_home+0x2b4>)
  float homing_rate = settings.homing_seek_rate;
 800348a:	9301      	str	r3, [sp, #4]
    system_convert_array_steps_to_mpos(target,sys_position);
 800348c:	4974      	ldr	r1, [pc, #464]	; (8003660 <limits_go_home+0x2b8>)
 800348e:	a811      	add	r0, sp, #68	; 0x44
 8003490:	9202      	str	r2, [sp, #8]
 8003492:	f006 fa53 	bl	800993c <system_convert_array_steps_to_mpos>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	9a02      	ldr	r2, [sp, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 818c 	beq.w	80037b8 <limits_go_home+0x410>
          sys_position[idx] = 0;
 80034a0:	2100      	movs	r1, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034a2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
          sys_position[idx] = 0;
 80034a6:	f8ca 1000 	str.w	r1, [sl]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034aa:	07db      	lsls	r3, r3, #31
 80034ac:	f140 819a 	bpl.w	80037e4 <limits_go_home+0x43c>
          if (approach) { target[idx] = -max_travel; }
 80034b0:	2c00      	cmp	r4, #0
 80034b2:	f040 819a 	bne.w	80037ea <limits_go_home+0x442>
          else { target[idx] = max_travel; }
 80034b6:	9211      	str	r2, [sp, #68]	; 0x44
        axislock |= step_pin[idx];
 80034b8:	2102      	movs	r1, #2
        n_active_axis++;
 80034ba:	2001      	movs	r0, #1
        axislock |= step_pin[idx];
 80034bc:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034c0:	9b07      	ldr	r3, [sp, #28]
 80034c2:	b183      	cbz	r3, 80034e6 <limits_go_home+0x13e>
          sys_position[idx] = 0;
 80034c4:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034c6:	f8b7 006a 	ldrh.w	r0, [r7, #106]	; 0x6a
          sys_position[idx] = 0;
 80034ca:	f8ca 3004 	str.w	r3, [sl, #4]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034ce:	0780      	lsls	r0, r0, #30
 80034d0:	f140 8181 	bpl.w	80037d6 <limits_go_home+0x42e>
          if (approach) { target[idx] = -max_travel; }
 80034d4:	2c00      	cmp	r4, #0
 80034d6:	f040 8181 	bne.w	80037dc <limits_go_home+0x434>
          else { target[idx] = max_travel; }
 80034da:	9212      	str	r2, [sp, #72]	; 0x48
        n_active_axis++;
 80034dc:	4608      	mov	r0, r1
        axislock |= step_pin[idx];
 80034de:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 80034e2:	ea4b 0b0e 	orr.w	fp, fp, lr
      if (bit_istrue(cycle_mask,bit(idx))) {
 80034e6:	9b06      	ldr	r3, [sp, #24]
 80034e8:	b18b      	cbz	r3, 800350e <limits_go_home+0x166>
          sys_position[idx] = 0;
 80034ea:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034ec:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
        n_active_axis++;
 80034f0:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034f2:	0749      	lsls	r1, r1, #29
        n_active_axis++;
 80034f4:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 80034f6:	f8ca 3008 	str.w	r3, [sl, #8]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80034fa:	f140 817a 	bpl.w	80037f2 <limits_go_home+0x44a>
          if (approach) { target[idx] = -max_travel; }
 80034fe:	2c00      	cmp	r4, #0
 8003500:	f040 817a 	bne.w	80037f8 <limits_go_home+0x450>
          else { target[idx] = max_travel; }
 8003504:	9213      	str	r2, [sp, #76]	; 0x4c
        axislock |= step_pin[idx];
 8003506:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 800350a:	ea4b 0b01 	orr.w	fp, fp, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 800350e:	9b05      	ldr	r3, [sp, #20]
 8003510:	b18b      	cbz	r3, 8003536 <limits_go_home+0x18e>
          sys_position[idx] = 0;
 8003512:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003514:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
        n_active_axis++;
 8003518:	3001      	adds	r0, #1
          sys_position[idx] = 0;
 800351a:	f8ca 300c 	str.w	r3, [sl, #12]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800351e:	070b      	lsls	r3, r1, #28
        n_active_axis++;
 8003520:	b2c0      	uxtb	r0, r0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003522:	f140 8151 	bpl.w	80037c8 <limits_go_home+0x420>
          if (approach) { target[idx] = -max_travel; }
 8003526:	2c00      	cmp	r4, #0
 8003528:	f040 8151 	bne.w	80037ce <limits_go_home+0x426>
          else { target[idx] = max_travel; }
 800352c:	9214      	str	r2, [sp, #80]	; 0x50
        axislock |= step_pin[idx];
 800352e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8003532:	ea4b 0b01 	orr.w	fp, fp, r1
      if (bit_istrue(cycle_mask,bit(idx))) {
 8003536:	9b04      	ldr	r3, [sp, #16]
 8003538:	b18b      	cbz	r3, 800355e <limits_go_home+0x1b6>
          sys_position[idx] = 0;
 800353a:	2300      	movs	r3, #0
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800353c:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
        n_active_axis++;
 8003540:	3001      	adds	r0, #1
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8003542:	06c9      	lsls	r1, r1, #27
        n_active_axis++;
 8003544:	b2c0      	uxtb	r0, r0
          sys_position[idx] = 0;
 8003546:	f8ca 3010 	str.w	r3, [sl, #16]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800354a:	f100 8139 	bmi.w	80037c0 <limits_go_home+0x418>
          if (approach) { target[idx] = max_travel; }
 800354e:	b90c      	cbnz	r4, 8003554 <limits_go_home+0x1ac>
          if (approach) { target[idx] = -max_travel; }
 8003550:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003554:	9215      	str	r2, [sp, #84]	; 0x54
        axislock |= step_pin[idx];
 8003556:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800355a:	ea4b 0b02 	orr.w	fp, fp, r2
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 800355e:	f7fd fb4f 	bl	8000c00 <__aeabi_ui2f>
 8003562:	f007 fe11 	bl	800b188 <sqrtf>
    sys.homing_axis_lock = axislock;
 8003566:	f8a8 b006 	strh.w	fp, [r8, #6]
    homing_rate *= sqrtf(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 800356a:	4601      	mov	r1, r0
 800356c:	4648      	mov	r0, r9
 800356e:	f7fd fb9f 	bl	8000cb0 <__aeabi_fmul>
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003572:	a90e      	add	r1, sp, #56	; 0x38
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8003574:	900e      	str	r0, [sp, #56]	; 0x38
    plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8003576:	a811      	add	r0, sp, #68	; 0x44
 8003578:	f001 f9b0 	bl	80048dc <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 800357c:	2204      	movs	r2, #4
 800357e:	f888 2004 	strb.w	r2, [r8, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8003582:	f005 fa01 	bl	8008988 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8003586:	f004 fe1d 	bl	80081c4 <st_wake_up>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 800358a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800366c <limits_go_home+0x2c4>
      if (approach) {
 800358e:	2c00      	cmp	r4, #0
 8003590:	d16e      	bne.n	8003670 <limits_go_home+0x2c8>
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003592:	f005 f9f9 	bl	8008988 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8003596:	782b      	ldrb	r3, [r5, #0]
 8003598:	f013 0f34 	tst.w	r3, #52	; 0x34
 800359c:	f040 80c3 	bne.w	8003726 <limits_go_home+0x37e>
    } while (STEP_MASK & axislock);
 80035a0:	f640 030f 	movw	r3, #2063	; 0x80f
 80035a4:	ea1b 0f03 	tst.w	fp, r3
 80035a8:	d1f1      	bne.n	800358e <limits_go_home+0x1e6>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 80035aa:	f005 f863 	bl	8008674 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 80035ae:	f8b7 0074 	ldrh.w	r0, [r7, #116]	; 0x74
 80035b2:	f000 fe5d 	bl	8004270 <delay_ms>
 80035b6:	f084 0301 	eor.w	r3, r4, #1
    if (approach) {
 80035ba:	b9fc      	cbnz	r4, 80035fc <limits_go_home+0x254>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 80035bc:	4929      	ldr	r1, [pc, #164]	; (8003664 <limits_go_home+0x2bc>)
 80035be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80035c0:	9302      	str	r3, [sp, #8]
 80035c2:	f7fd fb75 	bl	8000cb0 <__aeabi_fmul>
 80035c6:	9b01      	ldr	r3, [sp, #4]
 80035c8:	4602      	mov	r2, r0
 80035ca:	1e59      	subs	r1, r3, #1
  } while (n_cycle-- > 0);
 80035cc:	f011 03ff 	ands.w	r3, r1, #255	; 0xff
 80035d0:	9301      	str	r3, [sp, #4]
      homing_rate = settings.homing_feed_rate;
 80035d2:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
  } while (n_cycle-- > 0);
 80035d6:	9b02      	ldr	r3, [sp, #8]
 80035d8:	d019      	beq.n	800360e <limits_go_home+0x266>
  float max_travel = 0.0f;
 80035da:	461c      	mov	r4, r3
 80035dc:	e756      	b.n	800348c <limits_go_home+0xe4>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 80035de:	4f1c      	ldr	r7, [pc, #112]	; (8003650 <limits_go_home+0x2a8>)
 80035e0:	491c      	ldr	r1, [pc, #112]	; (8003654 <limits_go_home+0x2ac>)
 80035e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035e4:	f7fd fb64 	bl	8000cb0 <__aeabi_fmul>
 80035e8:	2100      	movs	r1, #0
 80035ea:	4681      	mov	r9, r0
 80035ec:	f7fd fd12 	bl	8001014 <__aeabi_fcmpge>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	f47f aefe 	bne.w	80033f2 <limits_go_home+0x4a>
 80035f6:	f04f 0900 	mov.w	r9, #0
 80035fa:	e6fa      	b.n	80033f2 <limits_go_home+0x4a>
 80035fc:	9a01      	ldr	r2, [sp, #4]
      homing_rate = settings.homing_seek_rate;
 80035fe:	f8d7 9070 	ldr.w	r9, [r7, #112]	; 0x70
 8003602:	1e51      	subs	r1, r2, #1
  } while (n_cycle-- > 0);
 8003604:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
      max_travel = settings.homing_pulloff;
 8003608:	6fba      	ldr	r2, [r7, #120]	; 0x78
  } while (n_cycle-- > 0);
 800360a:	9101      	str	r1, [sp, #4]
 800360c:	d1e5      	bne.n	80035da <limits_go_home+0x232>
    if (cycle_mask & bit(idx)) {
 800360e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003610:	b113      	cbz	r3, 8003618 <limits_go_home+0x270>
        sys_position[idx] = set_axis_position;
 8003612:	2300      	movs	r3, #0
 8003614:	f8ca 3000 	str.w	r3, [sl]
    if (cycle_mask & bit(idx)) {
 8003618:	9b07      	ldr	r3, [sp, #28]
 800361a:	b113      	cbz	r3, 8003622 <limits_go_home+0x27a>
        sys_position[idx] = set_axis_position;
 800361c:	2300      	movs	r3, #0
 800361e:	f8ca 3004 	str.w	r3, [sl, #4]
    if (cycle_mask & bit(idx)) {
 8003622:	9b06      	ldr	r3, [sp, #24]
 8003624:	b113      	cbz	r3, 800362c <limits_go_home+0x284>
        sys_position[idx] = set_axis_position;
 8003626:	2300      	movs	r3, #0
 8003628:	f8ca 3008 	str.w	r3, [sl, #8]
    if (cycle_mask & bit(idx)) {
 800362c:	9b05      	ldr	r3, [sp, #20]
 800362e:	b113      	cbz	r3, 8003636 <limits_go_home+0x28e>
        sys_position[idx] = set_axis_position;
 8003630:	2300      	movs	r3, #0
 8003632:	f8ca 300c 	str.w	r3, [sl, #12]
    if (cycle_mask & bit(idx)) {
 8003636:	9b04      	ldr	r3, [sp, #16]
 8003638:	b113      	cbz	r3, 8003640 <limits_go_home+0x298>
        sys_position[idx] = set_axis_position;
 800363a:	2300      	movs	r3, #0
 800363c:	f8ca 3010 	str.w	r3, [sl, #16]
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 8003640:	2300      	movs	r3, #0
 8003642:	f888 3004 	strb.w	r3, [r8, #4]
}
 8003646:	b017      	add	sp, #92	; 0x5c
 8003648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800364c:	0800c2e4 	.word	0x0800c2e4
 8003650:	2000134c 	.word	0x2000134c
 8003654:	bfc00000 	.word	0xbfc00000
 8003658:	2000119d 	.word	0x2000119d
 800365c:	0800c2d8 	.word	0x0800c2d8
 8003660:	200011b4 	.word	0x200011b4
 8003664:	40a00000 	.word	0x40a00000
 8003668:	20001188 	.word	0x20001188
 800366c:	40010c00 	.word	0x40010c00
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003670:	4648      	mov	r0, r9
 8003672:	f7fe f87b 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003676:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800367a:	065b      	lsls	r3, r3, #25
 800367c:	bf5c      	itt	pl
 800367e:	f480 4078 	eorpl.w	r0, r0, #63488	; 0xf800
 8003682:	b280      	uxthpl	r0, r0
  if (pin) {
 8003684:	2800      	cmp	r0, #0
 8003686:	d064      	beq.n	8003752 <limits_go_home+0x3aa>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003688:	8833      	ldrh	r3, [r6, #0]
 800368a:	8872      	ldrh	r2, [r6, #2]
 800368c:	4218      	tst	r0, r3
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	4210      	tst	r0, r2
 8003696:	88b2      	ldrh	r2, [r6, #4]
 8003698:	bf18      	it	ne
 800369a:	f043 0302 	orrne.w	r3, r3, #2
 800369e:	4210      	tst	r0, r2
 80036a0:	88f2      	ldrh	r2, [r6, #6]
 80036a2:	bf18      	it	ne
 80036a4:	f043 0304 	orrne.w	r3, r3, #4
 80036a8:	4210      	tst	r0, r2
 80036aa:	8932      	ldrh	r2, [r6, #8]
 80036ac:	bf18      	it	ne
 80036ae:	f043 0308 	orrne.w	r3, r3, #8
 80036b2:	4210      	tst	r0, r2
          if (axislock & step_pin[idx]) {
 80036b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80036b8:	bf18      	it	ne
 80036ba:	f043 0310 	orrne.w	r3, r3, #16
          if (axislock & step_pin[idx]) {
 80036be:	ea1b 0f02 	tst.w	fp, r2
 80036c2:	d003      	beq.n	80036cc <limits_go_home+0x324>
            if (limit_state & (1 << idx)) {
 80036c4:	07d8      	lsls	r0, r3, #31
                axislock &= ~(step_pin[idx]);
 80036c6:	bf48      	it	mi
 80036c8:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80036cc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80036d0:	ea1b 0f02 	tst.w	fp, r2
 80036d4:	d003      	beq.n	80036de <limits_go_home+0x336>
            if (limit_state & (1 << idx)) {
 80036d6:	0799      	lsls	r1, r3, #30
                axislock &= ~(step_pin[idx]);
 80036d8:	bf48      	it	mi
 80036da:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80036de:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80036e2:	ea1b 0f02 	tst.w	fp, r2
 80036e6:	d003      	beq.n	80036f0 <limits_go_home+0x348>
            if (limit_state & (1 << idx)) {
 80036e8:	0758      	lsls	r0, r3, #29
                axislock &= ~(step_pin[idx]);
 80036ea:	bf48      	it	mi
 80036ec:	ea2b 0b02 	bicmi.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 80036f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80036f4:	ea1b 0f02 	tst.w	fp, r2
 80036f8:	d003      	beq.n	8003702 <limits_go_home+0x35a>
            if (limit_state & (1 << idx)) {
 80036fa:	0719      	lsls	r1, r3, #28
 80036fc:	d501      	bpl.n	8003702 <limits_go_home+0x35a>
                axislock &= ~(step_pin[idx]);
 80036fe:	ea2b 0b02 	bic.w	fp, fp, r2
          if (axislock & step_pin[idx]) {
 8003702:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8003706:	ea1b 0f02 	tst.w	fp, r2
 800370a:	d003      	beq.n	8003714 <limits_go_home+0x36c>
            if (limit_state & (1 << idx)) {
 800370c:	091b      	lsrs	r3, r3, #4
                axislock &= ~(step_pin[idx]);
 800370e:	bf18      	it	ne
 8003710:	ea2b 0b02 	bicne.w	fp, fp, r2
        sys.homing_axis_lock = axislock;
 8003714:	f8a8 b006 	strh.w	fp, [r8, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8003718:	f005 f936 	bl	8008988 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 800371c:	782b      	ldrb	r3, [r5, #0]
 800371e:	f013 0f34 	tst.w	r3, #52	; 0x34
 8003722:	f43f af3d 	beq.w	80035a0 <limits_go_home+0x1f8>
        uint8_t rt_exec = sys_rt_exec_state;
 8003726:	f895 9000 	ldrb.w	r9, [r5]
 800372a:	fa5f f989 	uxtb.w	r9, r9
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 800372e:	f019 0f10 	tst.w	r9, #16
 8003732:	d165      	bne.n	8003800 <limits_go_home+0x458>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003734:	f019 0f20 	tst.w	r9, #32
 8003738:	d10d      	bne.n	8003756 <limits_go_home+0x3ae>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800373a:	b18c      	cbz	r4, 8003760 <limits_go_home+0x3b8>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 800373c:	f019 0f04 	tst.w	r9, #4
 8003740:	d162      	bne.n	8003808 <limits_go_home+0x460>
        if (sys_rt_exec_alarm) {
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <limits_go_home+0x474>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d162      	bne.n	8003810 <limits_go_home+0x468>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 800374a:	2004      	movs	r0, #4
 800374c:	f006 f9c6 	bl	8009adc <system_clear_exec_state_flag>
          break;
 8003750:	e72b      	b.n	80035aa <limits_go_home+0x202>
  if (pin) {
 8003752:	4603      	mov	r3, r0
 8003754:	e7d5      	b.n	8003702 <limits_go_home+0x35a>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8003756:	2007      	movs	r0, #7
 8003758:	f006 f9ca 	bl	8009af0 <system_set_exec_alarm>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 800375c:	2c00      	cmp	r4, #0
 800375e:	d1ed      	bne.n	800373c <limits_go_home+0x394>
  uint16_t pin = GPIO_ReadInputData(LIMIT_PIN);
 8003760:	482f      	ldr	r0, [pc, #188]	; (8003820 <limits_go_home+0x478>)
 8003762:	f7fe f803 	bl	800176c <GPIO_ReadInputData>
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { pin ^= LIMIT_MASK; }
 8003766:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800376a:	065b      	lsls	r3, r3, #25
 800376c:	bf5c      	itt	pl
 800376e:	f480 4078 	eorpl.w	r0, r0, #63488	; 0xf800
 8003772:	b280      	uxthpl	r0, r0
  if (pin) {
 8003774:	2800      	cmp	r0, #0
 8003776:	d0e4      	beq.n	8003742 <limits_go_home+0x39a>
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 8003778:	8833      	ldrh	r3, [r6, #0]
 800377a:	8872      	ldrh	r2, [r6, #2]
 800377c:	4218      	tst	r0, r3
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	4210      	tst	r0, r2
 8003786:	88b2      	ldrh	r2, [r6, #4]
 8003788:	bf18      	it	ne
 800378a:	f043 0302 	orrne.w	r3, r3, #2
 800378e:	4210      	tst	r0, r2
 8003790:	88f2      	ldrh	r2, [r6, #6]
 8003792:	bf18      	it	ne
 8003794:	f043 0304 	orrne.w	r3, r3, #4
 8003798:	4210      	tst	r0, r2
 800379a:	8932      	ldrh	r2, [r6, #8]
 800379c:	bf18      	it	ne
 800379e:	f043 0308 	orrne.w	r3, r3, #8
 80037a2:	4210      	tst	r0, r2
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80037a4:	9a08      	ldr	r2, [sp, #32]
      if (pin & limit_pin_mask[idx]) { limit_state |= (1 << idx); }
 80037a6:	bf18      	it	ne
 80037a8:	f043 0310 	orrne.w	r3, r3, #16
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 80037ac:	421a      	tst	r2, r3
 80037ae:	d0c8      	beq.n	8003742 <limits_go_home+0x39a>
 80037b0:	2008      	movs	r0, #8
 80037b2:	f006 f99d 	bl	8009af0 <system_set_exec_alarm>
 80037b6:	e7c4      	b.n	8003742 <limits_go_home+0x39a>
 80037b8:	469b      	mov	fp, r3
    n_active_axis = 0;
 80037ba:	4618      	mov	r0, r3
      if (bit_istrue(cycle_mask,bit(idx))) {
 80037bc:	2101      	movs	r1, #1
 80037be:	e67f      	b.n	80034c0 <limits_go_home+0x118>
          if (approach) { target[idx] = -max_travel; }
 80037c0:	2c00      	cmp	r4, #0
 80037c2:	f43f aec7 	beq.w	8003554 <limits_go_home+0x1ac>
 80037c6:	e6c3      	b.n	8003550 <limits_go_home+0x1a8>
          if (approach) { target[idx] = max_travel; }
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	f47f aeaf 	bne.w	800352c <limits_go_home+0x184>
          if (approach) { target[idx] = -max_travel; }
 80037ce:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80037d2:	9114      	str	r1, [sp, #80]	; 0x50
 80037d4:	e6ab      	b.n	800352e <limits_go_home+0x186>
          if (approach) { target[idx] = max_travel; }
 80037d6:	2c00      	cmp	r4, #0
 80037d8:	f47f ae7f 	bne.w	80034da <limits_go_home+0x132>
          if (approach) { target[idx] = -max_travel; }
 80037dc:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
 80037e0:	9012      	str	r0, [sp, #72]	; 0x48
 80037e2:	e67b      	b.n	80034dc <limits_go_home+0x134>
          if (approach) { target[idx] = max_travel; }
 80037e4:	2c00      	cmp	r4, #0
 80037e6:	f47f ae66 	bne.w	80034b6 <limits_go_home+0x10e>
          if (approach) { target[idx] = -max_travel; }
 80037ea:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80037ee:	9311      	str	r3, [sp, #68]	; 0x44
 80037f0:	e662      	b.n	80034b8 <limits_go_home+0x110>
          if (approach) { target[idx] = max_travel; }
 80037f2:	2c00      	cmp	r4, #0
 80037f4:	f47f ae86 	bne.w	8003504 <limits_go_home+0x15c>
          if (approach) { target[idx] = -max_travel; }
 80037f8:	f102 4100 	add.w	r1, r2, #2147483648	; 0x80000000
 80037fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80037fe:	e682      	b.n	8003506 <limits_go_home+0x15e>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8003800:	2006      	movs	r0, #6
 8003802:	f006 f975 	bl	8009af0 <system_set_exec_alarm>
 8003806:	e795      	b.n	8003734 <limits_go_home+0x38c>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8003808:	2009      	movs	r0, #9
 800380a:	f006 f971 	bl	8009af0 <system_set_exec_alarm>
 800380e:	e798      	b.n	8003742 <limits_go_home+0x39a>
          mc_reset(); // Stop motors, if they are running.
 8003810:	f000 fc3e 	bl	8004090 <mc_reset>
          protocol_execute_realtime();
 8003814:	f002 fb14 	bl	8005e40 <protocol_execute_realtime>
          return;
 8003818:	e5ce      	b.n	80033b8 <limits_go_home+0x10>
 800381a:	bf00      	nop
 800381c:	200011c8 	.word	0x200011c8
 8003820:	40010c00 	.word	0x40010c00

08003824 <limits_soft_check>:

// Performs a soft limit check. Called from mc_line() only. Assumes the machine has been homed,
// the workspace volume is in all negative space, and the system is in normal operation.
// NOTE: Used by jogging to limit travel within soft-limit volume.
void limits_soft_check(float *target)
{
 8003824:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 8003826:	f006 f8b3 	bl	8009990 <system_check_travel_limits>
 800382a:	b1c8      	cbz	r0, 8003860 <limits_soft_check+0x3c>
    sys.soft_limit = true;
 800382c:	2301      	movs	r3, #1
 800382e:	4c0d      	ldr	r4, [pc, #52]	; (8003864 <limits_soft_check+0x40>)
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 8003830:	7820      	ldrb	r0, [r4, #0]
    sys.soft_limit = true;
 8003832:	70e3      	strb	r3, [r4, #3]
    if (sys.state == STATE_CYCLE) {
 8003834:	2808      	cmp	r0, #8
 8003836:	d008      	beq.n	800384a <limits_soft_check+0x26>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8003838:	f000 fc2a 	bl	8004090 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 800383c:	2002      	movs	r0, #2
 800383e:	f006 f957 	bl	8009af0 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
    return;
  }
}
 8003842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 8003846:	f002 bafb 	b.w	8005e40 <protocol_execute_realtime>
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 800384a:	f006 f93d 	bl	8009ac8 <system_set_exec_state_flag>
 800384e:	e002      	b.n	8003856 <limits_soft_check+0x32>
      } while ( sys.state != STATE_IDLE );
 8003850:	7823      	ldrb	r3, [r4, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <limits_soft_check+0x14>
        protocol_execute_realtime();
 8003856:	f002 faf3 	bl	8005e40 <protocol_execute_realtime>
        if (sys.abort) { return; }
 800385a:	7863      	ldrb	r3, [r4, #1]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f7      	beq.n	8003850 <limits_soft_check+0x2c>
 8003860:	bd10      	pop	{r4, pc}
 8003862:	bf00      	nop
 8003864:	20001188 	.word	0x20001188

08003868 <USART1_Configuration>:
#endif
#include "stm32eeprom.h"
#ifndef USEUSB
#include "stm32f10x_usart.h"
void USART1_Configuration(u32 BaudRate)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	4607      	mov	r7, r0
 800386c:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800386e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003872:	f7fd fc3f 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;   
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
 8003876:	2500      	movs	r5, #0

	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8003878:	2601      	movs	r6, #1
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;   
 800387a:	2325      	movs	r3, #37	; 0x25
	NVIC_Init(&NVIC_InitStructure);                 
 800387c:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;   
 800387e:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  
 8003882:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; 
 8003886:	f88d 6007 	strb.w	r6, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);                 
 800388a:	f7fd fc3d 	bl	8001108 <NVIC_Init>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
 800388e:	4631      	mov	r1, r6
 8003890:	f244 0005 	movw	r0, #16389	; 0x4005
 8003894:	f7fe f818 	bl	80018c8 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003898:	f44f 7100 	mov.w	r1, #512	; 0x200
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	
 800389c:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		
 800389e:	2303      	movs	r3, #3
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80038a0:	4c1c      	ldr	r4, [pc, #112]	; (8003914 <USART1_Configuration+0xac>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80038a2:	f8ad 1000 	strh.w	r1, [sp]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80038a6:	4620      	mov	r0, r4
 80038a8:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	
 80038aa:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		
 80038ae:	f88d 3002 	strb.w	r3, [sp, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80038b2:	f7fd fda5 	bl	8001400 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80038b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	
 80038ba:	2304      	movs	r3, #4
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80038bc:	4669      	mov	r1, sp
 80038be:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80038c0:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	
 80038c4:	f88d 3003 	strb.w	r3, [sp, #3]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80038c8:	f7fd fd9a 	bl	8001400 <GPIO_Init>
	USART_InitStructure.USART_BaudRate = BaudRate;	  
	USART_InitStructure.USART_WordLength = USART_WordLength_8b; 
	USART_InitStructure.USART_StopBits = USART_StopBits_1;	 
	USART_InitStructure.USART_Parity = USART_Parity_No;	 
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80038cc:	230c      	movs	r3, #12
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038ce:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
	USART_InitStructure.USART_WordLength = USART_WordLength_8b; 
 80038d2:	f8ad 500c 	strh.w	r5, [sp, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;	 
 80038d6:	f8ad 500e 	strh.w	r5, [sp, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;	 
 80038da:	f8ad 5010 	strh.w	r5, [sp, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80038de:	f8ad 5014 	strh.w	r5, [sp, #20]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80038e2:	f8ad 3012 	strh.w	r3, [sp, #18]
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038e6:	89a3      	ldrh	r3, [r4, #12]

	USART_Init(USART1, &USART_InitStructure);
 80038e8:	4620      	mov	r0, r4
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f043 030c 	orr.w	r3, r3, #12
	USART_InitStructure.USART_BaudRate = BaudRate;	  
 80038f0:	9702      	str	r7, [sp, #8]
	USART_Init(USART1, &USART_InitStructure);
 80038f2:	a902      	add	r1, sp, #8
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80038f4:	81a3      	strh	r3, [r4, #12]
	USART_Init(USART1, &USART_InitStructure);
 80038f6:	f7fe f8cd 	bl	8001a94 <USART_Init>
	//	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80038fa:	4632      	mov	r2, r6
 80038fc:	4620      	mov	r0, r4
 80038fe:	f240 5125 	movw	r1, #1317	; 0x525
 8003902:	f7fe f933 	bl	8001b6c <USART_ITConfig>
	USART_Cmd(USART1, ENABLE);
 8003906:	4631      	mov	r1, r6
 8003908:	4620      	mov	r0, r4
 800390a:	f7fe f921 	bl	8001b50 <USART_Cmd>
}
 800390e:	b007      	add	sp, #28
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003912:	bf00      	nop
 8003914:	40010800 	.word	0x40010800

08003918 <main>:
#endif



int main(void)
{
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined (STM32F103C8)
    //GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE); // ??? Disable JTAG and SWD!?? Bug?
#ifdef LEDBLINK
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800391c:	2101      	movs	r1, #1
{
 800391e:	b083      	sub	sp, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003920:	2010      	movs	r0, #16
 8003922:	f7fd ffd1 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8003926:	f44f 5000 	mov.w	r0, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800392a:	2310      	movs	r3, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800392c:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800392e:	a902      	add	r1, sp, #8
 8003930:	f821 0d04 	strh.w	r0, [r1, #-4]!
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003934:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003938:	f500 4070 	add.w	r0, r0, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800393c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8003940:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003944:	f7fd fd5c 	bl	8001400 <GPIO_Init>
#endif
	//Set_System();
#ifndef USEUSB

	USART1_Configuration(115200);
 8003948:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800394c:	f7ff ff8c 	bl	8003868 <USART1_Configuration>
	USB_Interrupts_Config();
	USB_Init();
#endif

#ifndef NOEEPROMSUPPORT
	FLASH_Unlock();
 8003950:	f7fd fc5e 	bl	8001210 <FLASH_Unlock>
	eeprom_init();
 8003954:	f7fe f9ca 	bl	8001cec <eeprom_init>
#endif
	SysTick->CTRL &= 0xfffffffb;
 8003958:	492c      	ldr	r1, [pc, #176]	; (8003a0c <main+0xf4>)

    // Reset system variables.
    uint8_t prior_state = sys.state;
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
    sys.state = prior_state;
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800395a:	f04f 0864 	mov.w	r8, #100	; 0x64
	SysTick->CTRL &= 0xfffffffb;
 800395e:	680a      	ldr	r2, [r1, #0]
    sys.state = STATE_IDLE;
 8003960:	4d2b      	ldr	r5, [pc, #172]	; (8003a10 <main+0xf8>)
	SysTick->CTRL &= 0xfffffffb;
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	600a      	str	r2, [r1, #0]
  serial_init();   // Setup serial baud rate and interrupts
 8003968:	f003 fddc 	bl	8007524 <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 800396c:	f004 f94e 	bl	8007c0c <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 8003970:	f004 ff34 	bl	80087dc <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 8003974:	f005 fd72 	bl	800945c <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003978:	2100      	movs	r1, #0
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800397a:	460c      	mov	r4, r1
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <main+0xfc>)
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 800397e:	4826      	ldr	r0, [pc, #152]	; (8003a18 <main+0x100>)
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8003980:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8003984:	4e25      	ldr	r6, [pc, #148]	; (8003a1c <main+0x104>)
 8003986:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8003a28 <main+0x110>
 800398a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8003a2c <main+0x114>
 800398e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8003a30 <main+0x118>
 8003992:	4f23      	ldr	r7, [pc, #140]	; (8003a20 <main+0x108>)
 8003994:	f3c2 1200 	ubfx	r2, r2, #4, #1
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 8003998:	6001      	str	r1, [r0, #0]
 800399a:	6041      	str	r1, [r0, #4]
 800399c:	6081      	str	r1, [r0, #8]
 800399e:	60c1      	str	r1, [r0, #12]
 80039a0:	6101      	str	r1, [r0, #16]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
    sys_probe_state = 0;
    sys_rt_exec_state = 0;
    sys_rt_exec_alarm = 0;
    sys_rt_exec_motion_override = 0;
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <main+0x10c>)
    sys_probe_state = 0;
 80039a4:	f88b 4000 	strb.w	r4, [fp]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80039a8:	60ac      	str	r4, [r5, #8]
    sys_rt_exec_state = 0;
 80039aa:	f88a 4000 	strb.w	r4, [sl]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80039ae:	602c      	str	r4, [r5, #0]
    sys_rt_exec_alarm = 0;
 80039b0:	f889 4000 	strb.w	r4, [r9]
    sys.state = prior_state;
 80039b4:	702a      	strb	r2, [r5, #0]
    sys_rt_exec_motion_override = 0;
 80039b6:	701c      	strb	r4, [r3, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 80039b8:	606c      	str	r4, [r5, #4]
 80039ba:	60ec      	str	r4, [r5, #12]
 80039bc:	612c      	str	r4, [r5, #16]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 80039be:	f885 8008 	strb.w	r8, [r5, #8]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 80039c2:	f885 8009 	strb.w	r8, [r5, #9]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 80039c6:	f885 800a 	strb.w	r8, [r5, #10]
	memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 80039ca:	6034      	str	r4, [r6, #0]
 80039cc:	6074      	str	r4, [r6, #4]
 80039ce:	60b4      	str	r4, [r6, #8]
 80039d0:	60f4      	str	r4, [r6, #12]
 80039d2:	6134      	str	r4, [r6, #16]
    sys_rt_exec_accessory_override = 0;
 80039d4:	703c      	strb	r4, [r7, #0]

    // Reset Grbl primary systems.
    serial_reset_read_buffer(); // Clear serial read buffer
 80039d6:	f003 fea3 	bl	8007720 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 80039da:	f7fe fa25 	bl	8001e28 <gc_init>
    spindle_init();
 80039de:	f004 f9b7 	bl	8007d50 <spindle_init>
    coolant_init();
 80039e2:	f7fe f8e3 	bl	8001bac <coolant_init>
    limits_init();
 80039e6:	f7ff fbf9 	bl	80031dc <limits_init>
    probe_init();
 80039ea:	f001 fc8d 	bl	8005308 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 80039ee:	f000 fe45 	bl	800467c <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 80039f2:	f004 fe3f 	bl	8008674 <st_reset>

    // Sync cleared gcode and planner positions to current system position.
    plan_sync_position();
 80039f6:	f001 fa0b 	bl	8004e10 <plan_sync_position>
    gc_sync_position();
 80039fa:	f7fe fa2b 	bl	8001e54 <gc_sync_position>

    // Print welcome message. Indicates an initialization has occured at power-up or with a reset.
    report_init_message();
 80039fe:	f002 ff93 	bl	8006928 <report_init_message>

    // Start Grbl main loop. Processes program inputs and executes them.
    protocol_main_loop();
 8003a02:	f002 fe4b 	bl	800669c <protocol_main_loop>
 8003a06:	782a      	ldrb	r2, [r5, #0]
 8003a08:	e7cb      	b.n	80039a2 <main+0x8a>
 8003a0a:	bf00      	nop
 8003a0c:	e000e010 	.word	0xe000e010
 8003a10:	20001188 	.word	0x20001188
 8003a14:	2000134c 	.word	0x2000134c
 8003a18:	200011b4 	.word	0x200011b4
 8003a1c:	200011a0 	.word	0x200011a0
 8003a20:	2000119c 	.word	0x2000119c
 8003a24:	20001184 	.word	0x20001184
 8003a28:	2000119e 	.word	0x2000119e
 8003a2c:	2000119d 	.word	0x2000119d
 8003a30:	200011c8 	.word	0x200011c8

08003a34 <_delay_ms>:
}
#if defined (STM32F103C8)
void _delay_ms(uint32_t x)
{
	u32 temp;
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003a34:	f242 3128 	movw	r1, #9000	; 0x2328
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <_delay_ms+0x2c>)
{
 8003a3a:	b430      	push	{r4, r5}
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003a3c:	2500      	movs	r5, #0
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003a3e:	2401      	movs	r4, #1
	do
	{
		temp = SysTick->CTRL;
 8003a40:	461a      	mov	r2, r3
	SysTick->LOAD = (u32)72000000 / 8000 * x;                     // Loading time
 8003a42:	fb01 f000 	mul.w	r0, r1, r0
 8003a46:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0x00;                                            // Empty the counter
 8003a48:	609d      	str	r5, [r3, #8]
	SysTick->CTRL = 0x01;                                           // Start from bottom
 8003a4a:	601c      	str	r4, [r3, #0]
		temp = SysTick->CTRL;
 8003a4c:	6813      	ldr	r3, [r2, #0]
	} while ((temp & 0x01) && !(temp&(1 << 16)));                             // Wait time arrive
 8003a4e:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d0fa      	beq.n	8003a4c <_delay_ms+0x18>
	SysTick->CTRL = 0x00;                                            // Close the counter
 8003a56:	2300      	movs	r3, #0
	SysTick->VAL = 0X00;                                            // Empty the counter
}
 8003a58:	bc30      	pop	{r4, r5}
	SysTick->CTRL = 0x00;                                            // Close the counter
 8003a5a:	6013      	str	r3, [r2, #0]
	SysTick->VAL = 0X00;                                            // Empty the counter
 8003a5c:	6093      	str	r3, [r2, #8]
}
 8003a5e:	4770      	bx	lr
 8003a60:	e000e010 	.word	0xe000e010

08003a64 <LedBlink>:
void LedBlink(void)
{
 8003a64:	b510      	push	{r4, lr}
	static BitAction nOnFlag = Bit_SET;
	GPIO_WriteBit(GPIOC, GPIO_Pin_13, nOnFlag);
 8003a66:	4c07      	ldr	r4, [pc, #28]	; (8003a84 <LedBlink+0x20>)
 8003a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a6c:	7822      	ldrb	r2, [r4, #0]
 8003a6e:	4806      	ldr	r0, [pc, #24]	; (8003a88 <LedBlink+0x24>)
 8003a70:	f7fd fe88 	bl	8001784 <GPIO_WriteBit>
	nOnFlag = (nOnFlag == Bit_SET) ? Bit_RESET : Bit_SET;
 8003a74:	7823      	ldrb	r3, [r4, #0]
 8003a76:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8003a7a:	bf18      	it	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	7023      	strb	r3, [r4, #0]
 8003a80:	bd10      	pop	{r4, pc}
 8003a82:	bf00      	nop
 8003a84:	20000014 	.word	0x20000014
 8003a88:	40011000 	.word	0x40011000

08003a8c <mc_line>:
// NOTE: This is the primary gateway to the grbl planner. All line motions, including arc line
// segments, must pass through this routine before being passed to the planner. The seperation of
// mc_line and plan_buffer_line is done primarily to place non-planner-type functions from being
// in the planner and to let backlash compensation or canned cycle integration simple and direct.
void mc_line(float *target, plan_line_data_t *pl_data)
{
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a8e:	4d17      	ldr	r5, [pc, #92]	; (8003aec <mc_line+0x60>)
{
 8003a90:	460e      	mov	r6, r1
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a92:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
{
 8003a96:	4607      	mov	r7, r0
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a98:	0699      	lsls	r1, r3, #26
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a9a:	4c15      	ldr	r4, [pc, #84]	; (8003af0 <mc_line+0x64>)
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003a9c:	d504      	bpl.n	8003aa8 <mc_line+0x1c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003a9e:	7823      	ldrb	r3, [r4, #0]
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d00a      	beq.n	8003aba <mc_line+0x2e>
 8003aa4:	f7ff febe 	bl	8003824 <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003aa8:	7823      	ldrb	r3, [r4, #0]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d105      	bne.n	8003aba <mc_line+0x2e>
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
    if (sys.abort) { return; } // Bail, if system abort.
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003ab0:	f000 fe54 	bl	800475c <plan_check_full_buffer>
 8003ab4:	b138      	cbz	r0, 8003ac6 <mc_line+0x3a>
 8003ab6:	f001 fc97 	bl	80053e8 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003aba:	f002 f9c1 	bl	8005e40 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003abe:	7863      	ldrb	r3, [r4, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f5      	beq.n	8003ab0 <mc_line+0x24>
 8003ac4:	e7f3      	b.n	8003aae <mc_line+0x22>
    else { break; }
  } while (1);

  // Plan and queue motion into planner buffer
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	4631      	mov	r1, r6
 8003aca:	f000 ff07 	bl	80048dc <plan_buffer_line>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d1ed      	bne.n	8003aae <mc_line+0x22>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003ad2:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8003ad6:	079a      	lsls	r2, r3, #30
 8003ad8:	d5e9      	bpl.n	8003aae <mc_line+0x22>
			// Correctly set spindle state, if there is a coincident position passed. Forces a buffer
			// sync while in M3 laser mode only.
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003ada:	7a33      	ldrb	r3, [r6, #8]
 8003adc:	06db      	lsls	r3, r3, #27
 8003ade:	d5e6      	bpl.n	8003aae <mc_line+0x22>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ae0:	6871      	ldr	r1, [r6, #4]
 8003ae2:	2010      	movs	r0, #16
			}
		}
	}
}
 8003ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003ae8:	f004 bab6 	b.w	8008058 <spindle_sync>
 8003aec:	2000134c 	.word	0x2000134c
 8003af0:	20001188 	.word	0x20001188
 8003af4:	00000000 	.word	0x00000000

08003af8 <mc_arc>:
// The arc is approximated by generating a huge number of tiny, linear segments. The chordal tolerance
// of each segment is configured in settings.arc_tolerance, which is defined to be the maximum normal
// distance from segment to the circle when the end points both lie on the circle.
void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
  uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
{
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	461f      	mov	r7, r3
 8003afe:	b091      	sub	sp, #68	; 0x44
 8003b00:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8003b04:	4683      	mov	fp, r0
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003b06:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003b0a:	00a3      	lsls	r3, r4, #2
 8003b0c:	18d6      	adds	r6, r2, r3
{
 8003b0e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003b10:	910b      	str	r1, [sp, #44]	; 0x2c
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003b12:	4628      	mov	r0, r5
 8003b14:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8003b18:	9602      	str	r6, [sp, #8]
 8003b1a:	18fe      	adds	r6, r7, r3
 8003b1c:	9207      	str	r2, [sp, #28]
 8003b1e:	960c      	str	r6, [sp, #48]	; 0x30
 8003b20:	f7fc ffbe 	bl	8000aa0 <__addsf3>
{
 8003b24:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b28:	9a07      	ldr	r2, [sp, #28]
 8003b2a:	f857 8026 	ldr.w	r8, [r7, r6, lsl #2]
 8003b2e:	00b3      	lsls	r3, r6, #2
 8003b30:	441f      	add	r7, r3
 8003b32:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003b36:	4682      	mov	sl, r0
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b38:	441a      	add	r2, r3
  float center_axis0 = position[axis_0] + offset[axis_0];
 8003b3a:	9003      	str	r0, [sp, #12]
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	9204      	str	r2, [sp, #16]
 8003b40:	970d      	str	r7, [sp, #52]	; 0x34
 8003b42:	f7fc ffad 	bl	8000aa0 <__addsf3>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
  float r_axis1 = -offset[axis_1];
  float rt_axis0 = target[axis_0] - center_axis0;
 8003b46:	4651      	mov	r1, sl
  float center_axis1 = position[axis_1] + offset[axis_1];
 8003b48:	4681      	mov	r9, r0
 8003b4a:	9005      	str	r0, [sp, #20]
  float rt_axis0 = target[axis_0] - center_axis0;
 8003b4c:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8003b50:	f7fc ffa4 	bl	8000a9c <__aeabi_fsub>
  float rt_axis1 = target[axis_1] - center_axis1;
 8003b54:	4649      	mov	r1, r9
  float rt_axis0 = target[axis_0] - center_axis0;
 8003b56:	4604      	mov	r4, r0
  float rt_axis1 = target[axis_1] - center_axis1;
 8003b58:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 8003b5c:	f7fc ff9e 	bl	8000a9c <__aeabi_fsub>
  float r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 8003b60:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  float rt_axis1 = target[axis_1] - center_axis1;
 8003b64:	4606      	mov	r6, r0

  // CCW angle between position and target from circle center. Only one atan2() trig computation required.
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003b66:	4621      	mov	r1, r4
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7fd f8a1 	bl	8000cb0 <__aeabi_fmul>
  float r_axis1 = -offset[axis_1];
 8003b6e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003b72:	4607      	mov	r7, r0
 8003b74:	4631      	mov	r1, r6
 8003b76:	4640      	mov	r0, r8
 8003b78:	f7fd f89a 	bl	8000cb0 <__aeabi_fmul>
 8003b7c:	4601      	mov	r1, r0
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f7fc ff8e 	bl	8000aa0 <__addsf3>
 8003b84:	4631      	mov	r1, r6
 8003b86:	4681      	mov	r9, r0
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f7fd f891 	bl	8000cb0 <__aeabi_fmul>
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4606      	mov	r6, r0
 8003b92:	4640      	mov	r0, r8
 8003b94:	f7fd f88c 	bl	8000cb0 <__aeabi_fmul>
 8003b98:	4601      	mov	r1, r0
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7fc ff7e 	bl	8000a9c <__aeabi_fsub>
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f007 faef 	bl	800b184 <atan2f>
{
 8003ba6:	f89d 7078 	ldrb.w	r7, [sp, #120]	; 0x78
  float angular_travel = atan2f(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 8003baa:	4606      	mov	r6, r0
{
 8003bac:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8003bae:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8003bb2:	2f00      	cmp	r7, #0
 8003bb4:	f000 80d0 	beq.w	8003d58 <mc_arc+0x260>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003bb8:	f7fc fc2e 	bl	8000418 <__aeabi_f2d>
 8003bbc:	a3a8      	add	r3, pc, #672	; (adr r3, 8003e60 <mc_arc+0x368>)
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	4682      	mov	sl, r0
 8003bc4:	468b      	mov	fp, r1
 8003bc6:	f7fc ff01 	bl	80009cc <__aeabi_dcmpge>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f040 80e9 	bne.w	8003da2 <mc_arc+0x2aa>
  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003bd0:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8003e84 <mc_arc+0x38c>
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	f8db 705c 	ldr.w	r7, [fp, #92]	; 0x5c
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7fc ff60 	bl	8000aa0 <__addsf3>
 8003be0:	4639      	mov	r1, r7
 8003be2:	f7fc ff5b 	bl	8000a9c <__aeabi_fsub>
 8003be6:	4639      	mov	r1, r7
 8003be8:	f7fd f862 	bl	8000cb0 <__aeabi_fmul>
 8003bec:	f007 facc 	bl	800b188 <sqrtf>
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003bf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
                          sqrtf(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8003bf4:	4607      	mov	r7, r0
  uint16_t segments = (uint16_t)floorf(fabsf(0.5f*angular_travel*radius) /
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7fd f85a 	bl	8000cb0 <__aeabi_fmul>
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	f7fd f857 	bl	8000cb0 <__aeabi_fmul>
 8003c02:	4639      	mov	r1, r7
 8003c04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c08:	f7fd f906 	bl	8000e18 <__aeabi_fdiv>
 8003c0c:	f007 fa18 	bl	800b040 <floorf>
 8003c10:	f7fd fa50 	bl	80010b4 <__aeabi_f2uiz>
 8003c14:	b283      	uxth	r3, r0
 8003c16:	9301      	str	r3, [sp, #4]

  if (segments) {
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 816b 	beq.w	8003ef4 <mc_arc+0x3fc>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      pl_data->feed_rate *= segments; 
 8003c20:	9801      	ldr	r0, [sp, #4]
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 8003c22:	7a1c      	ldrb	r4, [r3, #8]
 8003c24:	0722      	lsls	r2, r4, #28
 8003c26:	f100 80ae 	bmi.w	8003d86 <mc_arc+0x28e>
 8003c2a:	f7fc ffed 	bl	8000c08 <__aeabi_i2f>
 8003c2e:	4607      	mov	r7, r0
 8003c30:	4639      	mov	r1, r7
 8003c32:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c36:	f7fd f8ef 	bl	8000e18 <__aeabi_fdiv>
 8003c3a:	4604      	mov	r4, r0
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
    }
    
    float theta_per_segment = angular_travel/segments;
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7fd f836 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c44:	9b07      	ldr	r3, [sp, #28]
 8003c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c48:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
    float theta_per_segment = angular_travel/segments;
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	900e      	str	r0, [sp, #56]	; 0x38
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c50:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8003c54:	f7fc ff22 	bl	8000a9c <__aeabi_fsub>
 8003c58:	4621      	mov	r1, r4
 8003c5a:	f7fd f829 	bl	8000cb0 <__aeabi_fmul>
       without the initial overhead of computing cos() or sin(). By the time the arc needs to be applied
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003c5e:	4639      	mov	r1, r7
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c60:	9006      	str	r0, [sp, #24]
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003c62:	4638      	mov	r0, r7
 8003c64:	f7fd f824 	bl	8000cb0 <__aeabi_fmul>
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c70:	f7fc ff14 	bl	8000a9c <__aeabi_fsub>
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c74:	4980      	ldr	r1, [pc, #512]	; (8003e78 <mc_arc+0x380>)
    float cos_T = 2.0f - theta_per_segment*theta_per_segment;
 8003c76:	4606      	mov	r6, r0
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c78:	4638      	mov	r0, r7
 8003c7a:	f7fd f819 	bl	8000cb0 <__aeabi_fmul>
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4607      	mov	r7, r0
 8003c82:	487e      	ldr	r0, [pc, #504]	; (8003e7c <mc_arc+0x384>)
 8003c84:	f7fc ff0a 	bl	8000a9c <__aeabi_fsub>
 8003c88:	4601      	mov	r1, r0
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	f7fd f810 	bl	8000cb0 <__aeabi_fmul>
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c90:	9b07      	ldr	r3, [sp, #28]
    float sin_T = theta_per_segment*0.16666667f*(cos_T + 4.0f);
 8003c92:	9008      	str	r0, [sp, #32]
    cos_T *= 0.5;
 8003c94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003c98:	4630      	mov	r0, r6
    float linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8003c9a:	eb03 0789 	add.w	r7, r3, r9, lsl #2
    cos_T *= 0.5;
 8003c9e:	f7fd f807 	bl	8000cb0 <__aeabi_fmul>
    float cos_Ti;
    float r_axisi;
    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003ca2:	9b01      	ldr	r3, [sp, #4]
    cos_T *= 0.5;
 8003ca4:	9009      	str	r0, [sp, #36]	; 0x24
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	f000 8124 	beq.w	8003ef4 <mc_arc+0x3fc>
 8003cac:	2601      	movs	r6, #1
 8003cae:	f04f 0900 	mov.w	r9, #0
 8003cb2:	4c73      	ldr	r4, [pc, #460]	; (8003e80 <mc_arc+0x388>)

      if (count < N_ARC_CORRECTION) {
 8003cb4:	f1b9 0f0b 	cmp.w	r9, #11
 8003cb8:	f200 80e6 	bhi.w	8003e88 <mc_arc+0x390>
        // Apply vector rotation matrix. ~40 usec
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	9808      	ldr	r0, [sp, #32]
 8003cc0:	f7fc fff6 	bl	8000cb0 <__aeabi_fmul>
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	4682      	mov	sl, r0
 8003cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cca:	f7fc fff1 	bl	8000cb0 <__aeabi_fmul>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7fc fee5 	bl	8000aa0 <__addsf3>
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003cd6:	4629      	mov	r1, r5
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 8003cd8:	4682      	mov	sl, r0
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cdc:	f7fc ffe8 	bl	8000cb0 <__aeabi_fmul>
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	9808      	ldr	r0, [sp, #32]
 8003ce6:	f7fc ffe3 	bl	8000cb0 <__aeabi_fmul>
 8003cea:	4601      	mov	r1, r0
 8003cec:	4628      	mov	r0, r5
 8003cee:	f7fc fed5 	bl	8000a9c <__aeabi_fsub>
        r_axis1 = r_axisi;
 8003cf2:	46d0      	mov	r8, sl
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 8003cf4:	4605      	mov	r5, r0
        count++;
 8003cf6:	f109 0901 	add.w	r9, r9, #1
 8003cfa:	fa5f f989 	uxtb.w	r9, r9
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
        count = 0;
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 8003cfe:	9903      	ldr	r1, [sp, #12]
 8003d00:	4628      	mov	r0, r5
 8003d02:	f7fc fecd 	bl	8000aa0 <__addsf3>
 8003d06:	9b02      	ldr	r3, [sp, #8]
      position[axis_1] = center_axis1 + r_axis1;
 8003d08:	9905      	ldr	r1, [sp, #20]
      position[axis_0] = center_axis0 + r_axis0;
 8003d0a:	6018      	str	r0, [r3, #0]
      position[axis_1] = center_axis1 + r_axis1;
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	f7fc fec7 	bl	8000aa0 <__addsf3>
 8003d12:	9b04      	ldr	r3, [sp, #16]
      position[axis_linear] += linear_per_segment;
 8003d14:	9906      	ldr	r1, [sp, #24]
      position[axis_1] = center_axis1 + r_axis1;
 8003d16:	6018      	str	r0, [r3, #0]
      position[axis_linear] += linear_per_segment;
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f7fc fec1 	bl	8000aa0 <__addsf3>
 8003d1e:	6038      	str	r0, [r7, #0]
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003d20:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003d24:	069b      	lsls	r3, r3, #26
 8003d26:	d505      	bpl.n	8003d34 <mc_arc+0x23c>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003d28:	7823      	ldrb	r3, [r4, #0]
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d00c      	beq.n	8003d48 <mc_arc+0x250>
 8003d2e:	9807      	ldr	r0, [sp, #28]
 8003d30:	f7ff fd78 	bl	8003824 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003d34:	7823      	ldrb	r3, [r4, #0]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d106      	bne.n	8003d48 <mc_arc+0x250>
 8003d3a:	e051      	b.n	8003de0 <mc_arc+0x2e8>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003d3c:	f000 fd0e 	bl	800475c <plan_check_full_buffer>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d039      	beq.n	8003db8 <mc_arc+0x2c0>
 8003d44:	f001 fb50 	bl	80053e8 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003d48:	f002 f87a 	bl	8005e40 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003d4c:	7863      	ldrb	r3, [r4, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f4      	beq.n	8003d3c <mc_arc+0x244>
      if (sys.abort) { return; }
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
}
 8003d52:	b011      	add	sp, #68	; 0x44
 8003d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8003d58:	f7fc fb5e 	bl	8000418 <__aeabi_f2d>
 8003d5c:	a342      	add	r3, pc, #264	; (adr r3, 8003e68 <mc_arc+0x370>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	4682      	mov	sl, r0
 8003d64:	468b      	mov	fp, r1
 8003d66:	f7fc fe27 	bl	80009b8 <__aeabi_dcmple>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	f43f af30 	beq.w	8003bd0 <mc_arc+0xd8>
 8003d70:	a33f      	add	r3, pc, #252	; (adr r3, 8003e70 <mc_arc+0x378>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	4650      	mov	r0, sl
 8003d78:	4659      	mov	r1, fp
 8003d7a:	f7fc f9ef 	bl	800015c <__adddf3>
 8003d7e:	f7fc fe39 	bl	80009f4 <__aeabi_d2f>
 8003d82:	4606      	mov	r6, r0
 8003d84:	e724      	b.n	8003bd0 <mc_arc+0xd8>
      pl_data->feed_rate *= segments; 
 8003d86:	f7fc ff3f 	bl	8000c08 <__aeabi_i2f>
 8003d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4607      	mov	r7, r0
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	f7fc ff8d 	bl	8000cb0 <__aeabi_fmul>
 8003d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003d98:	f024 0408 	bic.w	r4, r4, #8
      pl_data->feed_rate *= segments; 
 8003d9c:	6018      	str	r0, [r3, #0]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8003d9e:	721c      	strb	r4, [r3, #8]
 8003da0:	e746      	b.n	8003c30 <mc_arc+0x138>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8003da2:	a333      	add	r3, pc, #204	; (adr r3, 8003e70 <mc_arc+0x378>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	4650      	mov	r0, sl
 8003daa:	4659      	mov	r1, fp
 8003dac:	f7fc f9d4 	bl	8000158 <__aeabi_dsub>
 8003db0:	f7fc fe20 	bl	80009f4 <__aeabi_d2f>
 8003db4:	4606      	mov	r6, r0
 8003db6:	e70b      	b.n	8003bd0 <mc_arc+0xd8>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003db8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003dbc:	9807      	ldr	r0, [sp, #28]
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	f000 fd8c 	bl	80048dc <plan_buffer_line>
 8003dc4:	b960      	cbnz	r0, 8003de0 <mc_arc+0x2e8>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003dc6:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003dca:	0798      	lsls	r0, r3, #30
 8003dcc:	d508      	bpl.n	8003de0 <mc_arc+0x2e8>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003dce:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8003dd2:	06d9      	lsls	r1, r3, #27
 8003dd4:	d504      	bpl.n	8003de0 <mc_arc+0x2e8>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dd8:	2010      	movs	r0, #16
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	f004 f93c 	bl	8008058 <spindle_sync>
      if (sys.abort) { return; }
 8003de0:	7863      	ldrb	r3, [r4, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1b5      	bne.n	8003d52 <mc_arc+0x25a>
 8003de6:	3601      	adds	r6, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8003de8:	9a01      	ldr	r2, [sp, #4]
 8003dea:	b2b3      	uxth	r3, r6
 8003dec:	429a      	cmp	r2, r3
 8003dee:	f63f af61 	bhi.w	8003cb4 <mc_arc+0x1bc>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003df2:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003df6:	0699      	lsls	r1, r3, #26
 8003df8:	d505      	bpl.n	8003e06 <mc_arc+0x30e>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003dfa:	7823      	ldrb	r3, [r4, #0]
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d00f      	beq.n	8003e20 <mc_arc+0x328>
 8003e00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e02:	f7ff fd0f 	bl	8003824 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003e06:	7823      	ldrb	r3, [r4, #0]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d0a2      	beq.n	8003d52 <mc_arc+0x25a>
    protocol_execute_realtime(); // Check for any run-time commands
 8003e0c:	f002 f818 	bl	8005e40 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003e10:	7863      	ldrb	r3, [r4, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d19d      	bne.n	8003d52 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003e16:	f000 fca1 	bl	800475c <plan_check_full_buffer>
 8003e1a:	b150      	cbz	r0, 8003e32 <mc_arc+0x33a>
 8003e1c:	f001 fae4 	bl	80053e8 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003e20:	f002 f80e 	bl	8005e40 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003e24:	7863      	ldrb	r3, [r4, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d193      	bne.n	8003d52 <mc_arc+0x25a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003e2a:	f000 fc97 	bl	800475c <plan_check_full_buffer>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d1f4      	bne.n	8003e1c <mc_arc+0x324>
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 8003e32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003e34:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003e36:	4621      	mov	r1, r4
 8003e38:	f000 fd50 	bl	80048dc <plan_buffer_line>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d188      	bne.n	8003d52 <mc_arc+0x25a>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8003e40:	f89b 3068 	ldrb.w	r3, [fp, #104]	; 0x68
 8003e44:	079a      	lsls	r2, r3, #30
 8003e46:	d584      	bpl.n	8003d52 <mc_arc+0x25a>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8003e48:	7a23      	ldrb	r3, [r4, #8]
 8003e4a:	06db      	lsls	r3, r3, #27
 8003e4c:	d581      	bpl.n	8003d52 <mc_arc+0x25a>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003e4e:	2010      	movs	r0, #16
 8003e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e52:	6859      	ldr	r1, [r3, #4]
}
 8003e54:	b011      	add	sp, #68	; 0x44
 8003e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8003e5a:	f004 b8fd 	b.w	8008058 <spindle_sync>
 8003e5e:	bf00      	nop
 8003e60:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e64:	bea0c6f7 	.word	0xbea0c6f7
 8003e68:	a0b5ed8d 	.word	0xa0b5ed8d
 8003e6c:	3ea0c6f7 	.word	0x3ea0c6f7
 8003e70:	54442d18 	.word	0x54442d18
 8003e74:	401921fb 	.word	0x401921fb
 8003e78:	3e2aaaab 	.word	0x3e2aaaab
 8003e7c:	40c00000 	.word	0x40c00000
 8003e80:	20001188 	.word	0x20001188
 8003e84:	2000134c 	.word	0x2000134c
        cos_Ti = cosf(i*theta_per_segment);
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f7fc febd 	bl	8000c08 <__aeabi_i2f>
 8003e8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e90:	f7fc ff0e 	bl	8000cb0 <__aeabi_fmul>
 8003e94:	4605      	mov	r5, r0
 8003e96:	f007 f89f 	bl	800afd8 <cosf>
 8003e9a:	4680      	mov	r8, r0
        sin_Ti = sinf(i*theta_per_segment);
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	f007 f93b 	bl	800b118 <sinf>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        sin_Ti = sinf(i*theta_per_segment);
 8003ea4:	4682      	mov	sl, r0
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003eae:	4619      	mov	r1, r3
 8003eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8003eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eb4:	f8d3 9000 	ldr.w	r9, [r3]
 8003eb8:	f7fc fefa 	bl	8000cb0 <__aeabi_fmul>
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	4650      	mov	r0, sl
 8003ec2:	f7fc fef5 	bl	8000cb0 <__aeabi_fmul>
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7fc fde9 	bl	8000aa0 <__addsf3>
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 8003ed0:	4605      	mov	r5, r0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	f7fc feeb 	bl	8000cb0 <__aeabi_fmul>
 8003eda:	4649      	mov	r1, r9
 8003edc:	4682      	mov	sl, r0
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f7fc fee6 	bl	8000cb0 <__aeabi_fmul>
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7fc fdd8 	bl	8000a9c <__aeabi_fsub>
        count = 0;
 8003eec:	f04f 0900 	mov.w	r9, #0
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	e704      	b.n	8003cfe <mc_arc+0x206>
 8003ef4:	4c00      	ldr	r4, [pc, #0]	; (8003ef8 <mc_arc+0x400>)
 8003ef6:	e77c      	b.n	8003df2 <mc_arc+0x2fa>
 8003ef8:	20001188 	.word	0x20001188

08003efc <mc_dwell>:


// Execute dwell in seconds.
void mc_dwell(float seconds)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <mc_dwell+0x20>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d009      	beq.n	8003f18 <mc_dwell+0x1c>
{
 8003f04:	b510      	push	{r4, lr}
 8003f06:	4604      	mov	r4, r0
  protocol_buffer_synchronize();
 8003f08:	f002 f98c 	bl	8006224 <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003f0c:	4620      	mov	r0, r4
}
 8003f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_sec(seconds, DELAY_MODE_DWELL);
 8003f12:	2100      	movs	r1, #0
 8003f14:	f000 b974 	b.w	8004200 <delay_sec>
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20001188 	.word	0x20001188

08003f20 <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4604      	mov	r4, r0
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 8003f24:	f7ff f9b4 	bl	8003290 <limits_disable>

  // -------------------------------------------------------------------------------------
  // Perform homing routine. NOTE: Special motion case. Only system reset works.
  
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
 8003f28:	b1b4      	cbz	r4, 8003f58 <mc_homing_cycle+0x38>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7ff fa3c 	bl	80033a8 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 8003f30:	f001 ff86 	bl	8005e40 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <mc_homing_cycle+0x40>)
 8003f36:	785b      	ldrb	r3, [r3, #1]
 8003f38:	b96b      	cbnz	r3, 8003f56 <mc_homing_cycle+0x36>

  // Homing cycle complete! Setup system for normal operation.
  // -------------------------------------------------------------------------------------

  // Sync gcode parser and planner positions to homed position.
  gc_sync_position();
 8003f3a:	f7fd ff8b 	bl	8001e54 <gc_sync_position>
  plan_sync_position();
 8003f3e:	f000 ff67 	bl	8004e10 <plan_sync_position>
#ifdef STM32F103C8
// --- YSV 22-06-2018
	#if defined AA_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT));
	#elif defined AB_AXIS
	EXTI_ClearITPendingBit((1 << X_LIMIT_BIT) | (1 << Y_LIMIT_BIT) | (1 << Z_LIMIT_BIT) | (1 << A_LIMIT_BIT) | (1 << B_LIMIT_BIT));
 8003f42:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003f46:	f7fd f95d 	bl	8001204 <EXTI_ClearITPendingBit>
 8003f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <mc_homing_cycle+0x44>)
 8003f50:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	bd10      	pop	{r4, pc}
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f7ff fa25 	bl	80033a8 <limits_go_home>
 8003f5e:	e7e7      	b.n	8003f30 <mc_homing_cycle+0x10>
 8003f60:	20001188 	.word	0x20001188
 8003f64:	e000e100 	.word	0xe000e100

08003f68 <mc_probe_cycle>:


// Perform tool length probe cycle. Requires probe switch.
// NOTE: Upon probe failure, the program will be stopped and placed into ALARM state.
uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
{
 8003f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003f6c:	4c43      	ldr	r4, [pc, #268]	; (800407c <mc_probe_cycle+0x114>)
 8003f6e:	7823      	ldrb	r3, [r4, #0]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d00c      	beq.n	8003f8e <mc_probe_cycle+0x26>
 8003f74:	4617      	mov	r7, r2
 8003f76:	460e      	mov	r6, r1
 8003f78:	4605      	mov	r5, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 8003f7a:	f002 f953 	bl	8006224 <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8003f7e:	f894 8001 	ldrb.w	r8, [r4, #1]
 8003f82:	f1b8 0f00 	cmp.w	r8, #0
 8003f86:	d005      	beq.n	8003f94 <mc_probe_cycle+0x2c>
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
    protocol_execute_realtime();
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 8003f88:	2002      	movs	r0, #2
 8003f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8003f8e:	2000      	movs	r0, #0
    report_probe_parameters();
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 8003f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  probe_configure_invert_mask(is_probe_away);
 8003f94:	f3c7 00c0 	ubfx	r0, r7, #3, #1
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 8003f98:	f884 8005 	strb.w	r8, [r4, #5]
  probe_configure_invert_mask(is_probe_away);
 8003f9c:	f001 f9da 	bl	8005354 <probe_configure_invert_mask>
  if ( probe_get_state() ) { // Check probe pin state.
 8003fa0:	f001 f9ec 	bl	800537c <probe_get_state>
 8003fa4:	b140      	cbz	r0, 8003fb8 <mc_probe_cycle+0x50>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 8003fa6:	2004      	movs	r0, #4
 8003fa8:	f005 fda2 	bl	8009af0 <system_set_exec_alarm>
    protocol_execute_realtime();
 8003fac:	f001 ff48 	bl	8005e40 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	f001 f9cf 	bl	8005354 <probe_configure_invert_mask>
 8003fb6:	e7e7      	b.n	8003f88 <mc_probe_cycle+0x20>
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8003fb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800408c <mc_probe_cycle+0x124>
 8003fbc:	f898 3068 	ldrb.w	r3, [r8, #104]	; 0x68
 8003fc0:	0698      	lsls	r0, r3, #26
 8003fc2:	d505      	bpl.n	8003fd0 <mc_probe_cycle+0x68>
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 8003fc4:	7823      	ldrb	r3, [r4, #0]
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d00b      	beq.n	8003fe2 <mc_probe_cycle+0x7a>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f7ff fc2a 	bl	8003824 <limits_soft_check>
  if (sys.state == STATE_CHECK_MODE) { return; }
 8003fd0:	7823      	ldrb	r3, [r4, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d105      	bne.n	8003fe2 <mc_probe_cycle+0x7a>
 8003fd6:	e009      	b.n	8003fec <mc_probe_cycle+0x84>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 8003fd8:	f000 fbc0 	bl	800475c <plan_check_full_buffer>
 8003fdc:	b370      	cbz	r0, 800403c <mc_probe_cycle+0xd4>
 8003fde:	f001 fa03 	bl	80053e8 <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 8003fe2:	f001 ff2d 	bl	8005e40 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 8003fe6:	7863      	ldrb	r3, [r4, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f5      	beq.n	8003fd8 <mc_probe_cycle+0x70>
  sys_probe_state = PROBE_ACTIVE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	4d24      	ldr	r5, [pc, #144]	; (8004080 <mc_probe_cycle+0x118>)
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003ff0:	2002      	movs	r0, #2
  sys_probe_state = PROBE_ACTIVE;
 8003ff2:	702b      	strb	r3, [r5, #0]
  system_set_exec_state_flag(EXEC_CYCLE_START);
 8003ff4:	f005 fd68 	bl	8009ac8 <system_set_exec_state_flag>
    protocol_execute_realtime();
 8003ff8:	f001 ff22 	bl	8005e40 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8003ffc:	7863      	ldrb	r3, [r4, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1c2      	bne.n	8003f88 <mc_probe_cycle+0x20>
  } while (sys.state != STATE_IDLE);
 8004002:	7823      	ldrb	r3, [r4, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f7      	bne.n	8003ff8 <mc_probe_cycle+0x90>
  if (sys_probe_state == PROBE_ACTIVE) {
 8004008:	782b      	ldrb	r3, [r5, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d028      	beq.n	8004060 <mc_probe_cycle+0xf8>
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 800400e:	2301      	movs	r3, #1
 8004010:	7163      	strb	r3, [r4, #5]
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8004012:	2300      	movs	r3, #0
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8004014:	4618      	mov	r0, r3
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8004016:	702b      	strb	r3, [r5, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 8004018:	f001 f99c 	bl	8005354 <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 800401c:	f001 ff10 	bl	8005e40 <protocol_execute_realtime>
  st_reset(); // Reset step segment buffer.
 8004020:	f004 fb28 	bl	8008674 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8004024:	f000 fb2a 	bl	800467c <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 8004028:	f000 fef2 	bl	8004e10 <plan_sync_position>
    report_probe_parameters();
 800402c:	f002 fe6e 	bl	8006d0c <report_probe_parameters>
  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8004030:	7960      	ldrb	r0, [r4, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8004032:	3000      	adds	r0, #0
 8004034:	bf18      	it	ne
 8004036:	2001      	movne	r0, #1
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 800403c:	4628      	mov	r0, r5
 800403e:	4631      	mov	r1, r6
 8004040:	f000 fc4c 	bl	80048dc <plan_buffer_line>
 8004044:	2800      	cmp	r0, #0
 8004046:	d1d1      	bne.n	8003fec <mc_probe_cycle+0x84>
		if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 8004048:	f898 3068 	ldrb.w	r3, [r8, #104]	; 0x68
 800404c:	0799      	lsls	r1, r3, #30
 800404e:	d5cd      	bpl.n	8003fec <mc_probe_cycle+0x84>
			if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 8004050:	7a33      	ldrb	r3, [r6, #8]
 8004052:	06da      	lsls	r2, r3, #27
 8004054:	d5ca      	bpl.n	8003fec <mc_probe_cycle+0x84>
				spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 8004056:	6871      	ldr	r1, [r6, #4]
 8004058:	2010      	movs	r0, #16
 800405a:	f003 fffd 	bl	8008058 <spindle_sync>
 800405e:	e7c5      	b.n	8003fec <mc_probe_cycle+0x84>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8004060:	06fb      	lsls	r3, r7, #27
 8004062:	d506      	bpl.n	8004072 <mc_probe_cycle+0x10a>
 8004064:	4f07      	ldr	r7, [pc, #28]	; (8004084 <mc_probe_cycle+0x11c>)
 8004066:	4e08      	ldr	r6, [pc, #32]	; (8004088 <mc_probe_cycle+0x120>)
 8004068:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800406a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6033      	str	r3, [r6, #0]
 8004070:	e7cf      	b.n	8004012 <mc_probe_cycle+0xaa>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8004072:	2005      	movs	r0, #5
 8004074:	f005 fd3c 	bl	8009af0 <system_set_exec_alarm>
 8004078:	e7cb      	b.n	8004012 <mc_probe_cycle+0xaa>
 800407a:	bf00      	nop
 800407c:	20001188 	.word	0x20001188
 8004080:	2000119e 	.word	0x2000119e
 8004084:	200011b4 	.word	0x200011b4
 8004088:	200011a0 	.word	0x200011a0
 800408c:	2000134c 	.word	0x2000134c

08004090 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8004090:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <mc_reset+0x54>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	06db      	lsls	r3, r3, #27
 8004098:	d500      	bpl.n	800409c <mc_reset+0xc>
 800409a:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 800409c:	2010      	movs	r0, #16
 800409e:	f005 fd13 	bl	8009ac8 <system_set_exec_state_flag>

    // Kill spindle and coolant.
    spindle_stop();
 80040a2:	f003 feef 	bl	8007e84 <spindle_stop>
    coolant_stop();
 80040a6:	f7fd fdc5 	bl	8001c34 <coolant_stop>
    // Kill steppers only if in any motion state, i.e. cycle, actively holding, or homing.
    // NOTE: If steppers are kept enabled via the step idle delay setting, this also keeps
    // the steppers enabled by avoiding the go_idle call altogether, unless the motion state is
    // violated, by which, all bets are off.
#ifndef  USE_RESET_BTN_AS_ESTOP
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80040aa:	4a0f      	ldr	r2, [pc, #60]	; (80040e8 <mc_reset+0x58>)
 80040ac:	7813      	ldrb	r3, [r2, #0]
 80040ae:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 80040b2:	d008      	beq.n	80040c6 <mc_reset+0x36>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION)))
#endif
    {
      if (sys.state == STATE_HOMING) {
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d00c      	beq.n	80040d2 <mc_reset+0x42>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
      }
      else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 80040b8:	2003      	movs	r0, #3
 80040ba:	f005 fd19 	bl	8009af0 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 80040be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 80040c2:	f004 b8bf 	b.w	8008244 <st_go_idle>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80040c6:	7912      	ldrb	r2, [r2, #4]
 80040c8:	f012 0f06 	tst.w	r2, #6
 80040cc:	d0e5      	beq.n	800409a <mc_reset+0xa>
      if (sys.state == STATE_HOMING) {
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d1f2      	bne.n	80040b8 <mc_reset+0x28>
        if (!sys_rt_exec_alarm) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <mc_reset+0x5c>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f1      	bne.n	80040be <mc_reset+0x2e>
 80040da:	2006      	movs	r0, #6
 80040dc:	f005 fd08 	bl	8009af0 <system_set_exec_alarm>
 80040e0:	e7ed      	b.n	80040be <mc_reset+0x2e>
 80040e2:	bf00      	nop
 80040e4:	2000119d 	.word	0x2000119d
 80040e8:	20001188 	.word	0x20001188
 80040ec:	200011c8 	.word	0x200011c8

080040f0 <read_float>:
// CNC applications, the typical decimal value is expected to be in the range of E0 to E-4.
// Scientific notation is officially not supported by g-code, and the 'E' character may
// be a g-code word on some CNC systems. So, 'E' notation will not be recognized.
// NOTE: Thanks to Radu-Eosif Mihailescu for identifying the issues with using strtod().
uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
{
 80040f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char *ptr = line + *char_counter;
 80040f4:	780c      	ldrb	r4, [r1, #0]
{
 80040f6:	b083      	sub	sp, #12
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 80040f8:	5d03      	ldrb	r3, [r0, r4]
  char *ptr = line + *char_counter;
 80040fa:	4404      	add	r4, r0

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 80040fc:	2b2d      	cmp	r3, #45	; 0x2d
 80040fe:	d065      	beq.n	80041cc <read_float+0xdc>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 8004100:	2b2b      	cmp	r3, #43	; 0x2b
 8004102:	d068      	beq.n	80041d6 <read_float+0xe6>
  bool isnegative = false;
 8004104:	f04f 0800 	mov.w	r8, #0
  c = *ptr++;
 8004108:	1c65      	adds	r5, r4, #1

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 800410a:	2600      	movs	r6, #0
  uint8_t ndigit = 0;
 800410c:	4634      	mov	r4, r6
  int8_t exp = 0;
 800410e:	4637      	mov	r7, r6
  uint32_t intval = 0;
 8004110:	46b6      	mov	lr, r6
 8004112:	e00c      	b.n	800412e <read_float+0x3e>
  while(1) {
    c -= '0';
    if (c <= 9) {
      ndigit++;
 8004114:	3401      	adds	r4, #1
 8004116:	b2e4      	uxtb	r4, r4
      if (ndigit <= MAX_INT_DIGITS) {
 8004118:	2c08      	cmp	r4, #8
 800411a:	d811      	bhi.n	8004140 <read_float+0x50>
        if (isdecimal) { exp--; }
 800411c:	b10e      	cbz	r6, 8004122 <read_float+0x32>
 800411e:	3f01      	subs	r7, #1
 8004120:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8004122:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8004126:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 800412a:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 800412e:	3b30      	subs	r3, #48	; 0x30
 8004130:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8004132:	2b09      	cmp	r3, #9
 8004134:	d9ee      	bls.n	8004114 <read_float+0x24>
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8004136:	2bfe      	cmp	r3, #254	; 0xfe
 8004138:	d107      	bne.n	800414a <read_float+0x5a>
 800413a:	b936      	cbnz	r6, 800414a <read_float+0x5a>
      isdecimal = true;
 800413c:	2601      	movs	r6, #1
 800413e:	e7f4      	b.n	800412a <read_float+0x3a>
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8004140:	2e00      	cmp	r6, #0
 8004142:	d1f2      	bne.n	800412a <read_float+0x3a>
 8004144:	3701      	adds	r7, #1
 8004146:	b27f      	sxtb	r7, r7
 8004148:	e7ef      	b.n	800412a <read_float+0x3a>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 800414a:	2c00      	cmp	r4, #0
 800414c:	d037      	beq.n	80041be <read_float+0xce>
 800414e:	4682      	mov	sl, r0

  // Convert integer into floating point.
  float fval;
  fval = (float)intval;
 8004150:	4670      	mov	r0, lr
 8004152:	9101      	str	r1, [sp, #4]
 8004154:	4691      	mov	r9, r2
 8004156:	f7fc fd53 	bl	8000c00 <__aeabi_ui2f>

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 800415a:	2100      	movs	r1, #0
  fval = (float)intval;
 800415c:	4683      	mov	fp, r0
  if (fval != 0) {
 800415e:	f7fc ff3b 	bl	8000fd8 <__aeabi_fcmpeq>
 8004162:	bb08      	cbnz	r0, 80041a8 <read_float+0xb8>
    while (exp <= -2) {
 8004164:	1c79      	adds	r1, r7, #1
 8004166:	da12      	bge.n	800418e <read_float+0x9e>
 8004168:	463e      	mov	r6, r7
      fval *= 0.01f;
 800416a:	4c22      	ldr	r4, [pc, #136]	; (80041f4 <read_float+0x104>)
 800416c:	4658      	mov	r0, fp
 800416e:	4621      	mov	r1, r4
 8004170:	f7fc fd9e 	bl	8000cb0 <__aeabi_fmul>
 8004174:	1cb3      	adds	r3, r6, #2
 8004176:	b25e      	sxtb	r6, r3
    while (exp <= -2) {
 8004178:	1c72      	adds	r2, r6, #1
      fval *= 0.01f;
 800417a:	4683      	mov	fp, r0
    while (exp <= -2) {
 800417c:	dbf6      	blt.n	800416c <read_float+0x7c>
 800417e:	b2ff      	uxtb	r7, r7
 8004180:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 8004184:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004188:	441f      	add	r7, r3
 800418a:	3702      	adds	r7, #2
 800418c:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 800418e:	1c7b      	adds	r3, r7, #1
 8004190:	d026      	beq.n	80041e0 <read_float+0xf0>
      fval *= 0.1f;
    } else if (exp > 0) {
 8004192:	b14f      	cbz	r7, 80041a8 <read_float+0xb8>
      do {
        fval *= 10.0f;
 8004194:	4c18      	ldr	r4, [pc, #96]	; (80041f8 <read_float+0x108>)
 8004196:	4658      	mov	r0, fp
 8004198:	4621      	mov	r1, r4
 800419a:	f7fc fd89 	bl	8000cb0 <__aeabi_fmul>
 800419e:	3f01      	subs	r7, #1
 80041a0:	b27f      	sxtb	r7, r7
 80041a2:	4683      	mov	fp, r0
      } while (--exp > 0);
 80041a4:	2f00      	cmp	r7, #0
 80041a6:	d1f6      	bne.n	8004196 <read_float+0xa6>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 80041a8:	f1b8 0f00 	cmp.w	r8, #0
 80041ac:	d10b      	bne.n	80041c6 <read_float+0xd6>
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement

  return(true);
 80041ae:	2401      	movs	r4, #1
  *char_counter = ptr - line - 1; // Set char_counter to next statement
 80041b0:	eba5 050a 	sub.w	r5, r5, sl
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	3d01      	subs	r5, #1
 80041b8:	f8c9 b000 	str.w	fp, [r9]
 80041bc:	701d      	strb	r5, [r3, #0]
}
 80041be:	4620      	mov	r0, r4
 80041c0:	b003      	add	sp, #12
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *float_ptr = -fval;
 80041c6:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
 80041ca:	e7f0      	b.n	80041ae <read_float+0xbe>
    c = *ptr++;
 80041cc:	1ca5      	adds	r5, r4, #2
 80041ce:	7863      	ldrb	r3, [r4, #1]
    isnegative = true;
 80041d0:	f04f 0801 	mov.w	r8, #1
 80041d4:	e799      	b.n	800410a <read_float+0x1a>
  bool isnegative = false;
 80041d6:	f04f 0800 	mov.w	r8, #0
    c = *ptr++;
 80041da:	7863      	ldrb	r3, [r4, #1]
 80041dc:	1ca5      	adds	r5, r4, #2
 80041de:	e794      	b.n	800410a <read_float+0x1a>
      fval *= 0.1f;
 80041e0:	4658      	mov	r0, fp
 80041e2:	4906      	ldr	r1, [pc, #24]	; (80041fc <read_float+0x10c>)
 80041e4:	f7fc fd64 	bl	8000cb0 <__aeabi_fmul>
 80041e8:	4683      	mov	fp, r0
  if (isnegative) {
 80041ea:	f1b8 0f00 	cmp.w	r8, #0
 80041ee:	d0de      	beq.n	80041ae <read_float+0xbe>
 80041f0:	e7e9      	b.n	80041c6 <read_float+0xd6>
 80041f2:	bf00      	nop
 80041f4:	3c23d70a 	.word	0x3c23d70a
 80041f8:	41200000 	.word	0x41200000
 80041fc:	3dcccccd 	.word	0x3dcccccd

08004200 <delay_sec>:


// Non-blocking delay function used for general operation and suspend features.
void delay_sec(float seconds, uint8_t mode)
{
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	460e      	mov	r6, r1
	uint16_t i = (uint16_t)ceilf(1000 / DWELL_TIME_STEP*seconds);
 8004204:	4918      	ldr	r1, [pc, #96]	; (8004268 <delay_sec+0x68>)
 8004206:	f7fc fd53 	bl	8000cb0 <__aeabi_fmul>
 800420a:	f006 fea5 	bl	800af58 <ceilf>
 800420e:	f7fc ff51 	bl	80010b4 <__aeabi_f2uiz>
 8004212:	b280      	uxth	r0, r0
	while (i-- > 0) {
 8004214:	b1b0      	cbz	r0, 8004244 <delay_sec+0x44>
		if (sys.abort) { return; }
 8004216:	4d15      	ldr	r5, [pc, #84]	; (800426c <delay_sec+0x6c>)
 8004218:	786b      	ldrb	r3, [r5, #1]
 800421a:	b99b      	cbnz	r3, 8004244 <delay_sec+0x44>
 800421c:	1e44      	subs	r4, r0, #1
 800421e:	b2a4      	uxth	r4, r4
 8004220:	b18e      	cbz	r6, 8004246 <delay_sec+0x46>
	while (i-- > 0) {
 8004222:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004226:	e008      	b.n	800423a <delay_sec+0x3a>
 8004228:	3c01      	subs	r4, #1
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
		}
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 800422a:	2032      	movs	r0, #50	; 0x32
	while (i-- > 0) {
 800422c:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 800422e:	f7ff fc01 	bl	8003a34 <_delay_ms>
	while (i-- > 0) {
 8004232:	42b4      	cmp	r4, r6
 8004234:	d006      	beq.n	8004244 <delay_sec+0x44>
		if (sys.abort) { return; }
 8004236:	786b      	ldrb	r3, [r5, #1]
 8004238:	b9ab      	cbnz	r3, 8004266 <delay_sec+0x66>
		  protocol_exec_rt_system();
 800423a:	f001 f8df 	bl	80053fc <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 800423e:	78ab      	ldrb	r3, [r5, #2]
 8004240:	079b      	lsls	r3, r3, #30
 8004242:	d5f1      	bpl.n	8004228 <delay_sec+0x28>
 8004244:	bd70      	pop	{r4, r5, r6, pc}
	while (i-- > 0) {
 8004246:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800424a:	e001      	b.n	8004250 <delay_sec+0x50>
		if (sys.abort) { return; }
 800424c:	786b      	ldrb	r3, [r5, #1]
 800424e:	b94b      	cbnz	r3, 8004264 <delay_sec+0x64>
	while (i-- > 0) {
 8004250:	3c01      	subs	r4, #1
			protocol_execute_realtime();
 8004252:	f001 fdf5 	bl	8005e40 <protocol_execute_realtime>
	while (i-- > 0) {
 8004256:	b2a4      	uxth	r4, r4
		_delay_ms(DWELL_TIME_STEP); // Delay DWELL_TIME_STEP increment
 8004258:	2032      	movs	r0, #50	; 0x32
 800425a:	f7ff fbeb 	bl	8003a34 <_delay_ms>
	while (i-- > 0) {
 800425e:	42b4      	cmp	r4, r6
 8004260:	d1f4      	bne.n	800424c <delay_sec+0x4c>
 8004262:	e7ef      	b.n	8004244 <delay_sec+0x44>
 8004264:	bd70      	pop	{r4, r5, r6, pc}
 8004266:	bd70      	pop	{r4, r5, r6, pc}
 8004268:	41a00000 	.word	0x41a00000
 800426c:	20001188 	.word	0x20001188

08004270 <delay_ms>:

// Delays variable defined milliseconds. Compiler compatibility fix for _delay_ms(),
// which only accepts constants in future compiler releases.
void delay_ms(uint16_t ms)
{
  while ( ms-- ) { _delay_ms(1); }
 8004270:	b160      	cbz	r0, 800428c <delay_ms+0x1c>
{
 8004272:	b538      	push	{r3, r4, r5, lr}
  while ( ms-- ) { _delay_ms(1); }
 8004274:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004278:	1e44      	subs	r4, r0, #1
 800427a:	b2a4      	uxth	r4, r4
 800427c:	3c01      	subs	r4, #1
 800427e:	2001      	movs	r0, #1
 8004280:	b2a4      	uxth	r4, r4
 8004282:	f7ff fbd7 	bl	8003a34 <_delay_ms>
 8004286:	42ac      	cmp	r4, r5
 8004288:	d1f8      	bne.n	800427c <delay_ms+0xc>
 800428a:	bd38      	pop	{r3, r4, r5, pc}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop

08004290 <hypot_f>:
}


// Simple hypotenuse computation function.
float hypot_f(float x, float y) { return(sqrtf(x*x + y*y)); }
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	460d      	mov	r5, r1
 8004294:	4601      	mov	r1, r0
 8004296:	f7fc fd0b 	bl	8000cb0 <__aeabi_fmul>
 800429a:	4629      	mov	r1, r5
 800429c:	4604      	mov	r4, r0
 800429e:	4628      	mov	r0, r5
 80042a0:	f7fc fd06 	bl	8000cb0 <__aeabi_fmul>
 80042a4:	4601      	mov	r1, r0
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7fc fbfa 	bl	8000aa0 <__addsf3>
 80042ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042b0:	f006 bf6a 	b.w	800b188 <sqrtf>

080042b4 <convert_delta_vector_to_unit_vector>:


float convert_delta_vector_to_unit_vector(float *vector)
{
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	4604      	mov	r4, r0
  uint8_t idx;
  float magnitude = 0.0f;
  for (idx=0; idx<N_AXIS; idx++) {
    if (vector[idx] != 0.0f) {
 80042b8:	6847      	ldr	r7, [r0, #4]
 80042ba:	2100      	movs	r1, #0
 80042bc:	4638      	mov	r0, r7
 80042be:	6826      	ldr	r6, [r4, #0]
 80042c0:	68a5      	ldr	r5, [r4, #8]
 80042c2:	f7fc fe89 	bl	8000fd8 <__aeabi_fcmpeq>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d162      	bne.n	8004390 <convert_delta_vector_to_unit_vector+0xdc>
      magnitude += vector[idx]*vector[idx];
 80042ca:	4639      	mov	r1, r7
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7fc fcef 	bl	8000cb0 <__aeabi_fmul>
 80042d2:	2100      	movs	r1, #0
 80042d4:	4607      	mov	r7, r0
 80042d6:	4628      	mov	r0, r5
 80042d8:	f7fc fe7e 	bl	8000fd8 <__aeabi_fcmpeq>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d15e      	bne.n	800439e <convert_delta_vector_to_unit_vector+0xea>
 80042e0:	4629      	mov	r1, r5
 80042e2:	4628      	mov	r0, r5
 80042e4:	f7fc fce4 	bl	8000cb0 <__aeabi_fmul>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4638      	mov	r0, r7
 80042ec:	f7fc fbd8 	bl	8000aa0 <__addsf3>
 80042f0:	2100      	movs	r1, #0
 80042f2:	4605      	mov	r5, r0
 80042f4:	4630      	mov	r0, r6
 80042f6:	f7fc fe6f 	bl	8000fd8 <__aeabi_fcmpeq>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d155      	bne.n	80043aa <convert_delta_vector_to_unit_vector+0xf6>
 80042fe:	4631      	mov	r1, r6
 8004300:	4630      	mov	r0, r6
 8004302:	f7fc fcd5 	bl	8000cb0 <__aeabi_fmul>
 8004306:	4601      	mov	r1, r0
 8004308:	4628      	mov	r0, r5
 800430a:	f7fc fbc9 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 800430e:	68e5      	ldr	r5, [r4, #12]
 8004310:	4607      	mov	r7, r0
 8004312:	2100      	movs	r1, #0
 8004314:	4628      	mov	r0, r5
 8004316:	f7fc fe5f 	bl	8000fd8 <__aeabi_fcmpeq>
 800431a:	2800      	cmp	r0, #0
 800431c:	d143      	bne.n	80043a6 <convert_delta_vector_to_unit_vector+0xf2>
      magnitude += vector[idx]*vector[idx];
 800431e:	4629      	mov	r1, r5
 8004320:	4628      	mov	r0, r5
 8004322:	f7fc fcc5 	bl	8000cb0 <__aeabi_fmul>
 8004326:	4639      	mov	r1, r7
 8004328:	f7fc fbba 	bl	8000aa0 <__addsf3>
    if (vector[idx] != 0.0f) {
 800432c:	6925      	ldr	r5, [r4, #16]
 800432e:	4607      	mov	r7, r0
 8004330:	2100      	movs	r1, #0
 8004332:	4628      	mov	r0, r5
 8004334:	f7fc fe50 	bl	8000fd8 <__aeabi_fcmpeq>
 8004338:	2800      	cmp	r0, #0
 800433a:	d132      	bne.n	80043a2 <convert_delta_vector_to_unit_vector+0xee>
      magnitude += vector[idx]*vector[idx];
 800433c:	4629      	mov	r1, r5
 800433e:	4628      	mov	r0, r5
 8004340:	f7fc fcb6 	bl	8000cb0 <__aeabi_fmul>
 8004344:	4639      	mov	r1, r7
 8004346:	f7fc fbab 	bl	8000aa0 <__addsf3>
    }
  }
  magnitude = sqrtf(magnitude);
 800434a:	f006 ff1d 	bl	800b188 <sqrtf>
 800434e:	4607      	mov	r7, r0
  float inv_magnitude = 1.0f/magnitude;
 8004350:	4601      	mov	r1, r0
 8004352:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004356:	f7fc fd5f 	bl	8000e18 <__aeabi_fdiv>
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 800435a:	4631      	mov	r1, r6
  float inv_magnitude = 1.0f/magnitude;
 800435c:	4605      	mov	r5, r0
  for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 800435e:	f7fc fca7 	bl	8000cb0 <__aeabi_fmul>
 8004362:	4629      	mov	r1, r5
 8004364:	6020      	str	r0, [r4, #0]
 8004366:	6860      	ldr	r0, [r4, #4]
 8004368:	f7fc fca2 	bl	8000cb0 <__aeabi_fmul>
 800436c:	4629      	mov	r1, r5
 800436e:	6060      	str	r0, [r4, #4]
 8004370:	68a0      	ldr	r0, [r4, #8]
 8004372:	f7fc fc9d 	bl	8000cb0 <__aeabi_fmul>
 8004376:	4629      	mov	r1, r5
 8004378:	60a0      	str	r0, [r4, #8]
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	f7fc fc98 	bl	8000cb0 <__aeabi_fmul>
 8004380:	4629      	mov	r1, r5
 8004382:	60e0      	str	r0, [r4, #12]
 8004384:	6920      	ldr	r0, [r4, #16]
 8004386:	f7fc fc93 	bl	8000cb0 <__aeabi_fmul>
 800438a:	6120      	str	r0, [r4, #16]
  return(magnitude);
}
 800438c:	4638      	mov	r0, r7
 800438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004390:	2100      	movs	r1, #0
 8004392:	4628      	mov	r0, r5
 8004394:	2700      	movs	r7, #0
 8004396:	f7fc fe1f 	bl	8000fd8 <__aeabi_fcmpeq>
 800439a:	2800      	cmp	r0, #0
 800439c:	d0a0      	beq.n	80042e0 <convert_delta_vector_to_unit_vector+0x2c>
 800439e:	2100      	movs	r1, #0
 80043a0:	e7a3      	b.n	80042ea <convert_delta_vector_to_unit_vector+0x36>
 80043a2:	2000      	movs	r0, #0
 80043a4:	e7ce      	b.n	8004344 <convert_delta_vector_to_unit_vector+0x90>
 80043a6:	2000      	movs	r0, #0
 80043a8:	e7bd      	b.n	8004326 <convert_delta_vector_to_unit_vector+0x72>
 80043aa:	2100      	movs	r1, #0
 80043ac:	e7ac      	b.n	8004308 <convert_delta_vector_to_unit_vector+0x54>
 80043ae:	bf00      	nop

080043b0 <limit_value_by_axis_maximum>:


float limit_value_by_axis_maximum(float *max_value, float *unit_vec)
{
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t idx;
  float limit_value = SOME_LARGE_VALUE;
  for (idx=0; idx<N_AXIS; idx++) {
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80043b2:	680d      	ldr	r5, [r1, #0]
{
 80043b4:	460c      	mov	r4, r1
 80043b6:	4606      	mov	r6, r0
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80043b8:	2100      	movs	r1, #0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f7fc fe0c 	bl	8000fd8 <__aeabi_fcmpeq>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d152      	bne.n	800446a <limit_value_by_axis_maximum+0xba>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80043c4:	4629      	mov	r1, r5
 80043c6:	6830      	ldr	r0, [r6, #0]
 80043c8:	f7fc fd26 	bl	8000e18 <__aeabi_fdiv>
 80043cc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80043d0:	4628      	mov	r0, r5
 80043d2:	492b      	ldr	r1, [pc, #172]	; (8004480 <limit_value_by_axis_maximum+0xd0>)
 80043d4:	f7fc fe14 	bl	8001000 <__aeabi_fcmple>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d046      	beq.n	800446a <limit_value_by_axis_maximum+0xba>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 80043dc:	6867      	ldr	r7, [r4, #4]
 80043de:	2100      	movs	r1, #0
 80043e0:	4638      	mov	r0, r7
 80043e2:	f7fc fdf9 	bl	8000fd8 <__aeabi_fcmpeq>
 80043e6:	b958      	cbnz	r0, 8004400 <limit_value_by_axis_maximum+0x50>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 80043e8:	4639      	mov	r1, r7
 80043ea:	6870      	ldr	r0, [r6, #4]
 80043ec:	f7fc fd14 	bl	8000e18 <__aeabi_fdiv>
 80043f0:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80043f4:	4639      	mov	r1, r7
 80043f6:	4628      	mov	r0, r5
 80043f8:	f7fc fe02 	bl	8001000 <__aeabi_fcmple>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d03d      	beq.n	800447c <limit_value_by_axis_maximum+0xcc>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004400:	68a7      	ldr	r7, [r4, #8]
 8004402:	2100      	movs	r1, #0
 8004404:	4638      	mov	r0, r7
 8004406:	f7fc fde7 	bl	8000fd8 <__aeabi_fcmpeq>
 800440a:	b950      	cbnz	r0, 8004422 <limit_value_by_axis_maximum+0x72>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800440c:	4639      	mov	r1, r7
 800440e:	68b0      	ldr	r0, [r6, #8]
 8004410:	f7fc fd02 	bl	8000e18 <__aeabi_fdiv>
 8004414:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8004418:	4639      	mov	r1, r7
 800441a:	4628      	mov	r0, r5
 800441c:	f7fc fdf0 	bl	8001000 <__aeabi_fcmple>
 8004420:	b350      	cbz	r0, 8004478 <limit_value_by_axis_maximum+0xc8>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004422:	68e7      	ldr	r7, [r4, #12]
 8004424:	2100      	movs	r1, #0
 8004426:	4638      	mov	r0, r7
 8004428:	f7fc fdd6 	bl	8000fd8 <__aeabi_fcmpeq>
 800442c:	b950      	cbnz	r0, 8004444 <limit_value_by_axis_maximum+0x94>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800442e:	4639      	mov	r1, r7
 8004430:	68f0      	ldr	r0, [r6, #12]
 8004432:	f7fc fcf1 	bl	8000e18 <__aeabi_fdiv>
 8004436:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800443a:	4639      	mov	r1, r7
 800443c:	4628      	mov	r0, r5
 800443e:	f7fc fddf 	bl	8001000 <__aeabi_fcmple>
 8004442:	b1b8      	cbz	r0, 8004474 <limit_value_by_axis_maximum+0xc4>
    if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8004444:	6924      	ldr	r4, [r4, #16]
 8004446:	2100      	movs	r1, #0
 8004448:	4620      	mov	r0, r4
 800444a:	f7fc fdc5 	bl	8000fd8 <__aeabi_fcmpeq>
 800444e:	b950      	cbnz	r0, 8004466 <limit_value_by_axis_maximum+0xb6>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004450:	4621      	mov	r1, r4
 8004452:	6930      	ldr	r0, [r6, #16]
 8004454:	f7fc fce0 	bl	8000e18 <__aeabi_fdiv>
 8004458:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800445c:	4621      	mov	r1, r4
 800445e:	4628      	mov	r0, r5
 8004460:	f7fc fdce 	bl	8001000 <__aeabi_fcmple>
 8004464:	b118      	cbz	r0, 800446e <limit_value_by_axis_maximum+0xbe>
    }
  }
  return(limit_value);
}
 8004466:	4628      	mov	r0, r5
 8004468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  float limit_value = SOME_LARGE_VALUE;
 800446a:	4d05      	ldr	r5, [pc, #20]	; (8004480 <limit_value_by_axis_maximum+0xd0>)
 800446c:	e7b6      	b.n	80043dc <limit_value_by_axis_maximum+0x2c>
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 800446e:	4625      	mov	r5, r4
}
 8004470:	4628      	mov	r0, r5
 8004472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      limit_value = min(limit_value,fabsf(max_value[idx]/unit_vec[idx]));
 8004474:	463d      	mov	r5, r7
 8004476:	e7e5      	b.n	8004444 <limit_value_by_axis_maximum+0x94>
 8004478:	463d      	mov	r5, r7
 800447a:	e7d2      	b.n	8004422 <limit_value_by_axis_maximum+0x72>
 800447c:	463d      	mov	r5, r7
 800447e:	e7bf      	b.n	8004400 <limit_value_by_axis_maximum+0x50>
 8004480:	7f7fffff 	.word	0x7f7fffff

08004484 <planner_recalculate>:
  to compute an optimal plan, so select carefully. The Arduino 328p memory is already maxed out, but future
  ARM versions should have enough memory and speed for look-ahead blocks numbering up to a hundred or more.

*/
static void planner_recalculate()
{
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8004488:	4b77      	ldr	r3, [pc, #476]	; (8004668 <planner_recalculate+0x1e4>)
{
 800448a:	b083      	sub	sp, #12
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	9300      	str	r3, [sp, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004490:	2b00      	cmp	r3, #0
 8004492:	d075      	beq.n	8004580 <planner_recalculate+0xfc>

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 8004494:	4a75      	ldr	r2, [pc, #468]	; (800466c <planner_recalculate+0x1e8>)
  block_index--;
 8004496:	1e5c      	subs	r4, r3, #1
  if (block_index == block_buffer_planned) { return; }
 8004498:	f892 8000 	ldrb.w	r8, [r2]
  block_index--;
 800449c:	b2e4      	uxtb	r4, r4
  if (block_index == block_buffer_planned) { return; }
 800449e:	45a0      	cmp	r8, r4
 80044a0:	9201      	str	r2, [sp, #4]
 80044a2:	d06a      	beq.n	800457a <planner_recalculate+0xf6>
  // Reverse Pass: Coarsely maximize all possible deceleration curves back-planning from the last
  // block in buffer. Cease planning when the last optimal planned or tail pointer is reached.
  // NOTE: Forward pass will later refine and correct the reverse pass to create an optimal plan.
  float entry_speed_sqr;
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];
 80044a4:	4d72      	ldr	r5, [pc, #456]	; (8004670 <planner_recalculate+0x1ec>)
 80044a6:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 80044aa:	eb05 0787 	add.w	r7, r5, r7, lsl #2

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80044ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044b2:	f7fc fbfd 	bl	8000cb0 <__aeabi_fmul>
 80044b6:	4601      	mov	r1, r0
 80044b8:	f7fc faf2 	bl	8000aa0 <__addsf3>
 80044bc:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80044c0:	4681      	mov	r9, r0
 80044c2:	4659      	mov	r1, fp
 80044c4:	f107 0a1c 	add.w	sl, r7, #28
 80044c8:	f7fc fd9a 	bl	8001000 <__aeabi_fcmple>
 80044cc:	b900      	cbnz	r0, 80044d0 <planner_recalculate+0x4c>
 80044ce:	46d9      	mov	r9, fp
 80044d0:	f8ca 9000 	str.w	r9, [sl]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 80044d4:	f04f 0b23 	mov.w	fp, #35	; 0x23
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d06f      	beq.n	80045bc <planner_recalculate+0x138>
 80044dc:	9b00      	ldr	r3, [sp, #0]
 80044de:	3b02      	subs	r3, #2
 80044e0:	fa5f fb83 	uxtb.w	fp, r3
 80044e4:	e06a      	b.n	80045bc <planner_recalculate+0x138>
 80044e6:	4b60      	ldr	r3, [pc, #384]	; (8004668 <planner_recalculate+0x1e4>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	9300      	str	r3, [sp, #0]
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80044ec:	ebcb 130b 	rsb	r3, fp, fp, lsl #4
  block_index++;
 80044f0:	f10b 0401 	add.w	r4, fp, #1
 80044f4:	b2e4      	uxtb	r4, r4
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80044f6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 80044fa:	9b01      	ldr	r3, [sp, #4]
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80044fc:	2c24      	cmp	r4, #36	; 0x24
 80044fe:	bf08      	it	eq
 8004500:	2400      	moveq	r4, #0
 8004502:	f893 b000 	ldrb.w	fp, [r3]
 8004506:	e02e      	b.n	8004566 <planner_recalculate+0xe2>
    next = &block_buffer[block_index];

    // Any acceleration detected in the forward pass automatically moves the optimal planned
    // pointer forward, since everything before this is all optimal. In other words, nothing
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 8004508:	f8da 901c 	ldr.w	r9, [sl, #28]
 800450c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004510:	4648      	mov	r0, r9
 8004512:	4641      	mov	r1, r8
 8004514:	f7fc fd6a 	bl	8000fec <__aeabi_fcmplt>
 8004518:	b1a8      	cbz	r0, 8004546 <planner_recalculate+0xc2>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 800451a:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800451e:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8004522:	f7fc fbc5 	bl	8000cb0 <__aeabi_fmul>
 8004526:	4601      	mov	r1, r0
 8004528:	f7fc faba 	bl	8000aa0 <__addsf3>
 800452c:	4649      	mov	r1, r9
 800452e:	f7fc fab7 	bl	8000aa0 <__addsf3>
 8004532:	4681      	mov	r9, r0
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
 8004534:	4601      	mov	r1, r0
 8004536:	4640      	mov	r0, r8
 8004538:	f7fc fd76 	bl	8001028 <__aeabi_fcmpgt>
 800453c:	b118      	cbz	r0, 8004546 <planner_recalculate+0xc2>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 800453e:	46c8      	mov	r8, r9
 8004540:	46a3      	mov	fp, r4
 8004542:	f8c7 901c 	str.w	r9, [r7, #28]

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8004546:	1b32      	subs	r2, r6, r4
 8004548:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800454c:	6a10      	ldr	r0, [r2, #32]
 800454e:	4641      	mov	r1, r8
 8004550:	f7fc fd42 	bl	8000fd8 <__aeabi_fcmpeq>
  block_index++;
 8004554:	1c63      	adds	r3, r4, #1
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 8004556:	2800      	cmp	r0, #0
 8004558:	bf18      	it	ne
 800455a:	46a3      	movne	fp, r4
  block_index++;
 800455c:	b2dc      	uxtb	r4, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800455e:	2c24      	cmp	r4, #36	; 0x24
 8004560:	bf08      	it	eq
 8004562:	2400      	moveq	r4, #0
 8004564:	46ba      	mov	sl, r7
  while (block_index != block_buffer_head) {
 8004566:	9b00      	ldr	r3, [sp, #0]
    next = &block_buffer[block_index];
 8004568:	0126      	lsls	r6, r4, #4
 800456a:	1b37      	subs	r7, r6, r4
  while (block_index != block_buffer_head) {
 800456c:	429c      	cmp	r4, r3
    next = &block_buffer[block_index];
 800456e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
  while (block_index != block_buffer_head) {
 8004572:	d1c9      	bne.n	8004508 <planner_recalculate+0x84>
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	f883 b000 	strb.w	fp, [r3]
    block_index = plan_next_block_index( block_index );
  }
}
 800457a:	b003      	add	sp, #12
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block_index == block_buffer_planned) { return; }
 8004580:	4b3a      	ldr	r3, [pc, #232]	; (800466c <planner_recalculate+0x1e8>)
 8004582:	f893 8000 	ldrb.w	r8, [r3]
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	f1b8 0f23 	cmp.w	r8, #35	; 0x23
 800458c:	d0f5      	beq.n	800457a <planner_recalculate+0xf6>
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800458e:	4d38      	ldr	r5, [pc, #224]	; (8004670 <planner_recalculate+0x1ec>)
 8004590:	f8d5 1858 	ldr.w	r1, [r5, #2136]	; 0x858
 8004594:	f8d5 085c 	ldr.w	r0, [r5, #2140]	; 0x85c
 8004598:	f7fc fb8a 	bl	8000cb0 <__aeabi_fmul>
 800459c:	4601      	mov	r1, r0
 800459e:	f7fc fa7f 	bl	8000aa0 <__addsf3>
 80045a2:	f8d5 7854 	ldr.w	r7, [r5, #2132]	; 0x854
 80045a6:	4604      	mov	r4, r0
 80045a8:	4639      	mov	r1, r7
 80045aa:	f7fc fd29 	bl	8001000 <__aeabi_fcmple>
 80045ae:	b900      	cbnz	r0, 80045b2 <planner_recalculate+0x12e>
 80045b0:	463c      	mov	r4, r7
 80045b2:	f04f 0b22 	mov.w	fp, #34	; 0x22
  plan_block_t *current = &block_buffer[block_index];
 80045b6:	4f2f      	ldr	r7, [pc, #188]	; (8004674 <planner_recalculate+0x1f0>)
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 80045b8:	f8c5 4850 	str.w	r4, [r5, #2128]	; 0x850
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 80045bc:	45d8      	cmp	r8, fp
 80045be:	d045      	beq.n	800464c <planner_recalculate+0x1c8>
 80045c0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8004678 <planner_recalculate+0x1f4>
 80045c4:	e029      	b.n	800461a <planner_recalculate+0x196>
 80045c6:	fa5f fb82 	uxtb.w	fp, r2
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80045ca:	f899 2000 	ldrb.w	r2, [r9]
 80045ce:	455a      	cmp	r2, fp
 80045d0:	d033      	beq.n	800463a <planner_recalculate+0x1b6>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 80045d2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 80045d6:	eb05 0a86 	add.w	sl, r5, r6, lsl #2
 80045da:	f8da 6020 	ldr.w	r6, [sl, #32]
 80045de:	f8da 001c 	ldr.w	r0, [sl, #28]
 80045e2:	4631      	mov	r1, r6
 80045e4:	f7fc fcf8 	bl	8000fd8 <__aeabi_fcmpeq>
 80045e8:	b998      	cbnz	r0, 8004612 <planner_recalculate+0x18e>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80045ea:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80045ee:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80045f2:	f7fc fb5d 	bl	8000cb0 <__aeabi_fmul>
 80045f6:	4601      	mov	r1, r0
 80045f8:	f7fc fa52 	bl	8000aa0 <__addsf3>
 80045fc:	69f9      	ldr	r1, [r7, #28]
 80045fe:	f7fc fa4f 	bl	8000aa0 <__addsf3>
 8004602:	4607      	mov	r7, r0
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 8004604:	4601      	mov	r1, r0
 8004606:	4630      	mov	r0, r6
 8004608:	f7fc fd0e 	bl	8001028 <__aeabi_fcmpgt>
 800460c:	b1d8      	cbz	r0, 8004646 <planner_recalculate+0x1c2>
          current->entry_speed_sqr = entry_speed_sqr;
 800460e:	f8ca 701c 	str.w	r7, [sl, #28]
    while (block_index != block_buffer_planned) {
 8004612:	45c3      	cmp	fp, r8
 8004614:	4627      	mov	r7, r4
 8004616:	f43f af66 	beq.w	80044e6 <planner_recalculate+0x62>
      current = &block_buffer[block_index];
 800461a:	ebcb 140b 	rsb	r4, fp, fp, lsl #4
 800461e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8004622:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8004626:	465e      	mov	r6, fp
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8004628:	f1bb 0f00 	cmp.w	fp, #0
 800462c:	d1cb      	bne.n	80045c6 <planner_recalculate+0x142>
 800462e:	f04f 0b23 	mov.w	fp, #35	; 0x23
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8004632:	f899 2000 	ldrb.w	r2, [r9]
 8004636:	455a      	cmp	r2, fp
 8004638:	d1cb      	bne.n	80045d2 <planner_recalculate+0x14e>
 800463a:	f004 f98f 	bl	800895c <st_update_plan_block_parameters>
 800463e:	9b01      	ldr	r3, [sp, #4]
 8004640:	f893 8000 	ldrb.w	r8, [r3]
 8004644:	e7c5      	b.n	80045d2 <planner_recalculate+0x14e>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 8004646:	f8ca 601c 	str.w	r6, [sl, #28]
 800464a:	e7e2      	b.n	8004612 <planner_recalculate+0x18e>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 800464c:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <planner_recalculate+0x1f4>)
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	455a      	cmp	r2, fp
 8004652:	f47f af4b 	bne.w	80044ec <planner_recalculate+0x68>
 8004656:	f004 f981 	bl	800895c <st_update_plan_block_parameters>
 800465a:	4b03      	ldr	r3, [pc, #12]	; (8004668 <planner_recalculate+0x1e4>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	9b01      	ldr	r3, [sp, #4]
 8004662:	f893 b000 	ldrb.w	fp, [r3]
 8004666:	e741      	b.n	80044ec <planner_recalculate+0x68>
 8004668:	20000a60 	.word	0x20000a60
 800466c:	20000a61 	.word	0x20000a61
 8004670:	200001f0 	.word	0x200001f0
 8004674:	20000a24 	.word	0x20000a24
 8004678:	20000a62 	.word	0x20000a62

0800467c <plan_reset>:


void plan_reset()
{
 800467c:	b538      	push	{r3, r4, r5, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 800467e:	222c      	movs	r2, #44	; 0x2c
 8004680:	2100      	movs	r1, #0
 8004682:	4807      	ldr	r0, [pc, #28]	; (80046a0 <plan_reset+0x24>)
 8004684:	f006 fc5f 	bl	800af46 <memset>
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 8004688:	2300      	movs	r3, #0
  block_buffer_head = 0; // Empty = tail
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800468a:	2101      	movs	r1, #1
  block_buffer_tail = 0;
 800468c:	4d05      	ldr	r5, [pc, #20]	; (80046a4 <plan_reset+0x28>)
  block_buffer_head = 0; // Empty = tail
 800468e:	4c06      	ldr	r4, [pc, #24]	; (80046a8 <plan_reset+0x2c>)
  block_buffer_planned = 0; // = block_buffer_tail;
 8004690:	4806      	ldr	r0, [pc, #24]	; (80046ac <plan_reset+0x30>)
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <plan_reset+0x34>)
  block_buffer_tail = 0;
 8004694:	702b      	strb	r3, [r5, #0]
  block_buffer_head = 0; // Empty = tail
 8004696:	7023      	strb	r3, [r4, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8004698:	7003      	strb	r3, [r0, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800469a:	7011      	strb	r1, [r2, #0]
 800469c:	bd38      	pop	{r3, r4, r5, pc}
 800469e:	bf00      	nop
 80046a0:	20000a64 	.word	0x20000a64
 80046a4:	20000a62 	.word	0x20000a62
 80046a8:	20000a60 	.word	0x20000a60
 80046ac:	20000a61 	.word	0x20000a61
 80046b0:	20000a63 	.word	0x20000a63

080046b4 <plan_discard_current_block>:
}


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 80046b4:	4909      	ldr	r1, [pc, #36]	; (80046dc <plan_discard_current_block+0x28>)
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <plan_discard_current_block+0x2c>)
 80046b8:	780a      	ldrb	r2, [r1, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00c      	beq.n	80046da <plan_discard_current_block+0x26>
  block_index++;
 80046c0:	1c53      	adds	r3, r2, #1
 80046c2:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80046c4:	2b24      	cmp	r3, #36	; 0x24
 80046c6:	bf08      	it	eq
 80046c8:	2300      	moveq	r3, #0
{
 80046ca:	b410      	push	{r4}
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 80046cc:	4805      	ldr	r0, [pc, #20]	; (80046e4 <plan_discard_current_block+0x30>)
    block_buffer_tail = block_index;
 80046ce:	700b      	strb	r3, [r1, #0]
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 80046d0:	7804      	ldrb	r4, [r0, #0]
 80046d2:	4294      	cmp	r4, r2
 80046d4:	bf08      	it	eq
 80046d6:	7003      	strbeq	r3, [r0, #0]
  }
}
 80046d8:	bc10      	pop	{r4}
 80046da:	4770      	bx	lr
 80046dc:	20000a62 	.word	0x20000a62
 80046e0:	20000a60 	.word	0x20000a60
 80046e4:	20000a61 	.word	0x20000a61

080046e8 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <plan_get_system_motion_block+0x10>)
 80046ea:	4804      	ldr	r0, [pc, #16]	; (80046fc <plan_get_system_motion_block+0x14>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
}
 80046f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80046f6:	4770      	bx	lr
 80046f8:	20000a60 	.word	0x20000a60
 80046fc:	200001f0 	.word	0x200001f0

08004700 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <plan_get_current_block+0x1c>)
 8004702:	4a07      	ldr	r2, [pc, #28]	; (8004720 <plan_get_current_block+0x20>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	429a      	cmp	r2, r3
  return(&block_buffer[block_buffer_tail]);
 800470a:	bf1d      	ittte	ne
 800470c:	4805      	ldrne	r0, [pc, #20]	; (8004724 <plan_get_current_block+0x24>)
 800470e:	ebc3 1303 	rsbne	r3, r3, r3, lsl #4
 8004712:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8004716:	2000      	moveq	r0, #0
}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000a62 	.word	0x20000a62
 8004720:	20000a60 	.word	0x20000a60
 8004724:	200001f0 	.word	0x200001f0

08004728 <plan_get_exec_block_exit_speed_sqr>:


float plan_get_exec_block_exit_speed_sqr()
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <plan_get_exec_block_exit_speed_sqr+0x28>)
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <plan_get_exec_block_exit_speed_sqr+0x2c>)
  block_index++;
 800472c:	781b      	ldrb	r3, [r3, #0]
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800472e:	7812      	ldrb	r2, [r2, #0]
  block_index++;
 8004730:	3301      	adds	r3, #1
 8004732:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004734:	2b24      	cmp	r3, #36	; 0x24
 8004736:	bf08      	it	eq
 8004738:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800473a:	429a      	cmp	r2, r3
 800473c:	d006      	beq.n	800474c <plan_get_exec_block_exit_speed_sqr+0x24>
  return( block_buffer[block_index].entry_speed_sqr );
 800473e:	4a06      	ldr	r2, [pc, #24]	; (8004758 <plan_get_exec_block_exit_speed_sqr+0x30>)
 8004740:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8004744:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004748:	69d8      	ldr	r0, [r3, #28]
 800474a:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 800474c:	2000      	movs	r0, #0
}
 800474e:	4770      	bx	lr
 8004750:	20000a62 	.word	0x20000a62
 8004754:	20000a60 	.word	0x20000a60
 8004758:	200001f0 	.word	0x200001f0

0800475c <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <plan_check_full_buffer+0x14>)
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <plan_check_full_buffer+0x18>)
 8004760:	7810      	ldrb	r0, [r2, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	fab0 f080 	clz	r0, r0
 800476a:	0940      	lsrs	r0, r0, #5
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000a62 	.word	0x20000a62
 8004774:	20000a63 	.word	0x20000a63

08004778 <plan_compute_profile_nominal_speed>:


// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
float plan_compute_profile_nominal_speed(plan_block_t *block)
{
 8004778:	b538      	push	{r3, r4, r5, lr}
  float nominal_speed = block->programmed_rate;
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800477a:	7e83      	ldrb	r3, [r0, #26]
  float nominal_speed = block->programmed_rate;
 800477c:	6b45      	ldr	r5, [r0, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800477e:	07da      	lsls	r2, r3, #31
 8004780:	d514      	bpl.n	80047ac <plan_compute_profile_nominal_speed+0x34>
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <plan_compute_profile_nominal_speed+0x64>)
 8004784:	7a58      	ldrb	r0, [r3, #9]
 8004786:	f7fc fa3f 	bl	8000c08 <__aeabi_i2f>
 800478a:	4915      	ldr	r1, [pc, #84]	; (80047e0 <plan_compute_profile_nominal_speed+0x68>)
 800478c:	f7fc fa90 	bl	8000cb0 <__aeabi_fmul>
 8004790:	4629      	mov	r1, r5
 8004792:	f7fc fa8d 	bl	8000cb0 <__aeabi_fmul>
 8004796:	4604      	mov	r4, r0
 8004798:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800479c:	4620      	mov	r0, r4
 800479e:	f7fc fc39 	bl	8001014 <__aeabi_fcmpge>
 80047a2:	b908      	cbnz	r0, 80047a8 <plan_compute_profile_nominal_speed+0x30>
 80047a4:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
}
 80047a8:	4620      	mov	r0, r4
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80047ac:	075b      	lsls	r3, r3, #29
 80047ae:	4604      	mov	r4, r0
 80047b0:	d40b      	bmi.n	80047ca <plan_compute_profile_nominal_speed+0x52>
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <plan_compute_profile_nominal_speed+0x64>)
 80047b4:	7a18      	ldrb	r0, [r3, #8]
 80047b6:	f7fc fa27 	bl	8000c08 <__aeabi_i2f>
 80047ba:	4909      	ldr	r1, [pc, #36]	; (80047e0 <plan_compute_profile_nominal_speed+0x68>)
 80047bc:	f7fc fa78 	bl	8000cb0 <__aeabi_fmul>
 80047c0:	4601      	mov	r1, r0
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7fc fa74 	bl	8000cb0 <__aeabi_fmul>
 80047c8:	4605      	mov	r5, r0
 80047ca:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80047cc:	4629      	mov	r1, r5
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fc fc16 	bl	8001000 <__aeabi_fcmple>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1df      	bne.n	8004798 <plan_compute_profile_nominal_speed+0x20>
 80047d8:	462c      	mov	r4, r5
 80047da:	e7dd      	b.n	8004798 <plan_compute_profile_nominal_speed+0x20>
 80047dc:	20001188 	.word	0x20001188
 80047e0:	3c23d70a 	.word	0x3c23d70a

080047e4 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80047e8:	4d35      	ldr	r5, [pc, #212]	; (80048c0 <plan_update_velocity_profile_parameters+0xdc>)
  uint8_t block_index = block_buffer_tail;
 80047ea:	4a36      	ldr	r2, [pc, #216]	; (80048c4 <plan_update_velocity_profile_parameters+0xe0>)
 80047ec:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <plan_update_velocity_profile_parameters+0xe4>)
{
 80047ee:	b083      	sub	sp, #12
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80047f0:	7a28      	ldrb	r0, [r5, #8]
  uint8_t block_index = block_buffer_tail;
 80047f2:	7814      	ldrb	r4, [r2, #0]
 80047f4:	f893 b000 	ldrb.w	fp, [r3]
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 80047f8:	f7fc fa06 	bl	8000c08 <__aeabi_i2f>
 80047fc:	4933      	ldr	r1, [pc, #204]	; (80048cc <plan_update_velocity_profile_parameters+0xe8>)
 80047fe:	f7fc fa57 	bl	8000cb0 <__aeabi_fmul>
 8004802:	9001      	str	r0, [sp, #4]
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004804:	7a68      	ldrb	r0, [r5, #9]
 8004806:	f7fc f9ff 	bl	8000c08 <__aeabi_i2f>
 800480a:	4930      	ldr	r1, [pc, #192]	; (80048cc <plan_update_velocity_profile_parameters+0xe8>)
 800480c:	f7fc fa50 	bl	8000cb0 <__aeabi_fmul>
  plan_block_t *block;
  float nominal_speed;
  float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8004810:	4f2f      	ldr	r7, [pc, #188]	; (80048d0 <plan_update_velocity_profile_parameters+0xec>)
 8004812:	9000      	str	r0, [sp, #0]
  while (block_index != block_buffer_head) {
    block = &block_buffer[block_index];
 8004814:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80048d8 <plan_update_velocity_profile_parameters+0xf4>
 8004818:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
  while (block_index != block_buffer_head) {
 800481c:	e023      	b.n	8004866 <plan_update_velocity_profile_parameters+0x82>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 800481e:	4641      	mov	r1, r8
 8004820:	9800      	ldr	r0, [sp, #0]
 8004822:	f7fc fa45 	bl	8000cb0 <__aeabi_fmul>
 8004826:	4605      	mov	r5, r0
 8004828:	4649      	mov	r1, r9
 800482a:	4628      	mov	r0, r5
 800482c:	f7fc fbf2 	bl	8001014 <__aeabi_fcmpge>
 8004830:	b900      	cbnz	r0, 8004834 <plan_update_velocity_profile_parameters+0x50>
 8004832:	464d      	mov	r5, r9
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004834:	4629      	mov	r1, r5
 8004836:	4638      	mov	r0, r7
 8004838:	f8d6 802c 	ldr.w	r8, [r6, #44]	; 0x2c
 800483c:	f7fc fbd6 	bl	8000fec <__aeabi_fcmplt>
 8004840:	2800      	cmp	r0, #0
 8004842:	d031      	beq.n	80048a8 <plan_update_velocity_profile_parameters+0xc4>
 8004844:	4639      	mov	r1, r7
 8004846:	4638      	mov	r0, r7
 8004848:	f7fc fa32 	bl	8000cb0 <__aeabi_fmul>
 800484c:	4607      	mov	r7, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 800484e:	4641      	mov	r1, r8
 8004850:	4638      	mov	r0, r7
 8004852:	f7fc fbe9 	bl	8001028 <__aeabi_fcmpgt>
 8004856:	bb20      	cbnz	r0, 80048a2 <plan_update_velocity_profile_parameters+0xbe>
 8004858:	6237      	str	r7, [r6, #32]
  block_index++;
 800485a:	3401      	adds	r4, #1
 800485c:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 800485e:	2c24      	cmp	r4, #36	; 0x24
 8004860:	bf08      	it	eq
 8004862:	2400      	moveq	r4, #0
 8004864:	462f      	mov	r7, r5
  while (block_index != block_buffer_head) {
 8004866:	455c      	cmp	r4, fp
 8004868:	d024      	beq.n	80048b4 <plan_update_velocity_profile_parameters+0xd0>
    block = &block_buffer[block_index];
 800486a:	0125      	lsls	r5, r4, #4
 800486c:	1b2e      	subs	r6, r5, r4
 800486e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004872:	7eb3      	ldrb	r3, [r6, #26]
  float nominal_speed = block->programmed_rate;
 8004874:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004878:	07da      	lsls	r2, r3, #31
 800487a:	d4d0      	bmi.n	800481e <plan_update_velocity_profile_parameters+0x3a>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 800487c:	075b      	lsls	r3, r3, #29
 800487e:	d404      	bmi.n	800488a <plan_update_velocity_profile_parameters+0xa6>
 8004880:	4640      	mov	r0, r8
 8004882:	9901      	ldr	r1, [sp, #4]
 8004884:	f7fc fa14 	bl	8000cb0 <__aeabi_fmul>
 8004888:	4680      	mov	r8, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 800488a:	1b2d      	subs	r5, r5, r4
 800488c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8004890:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004892:	4641      	mov	r1, r8
 8004894:	4628      	mov	r0, r5
 8004896:	f7fc fbb3 	bl	8001000 <__aeabi_fcmple>
 800489a:	2800      	cmp	r0, #0
 800489c:	d1c4      	bne.n	8004828 <plan_update_velocity_profile_parameters+0x44>
 800489e:	4645      	mov	r5, r8
 80048a0:	e7c2      	b.n	8004828 <plan_update_velocity_profile_parameters+0x44>
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 80048a2:	f8c6 8020 	str.w	r8, [r6, #32]
 80048a6:	e7d8      	b.n	800485a <plan_update_velocity_profile_parameters+0x76>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 80048a8:	4629      	mov	r1, r5
 80048aa:	4628      	mov	r0, r5
 80048ac:	f7fc fa00 	bl	8000cb0 <__aeabi_fmul>
 80048b0:	4607      	mov	r7, r0
 80048b2:	e7cc      	b.n	800484e <plan_update_velocity_profile_parameters+0x6a>
    nominal_speed = plan_compute_profile_nominal_speed(block);
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <plan_update_velocity_profile_parameters+0xf0>)
 80048b6:	629f      	str	r7, [r3, #40]	; 0x28
}
 80048b8:	b003      	add	sp, #12
 80048ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048be:	bf00      	nop
 80048c0:	20001188 	.word	0x20001188
 80048c4:	20000a62 	.word	0x20000a62
 80048c8:	20000a60 	.word	0x20000a60
 80048cc:	3c23d70a 	.word	0x3c23d70a
 80048d0:	7f7fffff 	.word	0x7f7fffff
 80048d4:	20000a64 	.word	0x20000a64
 80048d8:	200001f0 	.word	0x200001f0

080048dc <plan_buffer_line>:
   The system motion condition tells the planner to plan a motion in the always unused block buffer
   head. It avoids changing the planner state and preserves the buffer to ensure subsequent gcode
   motions are still planned correctly, while the stepper module only points to the block buffer head
   to execute the special system motion. */
uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
{
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 80048e0:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <plan_buffer_line+0x200>)
{
 80048e2:	468b      	mov	fp, r1
  plan_block_t *block = &block_buffer[block_buffer_head];
 80048e4:	781e      	ldrb	r6, [r3, #0]
 80048e6:	4d7e      	ldr	r5, [pc, #504]	; (8004ae0 <plan_buffer_line+0x204>)
 80048e8:	0137      	lsls	r7, r6, #4
 80048ea:	eba7 0806 	sub.w	r8, r7, r6
 80048ee:	eb05 0888 	add.w	r8, r5, r8, lsl #2
{
 80048f2:	b097      	sub	sp, #92	; 0x5c
 80048f4:	4682      	mov	sl, r0
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 80048f6:	223c      	movs	r2, #60	; 0x3c
 80048f8:	2100      	movs	r1, #0
 80048fa:	4640      	mov	r0, r8
 80048fc:	f006 fb23 	bl	800af46 <memset>
  block->condition = pl_data->condition;
 8004900:	f89b 3008 	ldrb.w	r3, [fp, #8]
  #ifdef VARIABLE_SPINDLE
    block->spindle_speed = pl_data->spindle_speed;
 8004904:	f8db 2004 	ldr.w	r2, [fp, #4]
  int32_t target_steps[N_AXIS], position_steps[N_AXIS];
  float unit_vec[N_AXIS], delta_mm;
  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) {
 8004908:	079c      	lsls	r4, r3, #30
#ifdef COREXY
    position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
    position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
    position_steps[Z_AXIS] = sys_position[Z_AXIS];
#else
    memcpy(position_steps, sys_position, sizeof(sys_position));
 800490a:	bf4c      	ite	mi
 800490c:	f8df e1d8 	ldrmi.w	lr, [pc, #472]	; 8004ae8 <plan_buffer_line+0x20c>
#endif
  }
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004910:	f8df e1d0 	ldrpl.w	lr, [pc, #464]	; 8004ae4 <plan_buffer_line+0x208>
  block->condition = pl_data->condition;
 8004914:	f888 301a 	strb.w	r3, [r8, #26]
    block->spindle_speed = pl_data->spindle_speed;
 8004918:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 800491c:	ac07      	add	r4, sp, #28
 800491e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8004922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        delta_mm = (target_steps[X_AXIS]-position_steps[X_AXIS] - target_steps[Y_AXIS]+position_steps[Y_AXIS])/settings.steps_per_mm[idx];
      } else {
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004924:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8004aec <plan_buffer_line+0x210>
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004928:	f8de 3000 	ldr.w	r3, [lr]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 800492c:	f8d9 2000 	ldr.w	r2, [r9]
 8004930:	f8da 1000 	ldr.w	r1, [sl]
  else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8004934:	6023      	str	r3, [r4, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004936:	4610      	mov	r0, r2
 8004938:	9201      	str	r2, [sp, #4]
 800493a:	f7fc f9b9 	bl	8000cb0 <__aeabi_fmul>
 800493e:	f006 fbbf 	bl	800b0c0 <lroundf>
 8004942:	4686      	mov	lr, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004944:	1bb9      	subs	r1, r7, r6
 8004946:	9807      	ldr	r0, [sp, #28]
 8004948:	0089      	lsls	r1, r1, #2
 800494a:	186b      	adds	r3, r5, r1
 800494c:	ebae 0000 	sub.w	r0, lr, r0
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004950:	695a      	ldr	r2, [r3, #20]
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004952:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
 8004956:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800495a:	4294      	cmp	r4, r2
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800495c:	506c      	str	r4, [r5, r1]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 800495e:	bf38      	it	cc
 8004960:	4614      	movcc	r4, r2
 8004962:	615c      	str	r4, [r3, #20]
 8004964:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004966:	f8cd e008 	str.w	lr, [sp, #8]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 800496a:	f7fc f94d 	bl	8000c08 <__aeabi_i2f>
 800496e:	9a01      	ldr	r2, [sp, #4]
 8004970:	4611      	mov	r1, r2
 8004972:	f7fc fa51 	bl	8000e18 <__aeabi_fdiv>
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004976:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004978:	900c      	str	r0, [sp, #48]	; 0x30
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 800497a:	f7fc fb37 	bl	8000fec <__aeabi_fcmplt>
 800497e:	9b00      	ldr	r3, [sp, #0]
 8004980:	2800      	cmp	r0, #0
 8004982:	f040 814f 	bne.w	8004c24 <plan_buffer_line+0x348>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004986:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800498a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800498e:	4610      	mov	r0, r2
 8004990:	9201      	str	r2, [sp, #4]
 8004992:	f7fc f98d 	bl	8000cb0 <__aeabi_fmul>
 8004996:	f006 fb93 	bl	800b0c0 <lroundf>
 800499a:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 800499c:	9808      	ldr	r0, [sp, #32]
 800499e:	1bbb      	subs	r3, r7, r6
 80049a0:	1a08      	subs	r0, r1, r0
 80049a2:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80049a6:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80049aa:	4574      	cmp	r4, lr
 80049ac:	bf38      	it	cc
 80049ae:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80049b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80049b4:	f8c3 e004 	str.w	lr, [r3, #4]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80049b8:	615c      	str	r4, [r3, #20]
 80049ba:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80049bc:	9103      	str	r1, [sp, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 80049be:	f7fc f923 	bl	8000c08 <__aeabi_i2f>
 80049c2:	9a01      	ldr	r2, [sp, #4]
 80049c4:	4611      	mov	r1, r2
 80049c6:	f7fc fa27 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049ca:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 80049cc:	900d      	str	r0, [sp, #52]	; 0x34
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 80049ce:	f7fc fb0d 	bl	8000fec <__aeabi_fcmplt>
 80049d2:	9b00      	ldr	r3, [sp, #0]
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f040 8131 	bne.w	8004c3c <plan_buffer_line+0x360>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 80049da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80049de:	f8da 1008 	ldr.w	r1, [sl, #8]
 80049e2:	4610      	mov	r0, r2
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	f7fc f963 	bl	8000cb0 <__aeabi_fmul>
 80049ea:	f006 fb69 	bl	800b0c0 <lroundf>
 80049ee:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 80049f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049f2:	1bbb      	subs	r3, r7, r6
 80049f4:	1a08      	subs	r0, r1, r0
 80049f6:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 80049fa:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 80049fe:	4574      	cmp	r4, lr
 8004a00:	bf38      	it	cc
 8004a02:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004a04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004a08:	f8c3 e008 	str.w	lr, [r3, #8]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004a0c:	615c      	str	r4, [r3, #20]
 8004a0e:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004a10:	9104      	str	r1, [sp, #16]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004a12:	f7fc f8f9 	bl	8000c08 <__aeabi_i2f>
 8004a16:	9a01      	ldr	r2, [sp, #4]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	f7fc f9fd 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004a1e:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004a20:	900e      	str	r0, [sp, #56]	; 0x38
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004a22:	f7fc fae3 	bl	8000fec <__aeabi_fcmplt>
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f040 8101 	bne.w	8004c30 <plan_buffer_line+0x354>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004a2e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8004a32:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004a36:	4610      	mov	r0, r2
 8004a38:	9201      	str	r2, [sp, #4]
 8004a3a:	f7fc f939 	bl	8000cb0 <__aeabi_fmul>
 8004a3e:	f006 fb3f 	bl	800b0c0 <lroundf>
 8004a42:	4601      	mov	r1, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004a44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a46:	1bbb      	subs	r3, r7, r6
 8004a48:	1a08      	subs	r0, r1, r0
 8004a4a:	ea80 7ee0 	eor.w	lr, r0, r0, asr #31
 8004a4e:	ebae 7ee0 	sub.w	lr, lr, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004a52:	4574      	cmp	r4, lr
 8004a54:	bf38      	it	cc
 8004a56:	4674      	movcc	r4, lr
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004a58:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004a5c:	f8c3 e00c 	str.w	lr, [r3, #12]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004a60:	615c      	str	r4, [r3, #20]
 8004a62:	9300      	str	r3, [sp, #0]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004a64:	9105      	str	r1, [sp, #20]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004a66:	f7fc f8cf 	bl	8000c08 <__aeabi_i2f>
 8004a6a:	9a01      	ldr	r2, [sp, #4]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	f7fc f9d3 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004a72:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004a74:	900f      	str	r0, [sp, #60]	; 0x3c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004a76:	f7fc fab9 	bl	8000fec <__aeabi_fcmplt>
 8004a7a:	9b00      	ldr	r3, [sp, #0]
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	f040 80cb 	bne.w	8004c18 <plan_buffer_line+0x33c>
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004a82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a86:	f8da 1010 	ldr.w	r1, [sl, #16]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f7fc f90f 	bl	8000cb0 <__aeabi_fmul>
 8004a92:	f006 fb15 	bl	800b0c0 <lroundf>
 8004a96:	4602      	mov	r2, r0
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004a98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004a9a:	eba7 0a06 	sub.w	sl, r7, r6
 8004a9e:	1a10      	subs	r0, r2, r0
 8004aa0:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8004aa4:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004aa8:	428c      	cmp	r4, r1
 8004aaa:	bf38      	it	cc
 8004aac:	460c      	movcc	r4, r1
      block->steps[idx] = abs(target_steps[idx]-position_steps[idx]);
 8004aae:	eb05 0a8a 	add.w	sl, r5, sl, lsl #2
 8004ab2:	f8ca 1010 	str.w	r1, [sl, #16]
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8004ab6:	f8ca 4014 	str.w	r4, [sl, #20]
      target_steps[idx] = lroundf(target[idx]*settings.steps_per_mm[idx]);
 8004aba:	9206      	str	r2, [sp, #24]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8004abc:	f7fc f8a4 	bl	8000c08 <__aeabi_i2f>
 8004ac0:	9b00      	ldr	r3, [sp, #0]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f7fc f9a8 	bl	8000e18 <__aeabi_fdiv>
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004ac8:	2100      	movs	r1, #0
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8004aca:	9010      	str	r0, [sp, #64]	; 0x40
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004acc:	f7fc fa8e 	bl	8000fec <__aeabi_fcmplt>
 8004ad0:	b970      	cbnz	r0, 8004af0 <plan_buffer_line+0x214>
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004ad2:	b9b4      	cbnz	r4, 8004b02 <plan_buffer_line+0x226>
 8004ad4:	4620      	mov	r0, r4

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 8004ad6:	b017      	add	sp, #92	; 0x5c
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	20000a60 	.word	0x20000a60
 8004ae0:	200001f0 	.word	0x200001f0
 8004ae4:	20000a64 	.word	0x20000a64
 8004ae8:	200011b4 	.word	0x200011b4
 8004aec:	2000134c 	.word	0x2000134c
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004af0:	4a9f      	ldr	r2, [pc, #636]	; (8004d70 <plan_buffer_line+0x494>)
 8004af2:	f8ba 3018 	ldrh.w	r3, [sl, #24]
 8004af6:	8912      	ldrh	r2, [r2, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8aa 3018 	strh.w	r3, [sl, #24]
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8004afe:	2c00      	cmp	r4, #0
 8004b00:	d0e8      	beq.n	8004ad4 <plan_buffer_line+0x1f8>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8004b02:	a80c      	add	r0, sp, #48	; 0x30
 8004b04:	f7ff fbd6 	bl	80042b4 <convert_delta_vector_to_unit_vector>
 8004b08:	1bbc      	subs	r4, r7, r6
 8004b0a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8004b0e:	62a0      	str	r0, [r4, #40]	; 0x28
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004b10:	a90c      	add	r1, sp, #48	; 0x30
 8004b12:	4898      	ldr	r0, [pc, #608]	; (8004d74 <plan_buffer_line+0x498>)
 8004b14:	f7ff fc4c 	bl	80043b0 <limit_value_by_axis_maximum>
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004b18:	a90c      	add	r1, sp, #48	; 0x30
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8004b1a:	6260      	str	r0, [r4, #36]	; 0x24
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004b1c:	4896      	ldr	r0, [pc, #600]	; (8004d78 <plan_buffer_line+0x49c>)
 8004b1e:	f7ff fc47 	bl	80043b0 <limit_value_by_axis_maximum>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004b22:	f894 a01a 	ldrb.w	sl, [r4, #26]
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8004b26:	6320      	str	r0, [r4, #48]	; 0x30
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8004b28:	f01a 0f01 	tst.w	sl, #1
 8004b2c:	f000 808c 	beq.w	8004c48 <plan_buffer_line+0x36c>
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004b30:	6360      	str	r0, [r4, #52]	; 0x34
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004b32:	4b92      	ldr	r3, [pc, #584]	; (8004d7c <plan_buffer_line+0x4a0>)
 8004b34:	4a92      	ldr	r2, [pc, #584]	; (8004d80 <plan_buffer_line+0x4a4>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d003      	beq.n	8004b46 <plan_buffer_line+0x26a>
 8004b3e:	f01a 0f02 	tst.w	sl, #2
 8004b42:	f000 808c 	beq.w	8004c5e <plan_buffer_line+0x382>
    block->entry_speed_sqr = 0.0f;
 8004b46:	2200      	movs	r2, #0
 8004b48:	1bbb      	subs	r3, r7, r6
 8004b4a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004b4e:	61da      	str	r2, [r3, #28]
    block->max_junction_speed_sqr = 0.0f; // Starting from rest. Enforce start from zero velocity.
 8004b50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8004b52:	1bbb      	subs	r3, r7, r6
 8004b54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004b58:	7e9a      	ldrb	r2, [r3, #26]
 8004b5a:	0790      	lsls	r0, r2, #30
 8004b5c:	f100 80f0 	bmi.w	8004d40 <plan_buffer_line+0x464>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004b60:	07d1      	lsls	r1, r2, #31
  float nominal_speed = block->programmed_rate;
 8004b62:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004b64:	f100 80e0 	bmi.w	8004d28 <plan_buffer_line+0x44c>
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01f*sys.f_override); }
 8004b68:	0753      	lsls	r3, r2, #29
 8004b6a:	d40a      	bmi.n	8004b82 <plan_buffer_line+0x2a6>
 8004b6c:	4b85      	ldr	r3, [pc, #532]	; (8004d84 <plan_buffer_line+0x4a8>)
 8004b6e:	7a18      	ldrb	r0, [r3, #8]
 8004b70:	f7fc f84a 	bl	8000c08 <__aeabi_i2f>
 8004b74:	4621      	mov	r1, r4
 8004b76:	f7fc f89b 	bl	8000cb0 <__aeabi_fmul>
 8004b7a:	4983      	ldr	r1, [pc, #524]	; (8004d88 <plan_buffer_line+0x4ac>)
 8004b7c:	f7fc f898 	bl	8000cb0 <__aeabi_fmul>
 8004b80:	4604      	mov	r4, r0
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8004b82:	1bbe      	subs	r6, r7, r6
 8004b84:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8004b88:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7fc fa37 	bl	8001000 <__aeabi_fcmple>
 8004b92:	b900      	cbnz	r0, 8004b96 <plan_buffer_line+0x2ba>
 8004b94:	4626      	mov	r6, r4
 8004b96:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f7fc fa3a 	bl	8001014 <__aeabi_fcmpge>
 8004ba0:	b908      	cbnz	r0, 8004ba6 <plan_buffer_line+0x2ca>
 8004ba2:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004ba6:	4f79      	ldr	r7, [pc, #484]	; (8004d8c <plan_buffer_line+0x4b0>)
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004ba8:	4631      	mov	r1, r6
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8004baa:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8004bac:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f7fc fa1b 	bl	8000fec <__aeabi_fcmplt>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f000 80c9 	beq.w	8004d4e <plan_buffer_line+0x472>
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7fc f876 	bl	8000cb0 <__aeabi_fmul>
 8004bc4:	4605      	mov	r5, r0
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f7fc fa2d 	bl	8001028 <__aeabi_fcmpgt>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f040 80ba 	bne.w	8004d48 <plan_buffer_line+0x46c>
 8004bd4:	f8c8 5020 	str.w	r5, [r8, #32]
    pl.previous_nominal_speed = nominal_speed;
 8004bd8:	62be      	str	r6, [r7, #40]	; 0x28
    block_buffer_head = next_buffer_head;
 8004bda:	4f6d      	ldr	r7, [pc, #436]	; (8004d90 <plan_buffer_line+0x4b4>)
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bdc:	4c6d      	ldr	r4, [pc, #436]	; (8004d94 <plan_buffer_line+0x4b8>)
    block_buffer_head = next_buffer_head;
 8004bde:	f897 e000 	ldrb.w	lr, [r7]
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004be2:	ad0c      	add	r5, sp, #48	; 0x30
  block_index++;
 8004be4:	f10e 0601 	add.w	r6, lr, #1
 8004be8:	b2f6      	uxtb	r6, r6
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8004bea:	2e24      	cmp	r6, #36	; 0x24
 8004bec:	bf08      	it	eq
 8004bee:	2600      	moveq	r6, #0
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bf4:	682b      	ldr	r3, [r5, #0]
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004bf6:	ad02      	add	r5, sp, #8
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8004bf8:	f844 3924 	str.w	r3, [r4], #-36
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c00:	682b      	ldr	r3, [r5, #0]
    block_buffer_head = next_buffer_head;
 8004c02:	4a5f      	ldr	r2, [pc, #380]	; (8004d80 <plan_buffer_line+0x4a4>)
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8004c04:	6023      	str	r3, [r4, #0]
    block_buffer_head = next_buffer_head;
 8004c06:	f882 e000 	strb.w	lr, [r2]
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8004c0a:	703e      	strb	r6, [r7, #0]
    planner_recalculate();
 8004c0c:	f7ff fc3a 	bl	8004484 <planner_recalculate>
  return(PLAN_OK);
 8004c10:	2001      	movs	r0, #1
}
 8004c12:	b017      	add	sp, #92	; 0x5c
 8004c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (delta_mm < 0.0f ) { block->direction_bits |= direction_pin_mask[idx]; }
 8004c18:	4955      	ldr	r1, [pc, #340]	; (8004d70 <plan_buffer_line+0x494>)
 8004c1a:	8b1a      	ldrh	r2, [r3, #24]
 8004c1c:	88c9      	ldrh	r1, [r1, #6]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	831a      	strh	r2, [r3, #24]
 8004c22:	e72e      	b.n	8004a82 <plan_buffer_line+0x1a6>
 8004c24:	4a52      	ldr	r2, [pc, #328]	; (8004d70 <plan_buffer_line+0x494>)
 8004c26:	8b19      	ldrh	r1, [r3, #24]
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	831a      	strh	r2, [r3, #24]
 8004c2e:	e6aa      	b.n	8004986 <plan_buffer_line+0xaa>
 8004c30:	494f      	ldr	r1, [pc, #316]	; (8004d70 <plan_buffer_line+0x494>)
 8004c32:	8b1a      	ldrh	r2, [r3, #24]
 8004c34:	8889      	ldrh	r1, [r1, #4]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	831a      	strh	r2, [r3, #24]
 8004c3a:	e6f8      	b.n	8004a2e <plan_buffer_line+0x152>
 8004c3c:	494c      	ldr	r1, [pc, #304]	; (8004d70 <plan_buffer_line+0x494>)
 8004c3e:	8b1a      	ldrh	r2, [r3, #24]
 8004c40:	8849      	ldrh	r1, [r1, #2]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	831a      	strh	r2, [r3, #24]
 8004c46:	e6c8      	b.n	80049da <plan_buffer_line+0xfe>
    block->programmed_rate = pl_data->feed_rate;
 8004c48:	f8db 1000 	ldr.w	r1, [fp]
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004c4c:	f01a 0f08 	tst.w	sl, #8
    block->programmed_rate = pl_data->feed_rate;
 8004c50:	6361      	str	r1, [r4, #52]	; 0x34
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8004c52:	f43f af6e 	beq.w	8004b32 <plan_buffer_line+0x256>
 8004c56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c58:	f7fc f82a 	bl	8000cb0 <__aeabi_fmul>
 8004c5c:	e768      	b.n	8004b30 <plan_buffer_line+0x254>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c5e:	4c4b      	ldr	r4, [pc, #300]	; (8004d8c <plan_buffer_line+0x4b0>)
 8004c60:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8004c64:	f8d4 a014 	ldr.w	sl, [r4, #20]
 8004c68:	4658      	mov	r0, fp
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	f7fc f820 	bl	8000cb0 <__aeabi_fmul>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c70:	4651      	mov	r1, sl
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c72:	f100 4a00 	add.w	sl, r0, #2147483648	; 0x80000000
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c76:	4658      	mov	r0, fp
 8004c78:	f7fb ff10 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c7c:	69a3      	ldr	r3, [r4, #24]
 8004c7e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004c82:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c84:	9011      	str	r0, [sp, #68]	; 0x44
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c86:	4658      	mov	r0, fp
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	f7fc f811 	bl	8000cb0 <__aeabi_fmul>
 8004c8e:	4601      	mov	r1, r0
 8004c90:	4650      	mov	r0, sl
 8004c92:	f7fb ff03 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c96:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004c98:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4658      	mov	r0, fp
 8004c9e:	f7fb fefd 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ca2:	69e3      	ldr	r3, [r4, #28]
 8004ca4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004ca8:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004caa:	9012      	str	r0, [sp, #72]	; 0x48
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004cac:	4658      	mov	r0, fp
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	f7fb fffe 	bl	8000cb0 <__aeabi_fmul>
 8004cb4:	4601      	mov	r1, r0
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	f7fb fef0 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004cbc:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004cbe:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f7fb feea 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004cc8:	6a23      	ldr	r3, [r4, #32]
 8004cca:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004cce:	4619      	mov	r1, r3
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004cd0:	9013      	str	r0, [sp, #76]	; 0x4c
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004cd2:	4658      	mov	r0, fp
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	f7fb ffeb 	bl	8000cb0 <__aeabi_fmul>
 8004cda:	4601      	mov	r1, r0
 8004cdc:	4650      	mov	r0, sl
 8004cde:	f7fb fedd 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ce2:	9b00      	ldr	r3, [sp, #0]
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004ce4:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4658      	mov	r0, fp
 8004cea:	f7fb fed7 	bl	8000a9c <__aeabi_fsub>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004cee:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8004cf2:	9c10      	ldr	r4, [sp, #64]	; 0x40
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004cf4:	9014      	str	r0, [sp, #80]	; 0x50
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	4658      	mov	r0, fp
 8004cfa:	f7fb ffd9 	bl	8000cb0 <__aeabi_fmul>
 8004cfe:	4601      	mov	r1, r0
 8004d00:	4650      	mov	r0, sl
 8004d02:	f7fb fecb 	bl	8000a9c <__aeabi_fsub>
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004d06:	4659      	mov	r1, fp
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8004d08:	4682      	mov	sl, r0
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f7fb fec6 	bl	8000a9c <__aeabi_fsub>
    if (junction_cos_theta > 0.999999f) {
 8004d10:	4921      	ldr	r1, [pc, #132]	; (8004d98 <plan_buffer_line+0x4bc>)
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8004d12:	9015      	str	r0, [sp, #84]	; 0x54
    if (junction_cos_theta > 0.999999f) {
 8004d14:	4650      	mov	r0, sl
 8004d16:	f7fc f987 	bl	8001028 <__aeabi_fcmpgt>
 8004d1a:	b1f0      	cbz	r0, 8004d5a <plan_buffer_line+0x47e>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	1bbb      	subs	r3, r7, r6
 8004d20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d26:	e714      	b.n	8004b52 <plan_buffer_line+0x276>
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01f*sys.r_override); }
 8004d28:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <plan_buffer_line+0x4a8>)
 8004d2a:	7a58      	ldrb	r0, [r3, #9]
 8004d2c:	f7fb ff6c 	bl	8000c08 <__aeabi_i2f>
 8004d30:	4621      	mov	r1, r4
 8004d32:	f7fb ffbd 	bl	8000cb0 <__aeabi_fmul>
 8004d36:	4914      	ldr	r1, [pc, #80]	; (8004d88 <plan_buffer_line+0x4ac>)
 8004d38:	f7fb ffba 	bl	8000cb0 <__aeabi_fmul>
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	e72a      	b.n	8004b96 <plan_buffer_line+0x2ba>
  return(PLAN_OK);
 8004d40:	2001      	movs	r0, #1
}
 8004d42:	b017      	add	sp, #92	; 0x5c
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8004d48:	f8c8 4020 	str.w	r4, [r8, #32]
 8004d4c:	e744      	b.n	8004bd8 <plan_buffer_line+0x2fc>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7fb ffad 	bl	8000cb0 <__aeabi_fmul>
 8004d56:	4605      	mov	r5, r0
 8004d58:	e735      	b.n	8004bc6 <plan_buffer_line+0x2ea>
      if (junction_cos_theta < -0.999999f) {
 8004d5a:	4910      	ldr	r1, [pc, #64]	; (8004d9c <plan_buffer_line+0x4c0>)
 8004d5c:	4650      	mov	r0, sl
 8004d5e:	f7fc f945 	bl	8000fec <__aeabi_fcmplt>
 8004d62:	b1f8      	cbz	r0, 8004da4 <plan_buffer_line+0x4c8>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8004d64:	1bbb      	subs	r3, r7, r6
 8004d66:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <plan_buffer_line+0x4c4>)
 8004d68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d6e:	e6f0      	b.n	8004b52 <plan_buffer_line+0x276>
 8004d70:	0800c2cc 	.word	0x0800c2cc
 8004d74:	20001374 	.word	0x20001374
 8004d78:	20001360 	.word	0x20001360
 8004d7c:	20000a62 	.word	0x20000a62
 8004d80:	20000a60 	.word	0x20000a60
 8004d84:	20001188 	.word	0x20001188
 8004d88:	3c23d70a 	.word	0x3c23d70a
 8004d8c:	20000a64 	.word	0x20000a64
 8004d90:	20000a63 	.word	0x20000a63
 8004d94:	20000a78 	.word	0x20000a78
 8004d98:	3f7fffef 	.word	0x3f7fffef
 8004d9c:	bf7fffef 	.word	0xbf7fffef
 8004da0:	7f7fffff 	.word	0x7f7fffff
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8004da4:	a811      	add	r0, sp, #68	; 0x44
 8004da6:	f7ff fa85 	bl	80042b4 <convert_delta_vector_to_unit_vector>
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004daa:	a911      	add	r1, sp, #68	; 0x44
 8004dac:	4817      	ldr	r0, [pc, #92]	; (8004e0c <plan_buffer_line+0x530>)
 8004dae:	f7ff faff 	bl	80043b0 <limit_value_by_axis_maximum>
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004db2:	4651      	mov	r1, sl
        float junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8004db4:	4683      	mov	fp, r0
        float sin_theta_d2 = sqrtf(0.5f*(1.0f-junction_cos_theta)); // Trig half angle identity. Always positive.
 8004db6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004dba:	f7fb fe6f 	bl	8000a9c <__aeabi_fsub>
 8004dbe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004dc2:	f7fb ff75 	bl	8000cb0 <__aeabi_fmul>
 8004dc6:	f006 f9df 	bl	800b188 <sqrtf>
 8004dca:	4682      	mov	sl, r0
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8004dcc:	4658      	mov	r0, fp
 8004dce:	4651      	mov	r1, sl
 8004dd0:	f7fb ff6e 	bl	8000cb0 <__aeabi_fmul>
 8004dd4:	f8d9 1058 	ldr.w	r1, [r9, #88]	; 0x58
 8004dd8:	f7fb ff6a 	bl	8000cb0 <__aeabi_fmul>
 8004ddc:	4651      	mov	r1, sl
 8004dde:	4681      	mov	r9, r0
 8004de0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004de4:	f7fb fe5a 	bl	8000a9c <__aeabi_fsub>
 8004de8:	4601      	mov	r1, r0
 8004dea:	4648      	mov	r0, r9
 8004dec:	f7fc f814 	bl	8000e18 <__aeabi_fdiv>
 8004df0:	1bbc      	subs	r4, r7, r6
 8004df2:	2100      	movs	r1, #0
 8004df4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8004df8:	4681      	mov	r9, r0
 8004dfa:	f7fc f90b 	bl	8001014 <__aeabi_fcmpge>
 8004dfe:	b908      	cbnz	r0, 8004e04 <plan_buffer_line+0x528>
 8004e00:	f04f 0900 	mov.w	r9, #0
 8004e04:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8004e08:	e6a3      	b.n	8004b52 <plan_buffer_line+0x276>
 8004e0a:	bf00      	nop
 8004e0c:	20001374 	.word	0x20001374

08004e10 <plan_sync_position>:


// Reset the planner position vectors. Called by the system abort/initialization routine.
void plan_sync_position()
{
 8004e10:	b430      	push	{r4, r5}
 8004e12:	4d04      	ldr	r5, [pc, #16]	; (8004e24 <plan_sync_position+0x14>)
 8004e14:	4c04      	ldr	r4, [pc, #16]	; (8004e28 <plan_sync_position+0x18>)
 8004e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	6023      	str	r3, [r4, #0]
      }
    #else
      pl.position[idx] = sys_position[idx];
    #endif
  }
}
 8004e1e:	bc30      	pop	{r4, r5}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	200011b4 	.word	0x200011b4
 8004e28:	20000a64 	.word	0x20000a64

08004e2c <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8004e2c:	4a06      	ldr	r2, [pc, #24]	; (8004e48 <plan_get_block_buffer_available+0x1c>)
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <plan_get_block_buffer_available+0x20>)
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	bf2c      	ite	cs
 8004e38:	f103 0023 	addcs.w	r0, r3, #35	; 0x23
  return((block_buffer_tail-block_buffer_head-1));
 8004e3c:	f103 30ff 	addcc.w	r0, r3, #4294967295	; 0xffffffff
 8004e40:	1a80      	subs	r0, r0, r2
 8004e42:	b2c0      	uxtb	r0, r0
}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000a60 	.word	0x20000a60
 8004e4c:	20000a62 	.word	0x20000a62

08004e50 <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8004e50:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8004e52:	f003 fd83 	bl	800895c <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <plan_cycle_reinitialize+0x18>)
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <plan_cycle_reinitialize+0x1c>)
 8004e5a:	7812      	ldrb	r2, [r2, #0]
 8004e5c:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
}
 8004e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  planner_recalculate();
 8004e62:	f7ff bb0f 	b.w	8004484 <planner_recalculate>
 8004e66:	bf00      	nop
 8004e68:	20000a62 	.word	0x20000a62
 8004e6c:	20000a61 	.word	0x20000a61

08004e70 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8004e70:	b510      	push	{r4, lr}
 8004e72:	4604      	mov	r4, r0
  while (*s)
 8004e74:	7800      	ldrb	r0, [r0, #0]
 8004e76:	b128      	cbz	r0, 8004e84 <printString+0x14>
    serial_write(*s++);
 8004e78:	f002 fb56 	bl	8007528 <serial_write>
  while (*s)
 8004e7c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d1f9      	bne.n	8004e78 <printString+0x8>
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	bf00      	nop

08004e88 <print_uint8_base10>:
// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8004e88:	2863      	cmp	r0, #99	; 0x63
{
 8004e8a:	b570      	push	{r4, r5, r6, lr}
 8004e8c:	4605      	mov	r5, r0
  if (n >= 100) { // 100-255
 8004e8e:	d920      	bls.n	8004ed2 <print_uint8_base10+0x4a>
    digit_a = '0' + n % 10;
    n /= 10;
  }
  if (n >= 10) { // 10-99
    digit_b = '0' + n % 10;
    n /= 10;
 8004e90:	481c      	ldr	r0, [pc, #112]	; (8004f04 <print_uint8_base10+0x7c>)
 8004e92:	fba0 3005 	umull	r3, r0, r0, r5
 8004e96:	0940      	lsrs	r0, r0, #5
  }
  serial_write('0' + n);
 8004e98:	3030      	adds	r0, #48	; 0x30
 8004e9a:	f002 fb45 	bl	8007528 <serial_write>
    n /= 10;
 8004e9e:	481a      	ldr	r0, [pc, #104]	; (8004f08 <print_uint8_base10+0x80>)
 8004ea0:	fba0 3405 	umull	r3, r4, r0, r5
 8004ea4:	08e4      	lsrs	r4, r4, #3
    digit_b = '0' + n % 10;
 8004ea6:	b2e3      	uxtb	r3, r4
 8004ea8:	fba0 2003 	umull	r2, r0, r0, r3
 8004eac:	08c0      	lsrs	r0, r0, #3
 8004eae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004eb2:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 8004eb6:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004eb8:	b2c0      	uxtb	r0, r0
 8004eba:	f002 fb35 	bl	8007528 <serial_write>
    digit_a = '0' + n % 10;
 8004ebe:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8004ec2:	eba5 0040 	sub.w	r0, r5, r0, lsl #1
 8004ec6:	3030      	adds	r0, #48	; 0x30
  if (digit_a) { serial_write(digit_a); }
 8004ec8:	b2c0      	uxtb	r0, r0
}
 8004eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (digit_a) { serial_write(digit_a); }
 8004ece:	f002 bb2b 	b.w	8007528 <serial_write>
  if (n >= 10) { // 10-99
 8004ed2:	2809      	cmp	r0, #9
 8004ed4:	d805      	bhi.n	8004ee2 <print_uint8_base10+0x5a>
}
 8004ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  serial_write('0' + n);
 8004eda:	3030      	adds	r0, #48	; 0x30
 8004edc:	b2c0      	uxtb	r0, r0
 8004ede:	f002 bb23 	b.w	8007528 <serial_write>
    n /= 10;
 8004ee2:	260a      	movs	r6, #10
 8004ee4:	fbb0 f4f6 	udiv	r4, r0, r6
  serial_write('0' + n);
 8004ee8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004eec:	b2c0      	uxtb	r0, r0
 8004eee:	f002 fb1b 	bl	8007528 <serial_write>
    digit_b = '0' + n % 10;
 8004ef2:	fb06 5014 	mls	r0, r6, r4, r5
}
 8004ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digit_b = '0' + n % 10;
 8004efa:	3030      	adds	r0, #48	; 0x30
  if (digit_b) { serial_write(digit_b); }
 8004efc:	b2c0      	uxtb	r0, r0
 8004efe:	f002 bb13 	b.w	8007528 <serial_write>
 8004f02:	bf00      	nop
 8004f04:	51eb851f 	.word	0x51eb851f
 8004f08:	cccccccd 	.word	0xcccccccd

08004f0c <printFloat>:
// more digits than a float. Number of decimal places, which are tracked by a counter,
// may be set by the user. The integer is then efficiently converted to a string.
// NOTE: AVR '%' and '/' integer operations are very efficient. Bitshifting speed-up
// techniques are actually just slightly slower. Found this out the hard way.
void printFloat(float n, uint8_t decimal_places)
{
 8004f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0e:	460d      	mov	r5, r1
 8004f10:	b085      	sub	sp, #20
  if (n < 0) {
 8004f12:	2100      	movs	r1, #0
{
 8004f14:	4606      	mov	r6, r0
  if (n < 0) {
 8004f16:	f7fc f869 	bl	8000fec <__aeabi_fcmplt>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d152      	bne.n	8004fc4 <printFloat+0xb8>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004f1e:	2d01      	cmp	r5, #1
 8004f20:	d956      	bls.n	8004fd0 <printFloat+0xc4>
 8004f22:	462c      	mov	r4, r5
    n *= 100;
 8004f24:	4f2f      	ldr	r7, [pc, #188]	; (8004fe4 <printFloat+0xd8>)
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fec1 	bl	8000cb0 <__aeabi_fmul>
    decimals -= 2;
 8004f2e:	3c02      	subs	r4, #2
 8004f30:	b2e4      	uxtb	r4, r4
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004f32:	2c01      	cmp	r4, #1
    n *= 100;
 8004f34:	4606      	mov	r6, r0
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004f36:	d8f6      	bhi.n	8004f26 <printFloat+0x1a>
 8004f38:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8004f3c:	b123      	cbz	r3, 8004f48 <printFloat+0x3c>
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4929      	ldr	r1, [pc, #164]	; (8004fe8 <printFloat+0xdc>)
 8004f42:	f7fb feb5 	bl	8000cb0 <__aeabi_fmul>
 8004f46:	4606      	mov	r6, r0
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8004f48:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f7fb fda7 	bl	8000aa0 <__addsf3>

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8004f52:	f7fc f889 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d03c      	beq.n	8004fd4 <printFloat+0xc8>
 8004f5a:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8004f5c:	4e23      	ldr	r6, [pc, #140]	; (8004fec <printFloat+0xe0>)
 8004f5e:	fba6 1300 	umull	r1, r3, r6, r0
 8004f62:	08db      	lsrs	r3, r3, #3
 8004f64:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004f68:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8004f6c:	1c54      	adds	r4, r2, #1
 8004f6e:	a904      	add	r1, sp, #16
 8004f70:	3030      	adds	r0, #48	; 0x30
 8004f72:	440a      	add	r2, r1
 8004f74:	b2e4      	uxtb	r4, r4
 8004f76:	f802 0c10 	strb.w	r0, [r2, #-16]
 8004f7a:	4622      	mov	r2, r4
  while(a > 0) {
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1ed      	bne.n	8004f5e <printFloat+0x52>
    a /= 10;
  }
  while (i < decimal_places) {
 8004f82:	42a5      	cmp	r5, r4
 8004f84:	d928      	bls.n	8004fd8 <printFloat+0xcc>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8004f86:	1e6a      	subs	r2, r5, #1
 8004f88:	1b12      	subs	r2, r2, r4
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	3201      	adds	r2, #1
 8004f8e:	eb0d 0004 	add.w	r0, sp, r4
 8004f92:	2130      	movs	r1, #48	; 0x30
 8004f94:	f005 ffd7 	bl	800af46 <memset>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
    buf[i++] = '0';
 8004f98:	2230      	movs	r2, #48	; 0x30
 8004f9a:	ab04      	add	r3, sp, #16
 8004f9c:	1c6c      	adds	r4, r5, #1
 8004f9e:	442b      	add	r3, r5
 8004fa0:	f803 2c10 	strb.w	r2, [r3, #-16]
 8004fa4:	b2e4      	uxtb	r4, r4
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8004fa6:	b15c      	cbz	r4, 8004fc0 <printFloat+0xb4>
 8004fa8:	eb0d 0604 	add.w	r6, sp, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004fac:	42a5      	cmp	r5, r4
 8004fae:	d015      	beq.n	8004fdc <printFloat+0xd0>
    serial_write(buf[i-1]);
 8004fb0:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
  for (; i > 0; i--) {
 8004fb4:	3c01      	subs	r4, #1
    serial_write(buf[i-1]);
 8004fb6:	f002 fab7 	bl	8007528 <serial_write>
  for (; i > 0; i--) {
 8004fba:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004fbe:	d1f5      	bne.n	8004fac <printFloat+0xa0>
  }
}
 8004fc0:	b005      	add	sp, #20
 8004fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 8004fc4:	202d      	movs	r0, #45	; 0x2d
 8004fc6:	f002 faaf 	bl	8007528 <serial_write>
    n = -n;
 8004fca:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004fce:	e7a6      	b.n	8004f1e <printFloat+0x12>
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8004fd0:	462b      	mov	r3, r5
 8004fd2:	e7b3      	b.n	8004f3c <printFloat+0x30>
  uint8_t i = 0;
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	e7d4      	b.n	8004f82 <printFloat+0x76>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8004fd8:	d1e5      	bne.n	8004fa6 <printFloat+0x9a>
 8004fda:	e7dd      	b.n	8004f98 <printFloat+0x8c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8004fdc:	202e      	movs	r0, #46	; 0x2e
 8004fde:	f002 faa3 	bl	8007528 <serial_write>
 8004fe2:	e7e5      	b.n	8004fb0 <printFloat+0xa4>
 8004fe4:	42c80000 	.word	0x42c80000
 8004fe8:	41200000 	.word	0x41200000
 8004fec:	cccccccd 	.word	0xcccccccd

08004ff0 <printFloat_CoordValue>:

// Floating value printing handlers for special variables types used in Grbl and are defined
// in the config.h.
//  - CoordValue: Handles all position or coordinate values in inches or mm reporting.
//  - RateValue: Handles feed rate and current velocity in inches or mm reporting.
void printFloat_CoordValue(float n) {
 8004ff0:	b530      	push	{r4, r5, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004ff2:	4b6e      	ldr	r3, [pc, #440]	; (80051ac <printFloat_CoordValue+0x1bc>)
void printFloat_CoordValue(float n) {
 8004ff4:	b085      	sub	sp, #20
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8004ff6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004ffa:	07db      	lsls	r3, r3, #31
 8004ffc:	d452      	bmi.n	80050a4 <printFloat_CoordValue+0xb4>
  if (n < 0) {
 8004ffe:	2100      	movs	r1, #0
 8005000:	4604      	mov	r4, r0
 8005002:	f7fb fff3 	bl	8000fec <__aeabi_fcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	f040 80a8 	bne.w	800515c <printFloat_CoordValue+0x16c>
  if (decimals) { n *= 10; }
 800500c:	4968      	ldr	r1, [pc, #416]	; (80051b0 <printFloat_CoordValue+0x1c0>)
 800500e:	4620      	mov	r0, r4
 8005010:	f7fb fe4e 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005014:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005018:	f7fb fd42 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 800501c:	f7fc f824 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8005020:	2800      	cmp	r0, #0
 8005022:	f000 80a1 	beq.w	8005168 <printFloat_CoordValue+0x178>
 8005026:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8005028:	4d62      	ldr	r5, [pc, #392]	; (80051b4 <printFloat_CoordValue+0x1c4>)
 800502a:	e000      	b.n	800502e <printFloat_CoordValue+0x3e>
 800502c:	4621      	mov	r1, r4
 800502e:	fba5 2300 	umull	r2, r3, r5, r0
 8005032:	08db      	lsrs	r3, r3, #3
 8005034:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005038:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 800503c:	aa04      	add	r2, sp, #16
 800503e:	3030      	adds	r0, #48	; 0x30
 8005040:	1c4c      	adds	r4, r1, #1
 8005042:	440a      	add	r2, r1
 8005044:	f802 0c10 	strb.w	r0, [r2, #-16]
 8005048:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 800504a:	4618      	mov	r0, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ed      	bne.n	800502c <printFloat_CoordValue+0x3c>
  while (i < decimal_places) {
 8005050:	2c02      	cmp	r4, #2
 8005052:	d816      	bhi.n	8005082 <printFloat_CoordValue+0x92>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005054:	2230      	movs	r2, #48	; 0x30
 8005056:	1c8b      	adds	r3, r1, #2
 8005058:	a804      	add	r0, sp, #16
 800505a:	b2db      	uxtb	r3, r3
 800505c:	4404      	add	r4, r0
  while (i < decimal_places) {
 800505e:	2b03      	cmp	r3, #3
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005060:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 8005064:	d007      	beq.n	8005076 <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005066:	4403      	add	r3, r0
  while (i < decimal_places) {
 8005068:	29ff      	cmp	r1, #255	; 0xff
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800506a:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 800506e:	d102      	bne.n	8005076 <printFloat_CoordValue+0x86>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005070:	2330      	movs	r3, #48	; 0x30
 8005072:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[i++] = '0';
 8005076:	2330      	movs	r3, #48	; 0x30
 8005078:	2404      	movs	r4, #4
 800507a:	461d      	mov	r5, r3
 800507c:	f88d 3003 	strb.w	r3, [sp, #3]
 8005080:	e005      	b.n	800508e <printFloat_CoordValue+0x9e>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005082:	2c03      	cmp	r4, #3
 8005084:	d0f7      	beq.n	8005076 <printFloat_CoordValue+0x86>
 8005086:	ab04      	add	r3, sp, #16
 8005088:	4423      	add	r3, r4
 800508a:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 800508e:	3c01      	subs	r4, #1
 8005090:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8005092:	2c02      	cmp	r4, #2
 8005094:	d07b      	beq.n	800518e <printFloat_CoordValue+0x19e>
    serial_write(buf[i-1]);
 8005096:	4628      	mov	r0, r5
 8005098:	f002 fa46 	bl	8007528 <serial_write>
  for (; i > 0; i--) {
 800509c:	2c00      	cmp	r4, #0
 800509e:	d1f2      	bne.n	8005086 <printFloat_CoordValue+0x96>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
  }
}
 80050a0:	b005      	add	sp, #20
 80050a2:	bd30      	pop	{r4, r5, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 80050a4:	4944      	ldr	r1, [pc, #272]	; (80051b8 <printFloat_CoordValue+0x1c8>)
 80050a6:	f7fb fe03 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 80050aa:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 80050ac:	4604      	mov	r4, r0
  if (n < 0) {
 80050ae:	f7fb ff9d 	bl	8000fec <__aeabi_fcmplt>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	d15e      	bne.n	8005174 <printFloat_CoordValue+0x184>
    n *= 100;
 80050b6:	4941      	ldr	r1, [pc, #260]	; (80051bc <printFloat_CoordValue+0x1cc>)
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7fb fdf9 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 80050be:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80050c2:	f7fb fced 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 80050c6:	f7fb ffcf 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d058      	beq.n	8005180 <printFloat_CoordValue+0x190>
 80050ce:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 80050d0:	4d38      	ldr	r5, [pc, #224]	; (80051b4 <printFloat_CoordValue+0x1c4>)
 80050d2:	e000      	b.n	80050d6 <printFloat_CoordValue+0xe6>
 80050d4:	4621      	mov	r1, r4
 80050d6:	fba5 2300 	umull	r2, r3, r5, r0
 80050da:	08db      	lsrs	r3, r3, #3
 80050dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80050e0:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 80050e4:	aa04      	add	r2, sp, #16
 80050e6:	3030      	adds	r0, #48	; 0x30
 80050e8:	1c4c      	adds	r4, r1, #1
 80050ea:	440a      	add	r2, r1
 80050ec:	f802 0c10 	strb.w	r0, [r2, #-16]
 80050f0:	b2e4      	uxtb	r4, r4
  while(a > 0) {
 80050f2:	4618      	mov	r0, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1ed      	bne.n	80050d4 <printFloat_CoordValue+0xe4>
  while (i < decimal_places) {
 80050f8:	2c03      	cmp	r4, #3
 80050fa:	d81e      	bhi.n	800513a <printFloat_CoordValue+0x14a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 80050fc:	2230      	movs	r2, #48	; 0x30
 80050fe:	1c8b      	adds	r3, r1, #2
 8005100:	a804      	add	r0, sp, #16
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4404      	add	r4, r0
  while (i < decimal_places) {
 8005106:	2b04      	cmp	r3, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005108:	f804 2c10 	strb.w	r2, [r4, #-16]
  while (i < decimal_places) {
 800510c:	d00f      	beq.n	800512e <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800510e:	3103      	adds	r1, #3
 8005110:	b2c9      	uxtb	r1, r1
 8005112:	4403      	add	r3, r0
  while (i < decimal_places) {
 8005114:	2904      	cmp	r1, #4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005116:	f803 2c10 	strb.w	r2, [r3, #-16]
  while (i < decimal_places) {
 800511a:	d008      	beq.n	800512e <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800511c:	2330      	movs	r3, #48	; 0x30
 800511e:	aa04      	add	r2, sp, #16
 8005120:	440a      	add	r2, r1
  while (i < decimal_places) {
 8005122:	2902      	cmp	r1, #2
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005124:	f802 3c10 	strb.w	r3, [r2, #-16]
  while (i < decimal_places) {
 8005128:	d101      	bne.n	800512e <printFloat_CoordValue+0x13e>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800512a:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[i++] = '0';
 800512e:	2330      	movs	r3, #48	; 0x30
 8005130:	2405      	movs	r4, #5
 8005132:	461d      	mov	r5, r3
 8005134:	f88d 3004 	strb.w	r3, [sp, #4]
 8005138:	e005      	b.n	8005146 <printFloat_CoordValue+0x156>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 800513a:	2c04      	cmp	r4, #4
 800513c:	d0f7      	beq.n	800512e <printFloat_CoordValue+0x13e>
 800513e:	ab04      	add	r3, sp, #16
 8005140:	4423      	add	r3, r4
 8005142:	f813 5c11 	ldrb.w	r5, [r3, #-17]
 8005146:	3c01      	subs	r4, #1
 8005148:	b2e4      	uxtb	r4, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800514a:	2c03      	cmp	r4, #3
 800514c:	d026      	beq.n	800519c <printFloat_CoordValue+0x1ac>
    serial_write(buf[i-1]);
 800514e:	4628      	mov	r0, r5
 8005150:	f002 f9ea 	bl	8007528 <serial_write>
  for (; i > 0; i--) {
 8005154:	2c00      	cmp	r4, #0
 8005156:	d1f2      	bne.n	800513e <printFloat_CoordValue+0x14e>
}
 8005158:	b005      	add	sp, #20
 800515a:	bd30      	pop	{r4, r5, pc}
    serial_write('-');
 800515c:	202d      	movs	r0, #45	; 0x2d
 800515e:	f002 f9e3 	bl	8007528 <serial_write>
    n = -n;
 8005162:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8005166:	e751      	b.n	800500c <printFloat_CoordValue+0x1c>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005168:	2330      	movs	r3, #48	; 0x30
 800516a:	f88d 3000 	strb.w	r3, [sp]
 800516e:	f88d 3001 	strb.w	r3, [sp, #1]
 8005172:	e77d      	b.n	8005070 <printFloat_CoordValue+0x80>
    serial_write('-');
 8005174:	202d      	movs	r0, #45	; 0x2d
 8005176:	f002 f9d7 	bl	8007528 <serial_write>
    n = -n;
 800517a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 800517e:	e79a      	b.n	80050b6 <printFloat_CoordValue+0xc6>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 8005180:	2330      	movs	r3, #48	; 0x30
 8005182:	2102      	movs	r1, #2
 8005184:	f88d 3000 	strb.w	r3, [sp]
 8005188:	f88d 3001 	strb.w	r3, [sp, #1]
 800518c:	e7c6      	b.n	800511c <printFloat_CoordValue+0x12c>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800518e:	202e      	movs	r0, #46	; 0x2e
 8005190:	f002 f9ca 	bl	8007528 <serial_write>
    serial_write(buf[i-1]);
 8005194:	4628      	mov	r0, r5
 8005196:	f002 f9c7 	bl	8007528 <serial_write>
 800519a:	e774      	b.n	8005086 <printFloat_CoordValue+0x96>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800519c:	202e      	movs	r0, #46	; 0x2e
 800519e:	f002 f9c3 	bl	8007528 <serial_write>
    serial_write(buf[i-1]);
 80051a2:	4628      	mov	r0, r5
 80051a4:	f002 f9c0 	bl	8007528 <serial_write>
 80051a8:	e7c9      	b.n	800513e <printFloat_CoordValue+0x14e>
 80051aa:	bf00      	nop
 80051ac:	2000134c 	.word	0x2000134c
 80051b0:	447a0000 	.word	0x447a0000
 80051b4:	cccccccd 	.word	0xcccccccd
 80051b8:	3d21428b 	.word	0x3d21428b
 80051bc:	461c4000 	.word	0x461c4000

080051c0 <printFloat_RateValue>:

void printFloat_RateValue(float n) {
 80051c0:	b570      	push	{r4, r5, r6, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80051c2:	4b4d      	ldr	r3, [pc, #308]	; (80052f8 <printFloat_RateValue+0x138>)
void printFloat_RateValue(float n) {
 80051c4:	b084      	sub	sp, #16
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80051c6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80051ca:	07db      	lsls	r3, r3, #31
 80051cc:	d435      	bmi.n	800523a <printFloat_RateValue+0x7a>
  if (n < 0) {
 80051ce:	2100      	movs	r1, #0
 80051d0:	4604      	mov	r4, r0
 80051d2:	f7fb ff0b 	bl	8000fec <__aeabi_fcmplt>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d17b      	bne.n	80052d2 <printFloat_RateValue+0x112>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 80051da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80051de:	4620      	mov	r0, r4
 80051e0:	f7fb fc5e 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 80051e4:	f7fb ff40 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d06d      	beq.n	80052c8 <printFloat_RateValue+0x108>
 80051ec:	2200      	movs	r2, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 80051ee:	4d43      	ldr	r5, [pc, #268]	; (80052fc <printFloat_RateValue+0x13c>)
 80051f0:	fba5 1300 	umull	r1, r3, r5, r0
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80051fa:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 80051fe:	1c54      	adds	r4, r2, #1
 8005200:	a904      	add	r1, sp, #16
 8005202:	3030      	adds	r0, #48	; 0x30
 8005204:	440a      	add	r2, r1
 8005206:	b2e4      	uxtb	r4, r4
 8005208:	f802 0c10 	strb.w	r0, [r2, #-16]
 800520c:	4622      	mov	r2, r4
  while(a > 0) {
 800520e:	4618      	mov	r0, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ed      	bne.n	80051f0 <printFloat_RateValue+0x30>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 8005214:	2c00      	cmp	r4, #0
 8005216:	d057      	beq.n	80052c8 <printFloat_RateValue+0x108>
 8005218:	ab04      	add	r3, sp, #16
 800521a:	441a      	add	r2, r3
 800521c:	f812 0c11 	ldrb.w	r0, [r2, #-17]
 8005220:	3c01      	subs	r4, #1
 8005222:	b2e4      	uxtb	r4, r4
 8005224:	466d      	mov	r5, sp
 8005226:	446c      	add	r4, sp
 8005228:	e001      	b.n	800522e <printFloat_RateValue+0x6e>
 800522a:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
    serial_write(buf[i-1]);
 800522e:	f002 f97b 	bl	8007528 <serial_write>
  for (; i > 0; i--) {
 8005232:	42ac      	cmp	r4, r5
 8005234:	d1f9      	bne.n	800522a <printFloat_RateValue+0x6a>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
  }
}
 8005236:	b004      	add	sp, #16
 8005238:	bd70      	pop	{r4, r5, r6, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 800523a:	4931      	ldr	r1, [pc, #196]	; (8005300 <printFloat_RateValue+0x140>)
 800523c:	f7fb fd38 	bl	8000cb0 <__aeabi_fmul>
  if (n < 0) {
 8005240:	2100      	movs	r1, #0
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 8005242:	4604      	mov	r4, r0
  if (n < 0) {
 8005244:	f7fb fed2 	bl	8000fec <__aeabi_fcmplt>
 8005248:	2800      	cmp	r0, #0
 800524a:	d148      	bne.n	80052de <printFloat_RateValue+0x11e>
  if (decimals) { n *= 10; }
 800524c:	492d      	ldr	r1, [pc, #180]	; (8005304 <printFloat_RateValue+0x144>)
 800524e:	4620      	mov	r0, r4
 8005250:	f7fb fd2e 	bl	8000cb0 <__aeabi_fmul>
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8005254:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005258:	f7fb fc22 	bl	8000aa0 <__addsf3>
  uint32_t a = (long)n;
 800525c:	f7fb ff04 	bl	8001068 <__aeabi_f2iz>
  while(a > 0) {
 8005260:	b1a0      	cbz	r0, 800528c <printFloat_RateValue+0xcc>
 8005262:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8005264:	4c25      	ldr	r4, [pc, #148]	; (80052fc <printFloat_RateValue+0x13c>)
 8005266:	fba4 3200 	umull	r3, r2, r4, r0
 800526a:	08d2      	lsrs	r2, r2, #3
 800526c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005270:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8005274:	ad04      	add	r5, sp, #16
 8005276:	1c4b      	adds	r3, r1, #1
 8005278:	3030      	adds	r0, #48	; 0x30
 800527a:	4429      	add	r1, r5
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f801 0c10 	strb.w	r0, [r1, #-16]
 8005282:	4619      	mov	r1, r3
  while(a > 0) {
 8005284:	4610      	mov	r0, r2
 8005286:	2a00      	cmp	r2, #0
 8005288:	d1ed      	bne.n	8005266 <printFloat_RateValue+0xa6>
  while (i < decimal_places) {
 800528a:	bb73      	cbnz	r3, 80052ea <printFloat_RateValue+0x12a>
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800528c:	2330      	movs	r3, #48	; 0x30
 800528e:	f88d 3000 	strb.w	r3, [sp]
    buf[i++] = '0';
 8005292:	2230      	movs	r2, #48	; 0x30
 8005294:	2302      	movs	r3, #2
 8005296:	4616      	mov	r6, r2
 8005298:	f88d 2001 	strb.w	r2, [sp, #1]
 800529c:	1e5c      	subs	r4, r3, #1
 800529e:	b2e5      	uxtb	r5, r4
 80052a0:	446d      	add	r5, sp
 80052a2:	e000      	b.n	80052a6 <printFloat_RateValue+0xe6>
 80052a4:	1e5c      	subs	r4, r3, #1
    serial_write(buf[i-1]);
 80052a6:	4630      	mov	r0, r6
 80052a8:	f002 f93e 	bl	8007528 <serial_write>
  for (; i > 0; i--) {
 80052ac:	b2e3      	uxtb	r3, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 80052b4:	d1f6      	bne.n	80052a4 <printFloat_RateValue+0xe4>
 80052b6:	202e      	movs	r0, #46	; 0x2e
 80052b8:	f002 f936 	bl	8007528 <serial_write>
    serial_write(buf[i-1]);
 80052bc:	4630      	mov	r0, r6
}
 80052be:	b004      	add	sp, #16
 80052c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    serial_write(buf[i-1]);
 80052c4:	f002 b930 	b.w	8007528 <serial_write>
    buf[i++] = '0';
 80052c8:	2030      	movs	r0, #48	; 0x30
 80052ca:	2401      	movs	r4, #1
 80052cc:	f88d 0000 	strb.w	r0, [sp]
 80052d0:	e7a6      	b.n	8005220 <printFloat_RateValue+0x60>
    serial_write('-');
 80052d2:	202d      	movs	r0, #45	; 0x2d
 80052d4:	f002 f928 	bl	8007528 <serial_write>
    n = -n;
 80052d8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80052dc:	e77d      	b.n	80051da <printFloat_RateValue+0x1a>
    serial_write('-');
 80052de:	202d      	movs	r0, #45	; 0x2d
 80052e0:	f002 f922 	bl	8007528 <serial_write>
    n = -n;
 80052e4:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80052e8:	e7b0      	b.n	800524c <printFloat_RateValue+0x8c>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d0d1      	beq.n	8005292 <printFloat_RateValue+0xd2>
 80052ee:	4429      	add	r1, r5
 80052f0:	f811 6c11 	ldrb.w	r6, [r1, #-17]
 80052f4:	e7d2      	b.n	800529c <printFloat_RateValue+0xdc>
 80052f6:	bf00      	nop
 80052f8:	2000134c 	.word	0x2000134c
 80052fc:	cccccccd 	.word	0xcccccccd
 8005300:	3d21428b 	.word	0x3d21428b
 8005304:	41200000 	.word	0x41200000

08005308 <probe_init>:
uint16_t probe_invert_mask;


// Probe pin initialization routine.
void probe_init()
{
 8005308:	b510      	push	{r4, lr}
    PROBE_PORT |= PROBE_MASK;    // Enable internal pull-up resistors. Normal high operation.
  #endif
#endif
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 800530a:	2101      	movs	r1, #1
{
 800530c:	b082      	sub	sp, #8
#ifdef DISABLE_PROBE_PIN_PULL_UP
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 800530e:	f44f 7400 	mov.w	r4, #512	; 0x200
	RCC_APB2PeriphClockCmd(RCC_PROBE_PORT, ENABLE);
 8005312:	2008      	movs	r0, #8
 8005314:	f7fc fad8 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005318:	2203      	movs	r2, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 800531a:	2348      	movs	r3, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PROBE_MASK;
 800531c:	a902      	add	r1, sp, #8
 800531e:	f821 4d04 	strh.w	r4, [r1, #-4]!
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 8005322:	4809      	ldr	r0, [pc, #36]	; (8005348 <probe_init+0x40>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8005324:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8005328:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(PROBE_PORT, &GPIO_InitStructure);
 800532c:	f7fc f868 	bl	8001400 <GPIO_Init>
// Called by probe_init() and the mc_probe() routines. Sets up the probe pin invert mask to
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
void probe_configure_invert_mask(uint8_t is_probe_away)
{
  probe_invert_mask = 0; // Initialize as zero.
 8005330:	2100      	movs	r1, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005332:	4a06      	ldr	r2, [pc, #24]	; (800534c <probe_init+0x44>)
  probe_invert_mask = 0; // Initialize as zero.
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <probe_init+0x48>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005336:	f992 2068 	ldrsb.w	r2, [r2, #104]	; 0x68
  probe_invert_mask = 0; // Initialize as zero.
 800533a:	8019      	strh	r1, [r3, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800533c:	428a      	cmp	r2, r1
 800533e:	bfa8      	it	ge
 8005340:	801c      	strhge	r4, [r3, #0]
}
 8005342:	b002      	add	sp, #8
 8005344:	bd10      	pop	{r4, pc}
 8005346:	bf00      	nop
 8005348:	40010c00 	.word	0x40010c00
 800534c:	2000134c 	.word	0x2000134c
 8005350:	200011ca 	.word	0x200011ca

08005354 <probe_configure_invert_mask>:
  probe_invert_mask = 0; // Initialize as zero.
 8005354:	2300      	movs	r3, #0
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005356:	4907      	ldr	r1, [pc, #28]	; (8005374 <probe_configure_invert_mask+0x20>)
  probe_invert_mask = 0; // Initialize as zero.
 8005358:	4a07      	ldr	r2, [pc, #28]	; (8005378 <probe_configure_invert_mask+0x24>)
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 800535a:	f991 1068 	ldrsb.w	r1, [r1, #104]	; 0x68
  probe_invert_mask = 0; // Initialize as zero.
 800535e:	8013      	strh	r3, [r2, #0]
  if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK; }
 8005360:	4299      	cmp	r1, r3
 8005362:	bfaa      	itet	ge
 8005364:	f44f 7100 	movge.w	r1, #512	; 0x200
 8005368:	f44f 7300 	movlt.w	r3, #512	; 0x200
 800536c:	8011      	strhge	r1, [r2, #0]
  if (is_probe_away) { probe_invert_mask ^= PROBE_MASK; }
 800536e:	b100      	cbz	r0, 8005372 <probe_configure_invert_mask+0x1e>
 8005370:	8013      	strh	r3, [r2, #0]
 8005372:	4770      	bx	lr
 8005374:	2000134c 	.word	0x2000134c
 8005378:	200011ca 	.word	0x200011ca

0800537c <probe_get_state>:
}


// Returns the probe pin state. Triggered = true. Called by gcode parser and probe state monitor.
uint8_t probe_get_state() 
{ 
 800537c:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
	return 0;
#endif
#ifdef STM32F103C8
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 800537e:	4805      	ldr	r0, [pc, #20]	; (8005394 <probe_get_state+0x18>)
 8005380:	f7fc f9f4 	bl	800176c <GPIO_ReadInputData>
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <probe_get_state+0x1c>)
 8005386:	f400 7000 	and.w	r0, r0, #512	; 0x200
 800538a:	881b      	ldrh	r3, [r3, #0]
#endif
}
 800538c:	1a18      	subs	r0, r3, r0
 800538e:	bf18      	it	ne
 8005390:	2001      	movne	r0, #1
 8005392:	bd08      	pop	{r3, pc}
 8005394:	40010c00 	.word	0x40010c00
 8005398:	200011ca 	.word	0x200011ca

0800539c <probe_state_monitor>:

// Monitors probe pin state and records the system position when detected. Called by the
// stepper ISR per ISR tick.
// NOTE: This function must be extremely efficient as to not bog down the stepper ISR.
void probe_state_monitor()
{
 800539c:	b570      	push	{r4, r5, r6, lr}
	return ((GPIO_ReadInputData(PROBE_PORT) & PROBE_MASK) ^ probe_invert_mask) != 0;
 800539e:	480c      	ldr	r0, [pc, #48]	; (80053d0 <probe_state_monitor+0x34>)
 80053a0:	f7fc f9e4 	bl	800176c <GPIO_ReadInputData>
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <probe_state_monitor+0x38>)
  if (probe_get_state()) {
 80053a6:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	4283      	cmp	r3, r0
 80053ae:	d00d      	beq.n	80053cc <probe_state_monitor+0x30>
    sys_probe_state = PROBE_OFF;
 80053b0:	2200      	movs	r2, #0
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <probe_state_monitor+0x3c>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80053b4:	4d09      	ldr	r5, [pc, #36]	; (80053dc <probe_state_monitor+0x40>)
 80053b6:	4c0a      	ldr	r4, [pc, #40]	; (80053e0 <probe_state_monitor+0x44>)
    sys_probe_state = PROBE_OFF;
 80053b8:	701a      	strb	r2, [r3, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80053ba:	4e0a      	ldr	r6, [pc, #40]	; (80053e4 <probe_state_monitor+0x48>)
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80053bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80053c0:	7833      	ldrb	r3, [r6, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80053c2:	682a      	ldr	r2, [r5, #0]
    bit_true(sys_rt_exec_state, EXEC_MOTION_CANCEL);
 80053c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c8:	7033      	strb	r3, [r6, #0]
    memcpy(sys_probe_position, sys_position, sizeof(sys_position));
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	bf00      	nop
 80053d0:	40010c00 	.word	0x40010c00
 80053d4:	200011ca 	.word	0x200011ca
 80053d8:	2000119e 	.word	0x2000119e
 80053dc:	200011b4 	.word	0x200011b4
 80053e0:	200011a0 	.word	0x200011a0
 80053e4:	2000119d 	.word	0x2000119d

080053e8 <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 80053e8:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80053ea:	f7ff f989 	bl	8004700 <plan_get_current_block>
 80053ee:	b120      	cbz	r0, 80053fa <protocol_auto_cycle_start+0x12>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
  }
}
 80053f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80053f4:	2002      	movs	r0, #2
 80053f6:	f004 bb67 	b.w	8009ac8 <system_set_exec_state_flag>
 80053fa:	bd08      	pop	{r3, pc}

080053fc <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 80053fe:	4bac      	ldr	r3, [pc, #688]	; (80056b0 <protocol_exec_rt_system+0x2b4>)
 8005400:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005402:	2b00      	cmp	r3, #0
 8005404:	d14f      	bne.n	80054a6 <protocol_exec_rt_system+0xaa>
 8005406:	4cab      	ldr	r4, [pc, #684]	; (80056b4 <protocol_exec_rt_system+0x2b8>)
 8005408:	4dab      	ldr	r5, [pc, #684]	; (80056b8 <protocol_exec_rt_system+0x2bc>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 800540a:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 800540c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005410:	b393      	cbz	r3, 8005478 <protocol_exec_rt_system+0x7c>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8005412:	06ee      	lsls	r6, r5, #27
 8005414:	f100 80d6 	bmi.w	80055c4 <protocol_exec_rt_system+0x1c8>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005418:	07e8      	lsls	r0, r5, #31
 800541a:	f100 80f1 	bmi.w	8005600 <protocol_exec_rt_system+0x204>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800541e:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005422:	d00a      	beq.n	800543a <protocol_exec_rt_system+0x3e>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005424:	7823      	ldrb	r3, [r4, #0]
 8005426:	0799      	lsls	r1, r3, #30
 8005428:	f000 80f0 	beq.w	800560c <protocol_exec_rt_system+0x210>
 800542c:	b26e      	sxtb	r6, r5
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 800542e:	2e00      	cmp	r6, #0
 8005430:	f2c0 8161 	blt.w	80056f6 <protocol_exec_rt_system+0x2fa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005434:	20e8      	movs	r0, #232	; 0xe8
 8005436:	f004 fb51 	bl	8009adc <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 800543a:	07ab      	lsls	r3, r5, #30
 800543c:	d519      	bpl.n	8005472 <protocol_exec_rt_system+0x76>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 800543e:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005442:	d113      	bne.n	800546c <protocol_exec_rt_system+0x70>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005444:	7823      	ldrb	r3, [r4, #0]
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	f000 816d 	beq.w	8005726 <protocol_exec_rt_system+0x32a>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 813b 	bne.w	80056c8 <protocol_exec_rt_system+0x2cc>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005452:	2300      	movs	r3, #0
 8005454:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005456:	f7ff f953 	bl	8004700 <plan_get_current_block>
 800545a:	b120      	cbz	r0, 8005466 <protocol_exec_rt_system+0x6a>
 800545c:	78a3      	ldrb	r3, [r4, #2]
 800545e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005462:	f000 8198 	beq.w	8005796 <protocol_exec_rt_system+0x39a>
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              #ifndef MANUAL_POWER
              st_wake_up();
              #endif
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005466:	2300      	movs	r3, #0
 8005468:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 800546a:	7023      	strb	r3, [r4, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 800546c:	2002      	movs	r0, #2
 800546e:	f004 fb35 	bl	8009adc <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 8005472:	0769      	lsls	r1, r5, #29
 8005474:	f100 80a9 	bmi.w	80055ca <protocol_exec_rt_system+0x1ce>
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005478:	4b90      	ldr	r3, [pc, #576]	; (80056bc <protocol_exec_rt_system+0x2c0>)
 800547a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800547c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005480:	2b00      	cmp	r3, #0
 8005482:	d167      	bne.n	8005554 <protocol_exec_rt_system+0x158>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8005484:	4b8e      	ldr	r3, [pc, #568]	; (80056c0 <protocol_exec_rt_system+0x2c4>)
 8005486:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005488:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800548c:	b9db      	cbnz	r3, 80054c6 <protocol_exec_rt_system+0xca>
 800548e:	7823      	ldrb	r3, [r4, #0]
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005490:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005494:	d103      	bne.n	800549e <protocol_exec_rt_system+0xa2>
 8005496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005498:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800549c:	d147      	bne.n	800552e <protocol_exec_rt_system+0x132>
    st_prep_buffer();
  }

}
 800549e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    st_prep_buffer();
 80054a2:	f003 ba71 	b.w	8008988 <st_prep_buffer>
    sys.state = STATE_ALARM; // Set system alarm state
 80054a6:	2601      	movs	r6, #1
 80054a8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80054ac:	4c81      	ldr	r4, [pc, #516]	; (80056b4 <protocol_exec_rt_system+0x2b8>)
    report_alarm_message(rt_exec);
 80054ae:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80054b0:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 80054b2:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 80054b4:	f001 f9c4 	bl	8006840 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80054b8:	42b5      	cmp	r5, r6
 80054ba:	f240 8122 	bls.w	8005702 <protocol_exec_rt_system+0x306>
 80054be:	4d7e      	ldr	r5, [pc, #504]	; (80056b8 <protocol_exec_rt_system+0x2bc>)
    system_clear_exec_alarm(); // Clear alarm
 80054c0:	f004 fb1e 	bl	8009b00 <system_clear_exec_alarm>
 80054c4:	e7a1      	b.n	800540a <protocol_exec_rt_system+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80054c6:	f004 fb3f 	bl	8009b48 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80054ca:	7aa2      	ldrb	r2, [r4, #10]
 80054cc:	f015 0f01 	tst.w	r5, #1
 80054d0:	bf0c      	ite	eq
 80054d2:	4613      	moveq	r3, r2
 80054d4:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80054d6:	07a8      	lsls	r0, r5, #30
 80054d8:	bf44      	itt	mi
 80054da:	330a      	addmi	r3, #10
 80054dc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80054de:	0769      	lsls	r1, r5, #29
 80054e0:	bf44      	itt	mi
 80054e2:	3b0a      	submi	r3, #10
 80054e4:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80054e6:	072f      	lsls	r7, r5, #28
 80054e8:	bf44      	itt	mi
 80054ea:	3301      	addmi	r3, #1
 80054ec:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80054ee:	06ee      	lsls	r6, r5, #27
 80054f0:	bf44      	itt	mi
 80054f2:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 80054f6:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80054f8:	2bc8      	cmp	r3, #200	; 0xc8
 80054fa:	bf28      	it	cs
 80054fc:	23c8      	movcs	r3, #200	; 0xc8
 80054fe:	2b0a      	cmp	r3, #10
 8005500:	bf38      	it	cc
 8005502:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005504:	429a      	cmp	r2, r3
 8005506:	d006      	beq.n	8005516 <protocol_exec_rt_system+0x11a>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005508:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800550a:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 800550c:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800550e:	f042 0308 	orr.w	r3, r2, #8
 8005512:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005514:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005516:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8005518:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 800551a:	d502      	bpl.n	8005522 <protocol_exec_rt_system+0x126>
      if (sys.state == STATE_HOLD) {
 800551c:	2b10      	cmp	r3, #16
 800551e:	f000 80bd 	beq.w	800569c <protocol_exec_rt_system+0x2a0>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005522:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005526:	d0b3      	beq.n	8005490 <protocol_exec_rt_system+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 80df 	bne.w	80056ec <protocol_exec_rt_system+0x2f0>
        uint8_t coolant_state = gc_state.modal.coolant;
 800552e:	4f65      	ldr	r7, [pc, #404]	; (80056c4 <protocol_exec_rt_system+0x2c8>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005530:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005532:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005534:	f100 80f0 	bmi.w	8005718 <protocol_exec_rt_system+0x31c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005538:	0668      	lsls	r0, r5, #25
 800553a:	d505      	bpl.n	8005548 <protocol_exec_rt_system+0x14c>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 800553c:	0671      	lsls	r1, r6, #25
 800553e:	bf4c      	ite	mi
 8005540:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005544:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005548:	4630      	mov	r0, r6
 800554a:	f7fc fb81 	bl	8001c50 <coolant_set_state>
 800554e:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005550:	723e      	strb	r6, [r7, #8]
 8005552:	e79d      	b.n	8005490 <protocol_exec_rt_system+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005554:	f004 faf0 	bl	8009b38 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005558:	7a21      	ldrb	r1, [r4, #8]
 800555a:	f015 0f01 	tst.w	r5, #1
 800555e:	bf0c      	ite	eq
 8005560:	460b      	moveq	r3, r1
 8005562:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005564:	07ae      	lsls	r6, r5, #30
 8005566:	bf44      	itt	mi
 8005568:	330a      	addmi	r3, #10
 800556a:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 800556c:	0768      	lsls	r0, r5, #29
 800556e:	bf44      	itt	mi
 8005570:	3b0a      	submi	r3, #10
 8005572:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005574:	072f      	lsls	r7, r5, #28
 8005576:	bf44      	itt	mi
 8005578:	3301      	addmi	r3, #1
 800557a:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 800557c:	06ee      	lsls	r6, r5, #27
 800557e:	bf44      	itt	mi
 8005580:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8005584:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005586:	2bc8      	cmp	r3, #200	; 0xc8
 8005588:	bf28      	it	cs
 800558a:	23c8      	movcs	r3, #200	; 0xc8
 800558c:	2b0a      	cmp	r3, #10
 800558e:	bf38      	it	cc
 8005590:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005592:	7a60      	ldrb	r0, [r4, #9]
 8005594:	f015 0f20 	tst.w	r5, #32
 8005598:	bf14      	ite	ne
 800559a:	2264      	movne	r2, #100	; 0x64
 800559c:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 800559e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055a2:	bf18      	it	ne
 80055a4:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80055a6:	f015 0f80 	tst.w	r5, #128	; 0x80
 80055aa:	bf18      	it	ne
 80055ac:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d023      	beq.n	80055fa <protocol_exec_rt_system+0x1fe>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80055b2:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 80055b4:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80055b6:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80055b8:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 80055ba:	f7ff f913 	bl	80047e4 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80055be:	f7ff fc47 	bl	8004e50 <plan_cycle_reinitialize>
 80055c2:	e75f      	b.n	8005484 <protocol_exec_rt_system+0x88>
      sys.abort = true;  // Only place this is set true.
 80055c4:	2301      	movs	r3, #1
 80055c6:	7063      	strb	r3, [r4, #1]
      return; // Nothing else to do but exit.
 80055c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80055ca:	7823      	ldrb	r3, [r4, #0]
 80055cc:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80055d0:	d002      	beq.n	80055d8 <protocol_exec_rt_system+0x1dc>
 80055d2:	78e3      	ldrb	r3, [r4, #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d051      	beq.n	800567c <protocol_exec_rt_system+0x280>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80055d8:	78a3      	ldrb	r3, [r4, #2]
 80055da:	061f      	lsls	r7, r3, #24
 80055dc:	d452      	bmi.n	8005684 <protocol_exec_rt_system+0x288>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80055de:	f013 0220 	ands.w	r2, r3, #32
 80055e2:	d036      	beq.n	8005652 <protocol_exec_rt_system+0x256>
          sys.state = STATE_SAFETY_DOOR;
 80055e4:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80055e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80055f0:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80055f2:	2004      	movs	r0, #4
 80055f4:	f004 fa72 	bl	8009adc <system_clear_exec_state_flag>
 80055f8:	e73e      	b.n	8005478 <protocol_exec_rt_system+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80055fa:	4282      	cmp	r2, r0
 80055fc:	d1d9      	bne.n	80055b2 <protocol_exec_rt_system+0x1b6>
 80055fe:	e741      	b.n	8005484 <protocol_exec_rt_system+0x88>
      report_realtime_status();
 8005600:	f001 fd84 	bl	800710c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005604:	2001      	movs	r0, #1
 8005606:	f004 fa69 	bl	8009adc <system_clear_exec_state_flag>
 800560a:	e708      	b.n	800541e <protocol_exec_rt_system+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 800560c:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005610:	d122      	bne.n	8005658 <protocol_exec_rt_system+0x25c>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005612:	bb33      	cbnz	r3, 8005662 <protocol_exec_rt_system+0x266>
 8005614:	2201      	movs	r2, #1
 8005616:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005618:	066a      	lsls	r2, r5, #25
 800561a:	f100 809a 	bmi.w	8005752 <protocol_exec_rt_system+0x356>
        if (rt_exec & EXEC_FEED_HOLD) {
 800561e:	072f      	lsls	r7, r5, #28
 8005620:	b26e      	sxtb	r6, r5
 8005622:	d501      	bpl.n	8005628 <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005624:	2310      	movs	r3, #16
 8005626:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005628:	06a8      	lsls	r0, r5, #26
 800562a:	f57f af00 	bpl.w	800542e <protocol_exec_rt_system+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 800562e:	2006      	movs	r0, #6
 8005630:	f001 f91c 	bl	800686c <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005634:	78a3      	ldrb	r3, [r4, #2]
 8005636:	0619      	lsls	r1, r3, #24
 8005638:	d407      	bmi.n	800564a <protocol_exec_rt_system+0x24e>
            if (sys.state == STATE_SAFETY_DOOR) {
 800563a:	7822      	ldrb	r2, [r4, #0]
 800563c:	2a40      	cmp	r2, #64	; 0x40
 800563e:	f000 80b9 	beq.w	80057b4 <protocol_exec_rt_system+0x3b8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005642:	2a80      	cmp	r2, #128	; 0x80
 8005644:	d001      	beq.n	800564a <protocol_exec_rt_system+0x24e>
 8005646:	2240      	movs	r2, #64	; 0x40
 8005648:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800564a:	f043 0320 	orr.w	r3, r3, #32
 800564e:	70a3      	strb	r3, [r4, #2]
 8005650:	e6ed      	b.n	800542e <protocol_exec_rt_system+0x32>
          sys.suspend = SUSPEND_DISABLE;
 8005652:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005654:	7022      	strb	r2, [r4, #0]
 8005656:	e7cc      	b.n	80055f2 <protocol_exec_rt_system+0x1f6>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005658:	78a2      	ldrb	r2, [r4, #2]
 800565a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800565e:	f000 8089 	beq.w	8005774 <protocol_exec_rt_system+0x378>
 8005662:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005664:	0668      	lsls	r0, r5, #25
 8005666:	4616      	mov	r6, r2
 8005668:	d502      	bpl.n	8005670 <protocol_exec_rt_system+0x274>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 800566a:	0699      	lsls	r1, r3, #26
 800566c:	f140 80aa 	bpl.w	80057c4 <protocol_exec_rt_system+0x3c8>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005670:	072f      	lsls	r7, r5, #28
 8005672:	d5d9      	bpl.n	8005628 <protocol_exec_rt_system+0x22c>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005674:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005678:	d1d6      	bne.n	8005628 <protocol_exec_rt_system+0x22c>
 800567a:	e7d3      	b.n	8005624 <protocol_exec_rt_system+0x228>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800567c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8005680:	2b00      	cmp	r3, #0
 8005682:	da59      	bge.n	8005738 <protocol_exec_rt_system+0x33c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005684:	2300      	movs	r3, #0
 8005686:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005688:	f7fe fff8 	bl	800467c <plan_reset>
          st_reset();
 800568c:	f002 fff2 	bl	8008674 <st_reset>
          gc_sync_position();
 8005690:	f7fc fbe0 	bl	8001e54 <gc_sync_position>
          plan_sync_position();
 8005694:	f7ff fbbc 	bl	8004e10 <plan_sync_position>
 8005698:	78a3      	ldrb	r3, [r4, #2]
 800569a:	e7a0      	b.n	80055de <protocol_exec_rt_system+0x1e2>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 800569c:	7ae3      	ldrb	r3, [r4, #11]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d15c      	bne.n	800575c <protocol_exec_rt_system+0x360>
 80056a2:	2302      	movs	r3, #2
 80056a4:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80056a6:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80056aa:	f47f af40 	bne.w	800552e <protocol_exec_rt_system+0x132>
 80056ae:	e6f6      	b.n	800549e <protocol_exec_rt_system+0xa2>
 80056b0:	200011c8 	.word	0x200011c8
 80056b4:	20001188 	.word	0x20001188
 80056b8:	2000119d 	.word	0x2000119d
 80056bc:	20001184 	.word	0x20001184
 80056c0:	2000119c 	.word	0x2000119c
 80056c4:	200010d4 	.word	0x200010d4
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80056c8:	06da      	lsls	r2, r3, #27
 80056ca:	f57f aecf 	bpl.w	800546c <protocol_exec_rt_system+0x70>
 80056ce:	78a2      	ldrb	r2, [r4, #2]
 80056d0:	07d0      	lsls	r0, r2, #31
 80056d2:	f57f aecb 	bpl.w	800546c <protocol_exec_rt_system+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	f47f aebb 	bne.w	8005452 <protocol_exec_rt_system+0x56>
 80056dc:	7ae3      	ldrb	r3, [r4, #11]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f43f aeb7 	beq.w	8005452 <protocol_exec_rt_system+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 80056e4:	f043 0308 	orr.w	r3, r3, #8
 80056e8:	72e3      	strb	r3, [r4, #11]
 80056ea:	e6bf      	b.n	800546c <protocol_exec_rt_system+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80056ec:	f013 0f18 	tst.w	r3, #24
 80056f0:	f43f aece 	beq.w	8005490 <protocol_exec_rt_system+0x94>
 80056f4:	e71b      	b.n	800552e <protocol_exec_rt_system+0x132>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80056f6:	7823      	ldrb	r3, [r4, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d036      	beq.n	800576a <protocol_exec_rt_system+0x36e>
        sys.state = STATE_SLEEP; 
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	7023      	strb	r3, [r4, #0]
 8005700:	e698      	b.n	8005434 <protocol_exec_rt_system+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005702:	4630      	mov	r0, r6
 8005704:	f001 f8b2 	bl	800686c <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005708:	2010      	movs	r0, #16
 800570a:	f004 f9e7 	bl	8009adc <system_clear_exec_state_flag>
 800570e:	4d2f      	ldr	r5, [pc, #188]	; (80057cc <protocol_exec_rt_system+0x3d0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005710:	782b      	ldrb	r3, [r5, #0]
 8005712:	06df      	lsls	r7, r3, #27
 8005714:	d5fc      	bpl.n	8005710 <protocol_exec_rt_system+0x314>
 8005716:	e6d3      	b.n	80054c0 <protocol_exec_rt_system+0xc4>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005718:	0633      	lsls	r3, r6, #24
 800571a:	bf4c      	ite	mi
 800571c:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005720:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 8005724:	e708      	b.n	8005538 <protocol_exec_rt_system+0x13c>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005726:	78a3      	ldrb	r3, [r4, #2]
 8005728:	f013 0220 	ands.w	r2, r3, #32
 800572c:	f47f ae9e 	bne.w	800546c <protocol_exec_rt_system+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005730:	06df      	lsls	r7, r3, #27
 8005732:	d538      	bpl.n	80057a6 <protocol_exec_rt_system+0x3aa>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005734:	7022      	strb	r2, [r4, #0]
 8005736:	e68c      	b.n	8005452 <protocol_exec_rt_system+0x56>
        plan_cycle_reinitialize();
 8005738:	f7ff fb8a 	bl	8004e50 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 800573c:	7923      	ldrb	r3, [r4, #4]
 800573e:	079a      	lsls	r2, r3, #30
 8005740:	d503      	bpl.n	800574a <protocol_exec_rt_system+0x34e>
 8005742:	78a2      	ldrb	r2, [r4, #2]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800574a:	f023 0306 	bic.w	r3, r3, #6
 800574e:	7123      	strb	r3, [r4, #4]
 8005750:	e74f      	b.n	80055f2 <protocol_exec_rt_system+0x1f6>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005752:	2141      	movs	r1, #65	; 0x41
 8005754:	b26a      	sxtb	r2, r5
 8005756:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005758:	70a1      	strb	r1, [r4, #2]
 800575a:	e789      	b.n	8005670 <protocol_exec_rt_system+0x274>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800575c:	07d9      	lsls	r1, r3, #31
 800575e:	f57f ae9b 	bpl.w	8005498 <protocol_exec_rt_system+0x9c>
 8005762:	f043 0304 	orr.w	r3, r3, #4
 8005766:	72e3      	strb	r3, [r4, #11]
 8005768:	e79d      	b.n	80056a6 <protocol_exec_rt_system+0x2aa>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800576a:	78a3      	ldrb	r3, [r4, #2]
 800576c:	f043 0305 	orr.w	r3, r3, #5
 8005770:	70a3      	strb	r3, [r4, #2]
 8005772:	e7c3      	b.n	80056fc <protocol_exec_rt_system+0x300>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005774:	f003 f8f2 	bl	800895c <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005778:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800577a:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800577c:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800577e:	2b20      	cmp	r3, #32
 8005780:	f47f af47 	bne.w	8005612 <protocol_exec_rt_system+0x216>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005784:	b26e      	sxtb	r6, r5
 8005786:	2e00      	cmp	r6, #0
 8005788:	f6ff af4e 	blt.w	8005628 <protocol_exec_rt_system+0x22c>
 800578c:	78a3      	ldrb	r3, [r4, #2]
 800578e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005792:	70a3      	strb	r3, [r4, #2]
 8005794:	e748      	b.n	8005628 <protocol_exec_rt_system+0x22c>
              sys.state = STATE_CYCLE;
 8005796:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005798:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800579a:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800579c:	f003 f8f4 	bl	8008988 <st_prep_buffer>
              st_wake_up();
 80057a0:	f002 fd10 	bl	80081c4 <st_wake_up>
 80057a4:	e662      	b.n	800546c <protocol_exec_rt_system+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80057a6:	075e      	lsls	r6, r3, #29
 80057a8:	f57f ae60 	bpl.w	800546c <protocol_exec_rt_system+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 80057ac:	f043 0308 	orr.w	r3, r3, #8
 80057b0:	70a3      	strb	r3, [r4, #2]
 80057b2:	e65b      	b.n	800546c <protocol_exec_rt_system+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 80057b4:	071a      	lsls	r2, r3, #28
 80057b6:	f57f af46 	bpl.w	8005646 <protocol_exec_rt_system+0x24a>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 80057ba:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 80057be:	f043 0302 	orr.w	r3, r3, #2
 80057c2:	e740      	b.n	8005646 <protocol_exec_rt_system+0x24a>
 80057c4:	78a1      	ldrb	r1, [r4, #2]
 80057c6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80057ca:	e7c4      	b.n	8005756 <protocol_exec_rt_system+0x35a>
 80057cc:	2000119d 	.word	0x2000119d

080057d0 <protocol_exec_rt_suspend>:
// The system will enter this loop, create local variables for suspend tasks, and return to
// whatever function that invoked the suspend, such that Grbl resumes normal operation.
// This function is written in a way to promote custom parking motions. Simply use this as a
// template
static void protocol_exec_rt_suspend()
{
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	b083      	sub	sp, #12
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 80057d6:	f7fe ff93 	bl	8004700 <plan_get_current_block>
  uint8_t restore_condition;
  #ifdef VARIABLE_SPINDLE
    float restore_spindle_speed;
    if (block == NULL) {
 80057da:	2800      	cmp	r0, #0
 80057dc:	f000 82e0 	beq.w	8005da0 <protocol_exec_rt_suspend+0x5d0>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
      restore_spindle_speed = gc_state.spindle_speed;
    } else {
      restore_condition = block->condition;
 80057e0:	7e83      	ldrb	r3, [r0, #26]
      restore_spindle_speed = block->spindle_speed;
 80057e2:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
      restore_condition = block->condition;
 80057e6:	9301      	str	r3, [sp, #4]
    }
    #ifdef DISABLE_LASER_DURING_HOLD
      if (bit_istrue(settings.flags, BITFLAG_LASER_MODE)) {
 80057e8:	4eba      	ldr	r6, [pc, #744]	; (8005ad4 <protocol_exec_rt_suspend+0x304>)
 80057ea:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 80057ee:	079b      	lsls	r3, r3, #30
 80057f0:	f100 82a7 	bmi.w	8005d42 <protocol_exec_rt_suspend+0x572>
        // NOTE: Hold ensured as completed by condition check at the beginning of suspend routine.
        if (sys.spindle_stop_ovr) {
          // Handles beginning of spindle stop
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 80057f4:	2500      	movs	r5, #0
 80057f6:	4cb8      	ldr	r4, [pc, #736]	; (8005ad8 <protocol_exec_rt_suspend+0x308>)
  while (sys.suspend) {
 80057f8:	78a3      	ldrb	r3, [r4, #2]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 809a 	beq.w	8005934 <protocol_exec_rt_suspend+0x164>
    if (sys.abort) { return; }
 8005800:	7862      	ldrb	r2, [r4, #1]
 8005802:	2a00      	cmp	r2, #0
 8005804:	f040 8096 	bne.w	8005934 <protocol_exec_rt_suspend+0x164>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 8005808:	07df      	lsls	r7, r3, #31
 800580a:	d51a      	bpl.n	8005842 <protocol_exec_rt_suspend+0x72>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 800580c:	7821      	ldrb	r1, [r4, #0]
 800580e:	f011 00c0 	ands.w	r0, r1, #192	; 0xc0
 8005812:	f000 8092 	beq.w	800593a <protocol_exec_rt_suspend+0x16a>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 8005816:	f013 0b04 	ands.w	fp, r3, #4
 800581a:	f000 817c 	beq.w	8005b16 <protocol_exec_rt_suspend+0x346>
          if (sys.state == STATE_SLEEP) {
 800581e:	2980      	cmp	r1, #128	; 0x80
 8005820:	f000 82d2 	beq.w	8005dc8 <protocol_exec_rt_suspend+0x5f8>
          if (sys.state == STATE_SAFETY_DOOR) {
 8005824:	2940      	cmp	r1, #64	; 0x40
 8005826:	f000 8268 	beq.w	8005cfa <protocol_exec_rt_suspend+0x52a>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 800582a:	0718      	lsls	r0, r3, #28
 800582c:	d509      	bpl.n	8005842 <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 800582e:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8005aec <protocol_exec_rt_suspend+0x31c>
 8005832:	f89a 1009 	ldrb.w	r1, [sl, #9]
 8005836:	2900      	cmp	r1, #0
 8005838:	f000 81d5 	beq.w	8005be6 <protocol_exec_rt_suspend+0x416>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800583c:	0799      	lsls	r1, r3, #30
 800583e:	f140 8227 	bpl.w	8005c90 <protocol_exec_rt_suspend+0x4c0>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005842:	4ba6      	ldr	r3, [pc, #664]	; (8005adc <protocol_exec_rt_suspend+0x30c>)
 8005844:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005846:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800584a:	2b00      	cmp	r3, #0
 800584c:	f040 808a 	bne.w	8005964 <protocol_exec_rt_suspend+0x194>
 8005850:	4fa3      	ldr	r7, [pc, #652]	; (8005ae0 <protocol_exec_rt_suspend+0x310>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005852:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8005854:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005858:	2b00      	cmp	r3, #0
 800585a:	d054      	beq.n	8005906 <protocol_exec_rt_suspend+0x136>
    if (rt_exec & EXEC_RESET) {
 800585c:	f01b 0f10 	tst.w	fp, #16
 8005860:	f040 8126 	bne.w	8005ab0 <protocol_exec_rt_suspend+0x2e0>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005864:	f01b 0f01 	tst.w	fp, #1
 8005868:	f040 8175 	bne.w	8005b56 <protocol_exec_rt_suspend+0x386>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800586c:	f01b 0fe8 	tst.w	fp, #232	; 0xe8
 8005870:	d00c      	beq.n	800588c <protocol_exec_rt_suspend+0xbc>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005872:	7823      	ldrb	r3, [r4, #0]
 8005874:	0798      	lsls	r0, r3, #30
 8005876:	f000 8174 	beq.w	8005b62 <protocol_exec_rt_suspend+0x392>
 800587a:	fa4f f98b 	sxtb.w	r9, fp
      if (rt_exec & EXEC_SLEEP) {
 800587e:	f1b9 0f00 	cmp.w	r9, #0
 8005882:	f2c0 819d 	blt.w	8005bc0 <protocol_exec_rt_suspend+0x3f0>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005886:	20e8      	movs	r0, #232	; 0xe8
 8005888:	f004 f928 	bl	8009adc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 800588c:	f01b 0f02 	tst.w	fp, #2
 8005890:	d019      	beq.n	80058c6 <protocol_exec_rt_suspend+0xf6>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005892:	f01b 0f68 	tst.w	fp, #104	; 0x68
 8005896:	d113      	bne.n	80058c0 <protocol_exec_rt_suspend+0xf0>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005898:	7823      	ldrb	r3, [r4, #0]
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	f000 8248 	beq.w	8005d30 <protocol_exec_rt_suspend+0x560>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f040 8202 	bne.w	8005caa <protocol_exec_rt_suspend+0x4da>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80058a6:	2300      	movs	r3, #0
 80058a8:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80058aa:	f7fe ff29 	bl	8004700 <plan_get_current_block>
 80058ae:	b120      	cbz	r0, 80058ba <protocol_exec_rt_suspend+0xea>
 80058b0:	78a3      	ldrb	r3, [r4, #2]
 80058b2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80058b6:	f000 827c 	beq.w	8005db2 <protocol_exec_rt_suspend+0x5e2>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80058ba:	2300      	movs	r3, #0
 80058bc:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80058be:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80058c0:	2002      	movs	r0, #2
 80058c2:	f004 f90b 	bl	8009adc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 80058c6:	f01b 0f04 	tst.w	fp, #4
 80058ca:	d01c      	beq.n	8005906 <protocol_exec_rt_suspend+0x136>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80058cc:	7823      	ldrb	r3, [r4, #0]
 80058ce:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80058d2:	f000 810d 	beq.w	8005af0 <protocol_exec_rt_suspend+0x320>
 80058d6:	78e3      	ldrb	r3, [r4, #3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 8109 	bne.w	8005af0 <protocol_exec_rt_suspend+0x320>
 80058de:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f2c0 81fd 	blt.w	8005ce2 <protocol_exec_rt_suspend+0x512>
        plan_cycle_reinitialize();
 80058e8:	f7ff fab2 	bl	8004e50 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80058ec:	7923      	ldrb	r3, [r4, #4]
 80058ee:	079f      	lsls	r7, r3, #30
 80058f0:	d503      	bpl.n	80058fa <protocol_exec_rt_suspend+0x12a>
 80058f2:	78a2      	ldrb	r2, [r4, #2]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80058fa:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80058fe:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 8005900:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005902:	f004 f8eb 	bl	8009adc <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005906:	4b77      	ldr	r3, [pc, #476]	; (8005ae4 <protocol_exec_rt_suspend+0x314>)
 8005908:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800590a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800590e:	2b00      	cmp	r3, #0
 8005910:	d136      	bne.n	8005980 <protocol_exec_rt_suspend+0x1b0>
  rt_exec = sys_rt_exec_accessory_override;
 8005912:	4b75      	ldr	r3, [pc, #468]	; (8005ae8 <protocol_exec_rt_suspend+0x318>)
 8005914:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005916:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800591a:	2b00      	cmp	r3, #0
 800591c:	d174      	bne.n	8005a08 <protocol_exec_rt_suspend+0x238>
 800591e:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005920:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005924:	f43f af68 	beq.w	80057f8 <protocol_exec_rt_suspend+0x28>
    st_prep_buffer();
 8005928:	f003 f82e 	bl	8008988 <st_prep_buffer>
  while (sys.suspend) {
 800592c:	78a3      	ldrb	r3, [r4, #2]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f47f af66 	bne.w	8005800 <protocol_exec_rt_suspend+0x30>
    }

    protocol_exec_rt_system();

  }
}
 8005934:	b003      	add	sp, #12
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.spindle_stop_ovr) {
 800593a:	7ae3      	ldrb	r3, [r4, #11]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80ba 	beq.w	8005ab6 <protocol_exec_rt_suspend+0x2e6>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 8005942:	079f      	lsls	r7, r3, #30
 8005944:	f140 80f7 	bpl.w	8005b36 <protocol_exec_rt_suspend+0x366>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005948:	4b68      	ldr	r3, [pc, #416]	; (8005aec <protocol_exec_rt_suspend+0x31c>)
 800594a:	7a5b      	ldrb	r3, [r3, #9]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f040 81e9 	bne.w	8005d24 <protocol_exec_rt_suspend+0x554>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8005952:	2300      	movs	r3, #0
 8005954:	72e3      	strb	r3, [r4, #11]
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005956:	4b61      	ldr	r3, [pc, #388]	; (8005adc <protocol_exec_rt_suspend+0x30c>)
 8005958:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 800595a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800595e:	2b00      	cmp	r3, #0
 8005960:	f43f af76 	beq.w	8005850 <protocol_exec_rt_suspend+0x80>
    sys.state = STATE_ALARM; // Set system alarm state
 8005964:	2701      	movs	r7, #1
    report_alarm_message(rt_exec);
 8005966:	4658      	mov	r0, fp
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005968:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    sys.state = STATE_ALARM; // Set system alarm state
 800596c:	7027      	strb	r7, [r4, #0]
    report_alarm_message(rt_exec);
 800596e:	f000 ff67 	bl	8006840 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005972:	45bb      	cmp	fp, r7
 8005974:	f240 8181 	bls.w	8005c7a <protocol_exec_rt_suspend+0x4aa>
 8005978:	4f59      	ldr	r7, [pc, #356]	; (8005ae0 <protocol_exec_rt_suspend+0x310>)
    system_clear_exec_alarm(); // Clear alarm
 800597a:	f004 f8c1 	bl	8009b00 <system_clear_exec_alarm>
 800597e:	e768      	b.n	8005852 <protocol_exec_rt_suspend+0x82>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005980:	f004 f8da 	bl	8009b38 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005984:	f01b 0f01 	tst.w	fp, #1
 8005988:	bf18      	it	ne
 800598a:	2364      	movne	r3, #100	; 0x64
 800598c:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 800598e:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8005990:	bf08      	it	eq
 8005992:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005994:	f01b 0f02 	tst.w	fp, #2
 8005998:	bf1c      	itt	ne
 800599a:	330a      	addne	r3, #10
 800599c:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 800599e:	f01b 0f04 	tst.w	fp, #4
 80059a2:	bf1c      	itt	ne
 80059a4:	3b0a      	subne	r3, #10
 80059a6:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 80059a8:	f01b 0f08 	tst.w	fp, #8
 80059ac:	bf1c      	itt	ne
 80059ae:	3301      	addne	r3, #1
 80059b0:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 80059b2:	f01b 0f10 	tst.w	fp, #16
 80059b6:	bf1c      	itt	ne
 80059b8:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 80059bc:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 80059be:	2bc8      	cmp	r3, #200	; 0xc8
 80059c0:	bf28      	it	cs
 80059c2:	23c8      	movcs	r3, #200	; 0xc8
 80059c4:	2b0a      	cmp	r3, #10
 80059c6:	bf38      	it	cc
 80059c8:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80059ca:	f01b 0f20 	tst.w	fp, #32
 80059ce:	bf14      	ite	ne
 80059d0:	2164      	movne	r1, #100	; 0x64
 80059d2:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80059d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80059d8:	bf18      	it	ne
 80059da:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80059dc:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80059e0:	bf18      	it	ne
 80059e2:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d101      	bne.n	80059ec <protocol_exec_rt_suspend+0x21c>
 80059e8:	4288      	cmp	r0, r1
 80059ea:	d092      	beq.n	8005912 <protocol_exec_rt_suspend+0x142>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80059ec:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 80059ee:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 80059f0:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80059f2:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 80059f4:	f7fe fef6 	bl	80047e4 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80059f8:	f7ff fa2a 	bl	8004e50 <plan_cycle_reinitialize>
  rt_exec = sys_rt_exec_accessory_override;
 80059fc:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <protocol_exec_rt_suspend+0x318>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005a00:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d08a      	beq.n	800591e <protocol_exec_rt_suspend+0x14e>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005a08:	f004 f89e 	bl	8009b48 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005a0c:	f01b 0f01 	tst.w	fp, #1
 8005a10:	bf18      	it	ne
 8005a12:	2364      	movne	r3, #100	; 0x64
 8005a14:	7aa2      	ldrb	r2, [r4, #10]
 8005a16:	bf08      	it	eq
 8005a18:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005a1a:	f01b 0f02 	tst.w	fp, #2
 8005a1e:	bf1c      	itt	ne
 8005a20:	330a      	addne	r3, #10
 8005a22:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005a24:	f01b 0f04 	tst.w	fp, #4
 8005a28:	bf1c      	itt	ne
 8005a2a:	3b0a      	subne	r3, #10
 8005a2c:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005a2e:	f01b 0f08 	tst.w	fp, #8
 8005a32:	bf1c      	itt	ne
 8005a34:	3301      	addne	r3, #1
 8005a36:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005a38:	f01b 0f10 	tst.w	fp, #16
 8005a3c:	bf1c      	itt	ne
 8005a3e:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8005a42:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005a44:	2bc8      	cmp	r3, #200	; 0xc8
 8005a46:	bf28      	it	cs
 8005a48:	23c8      	movcs	r3, #200	; 0xc8
 8005a4a:	2b0a      	cmp	r3, #10
 8005a4c:	bf38      	it	cc
 8005a4e:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d006      	beq.n	8005a62 <protocol_exec_rt_suspend+0x292>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005a54:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005a56:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005a58:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005a5a:	f042 0308 	orr.w	r3, r2, #8
 8005a5e:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005a60:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005a62:	f01b 0f20 	tst.w	fp, #32
      if (sys.state == STATE_HOLD) {
 8005a66:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005a68:	d002      	beq.n	8005a70 <protocol_exec_rt_suspend+0x2a0>
      if (sys.state == STATE_HOLD) {
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	f000 814f 	beq.w	8005d0e <protocol_exec_rt_suspend+0x53e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005a70:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005a74:	f43f af54 	beq.w	8005920 <protocol_exec_rt_suspend+0x150>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f040 80d6 	bne.w	8005c2a <protocol_exec_rt_suspend+0x45a>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005a7e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8005aec <protocol_exec_rt_suspend+0x31c>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005a82:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8005a86:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005a8a:	f040 80da 	bne.w	8005c42 <protocol_exec_rt_suspend+0x472>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005a8e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005a92:	d006      	beq.n	8005aa2 <protocol_exec_rt_suspend+0x2d2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005a94:	f019 0f40 	tst.w	r9, #64	; 0x40
 8005a98:	bf14      	ite	ne
 8005a9a:	f009 09bf 	andne.w	r9, r9, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005a9e:	f049 0940 	orreq.w	r9, r9, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005aa2:	4648      	mov	r0, r9
 8005aa4:	f7fc f8d4 	bl	8001c50 <coolant_set_state>
 8005aa8:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005aaa:	f88a 9008 	strb.w	r9, [sl, #8]
 8005aae:	e737      	b.n	8005920 <protocol_exec_rt_suspend+0x150>
      sys.abort = true;  // Only place this is set true.
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	7063      	strb	r3, [r4, #1]
 8005ab4:	e6a0      	b.n	80057f8 <protocol_exec_rt_suspend+0x28>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8005ab6:	7923      	ldrb	r3, [r4, #4]
 8005ab8:	071a      	lsls	r2, r3, #28
 8005aba:	f57f aec2 	bpl.w	8005842 <protocol_exec_rt_suspend+0x72>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005ac6:	f002 fa3d 	bl	8007f44 <spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005aca:	7923      	ldrb	r3, [r4, #4]
 8005acc:	f023 0308 	bic.w	r3, r3, #8
 8005ad0:	7123      	strb	r3, [r4, #4]
 8005ad2:	e6b6      	b.n	8005842 <protocol_exec_rt_suspend+0x72>
 8005ad4:	2000134c 	.word	0x2000134c
 8005ad8:	20001188 	.word	0x20001188
 8005adc:	200011c8 	.word	0x200011c8
 8005ae0:	2000119d 	.word	0x2000119d
 8005ae4:	20001184 	.word	0x20001184
 8005ae8:	2000119c 	.word	0x2000119c
 8005aec:	200010d4 	.word	0x200010d4
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 8005af0:	78a3      	ldrb	r3, [r4, #2]
 8005af2:	0618      	lsls	r0, r3, #24
 8005af4:	f100 80f5 	bmi.w	8005ce2 <protocol_exec_rt_suspend+0x512>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8005af8:	f013 0220 	ands.w	r2, r3, #32
 8005afc:	f000 8092 	beq.w	8005c24 <protocol_exec_rt_suspend+0x454>
          sys.state = STATE_SAFETY_DOOR;
 8005b00:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8005b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8005b0c:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8005b0e:	2004      	movs	r0, #4
 8005b10:	f003 ffe4 	bl	8009adc <system_clear_exec_state_flag>
 8005b14:	e6f7      	b.n	8005906 <protocol_exec_rt_suspend+0x136>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005b16:	4629      	mov	r1, r5
 8005b18:	4658      	mov	r0, fp
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8005b1a:	f884 b00b 	strb.w	fp, [r4, #11]
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005b1e:	f002 fa11 	bl	8007f44 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 8005b22:	4658      	mov	r0, fp
 8005b24:	f7fc f894 	bl	8001c50 <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8005b28:	78a3      	ldrb	r3, [r4, #2]
 8005b2a:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	70a3      	strb	r3, [r4, #2]
 8005b34:	e685      	b.n	8005842 <protocol_exec_rt_suspend+0x72>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 8005b36:	f013 0f0c 	tst.w	r3, #12
 8005b3a:	f43f ae82 	beq.w	8005842 <protocol_exec_rt_suspend+0x72>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8005b3e:	4abe      	ldr	r2, [pc, #760]	; (8005e38 <protocol_exec_rt_suspend+0x668>)
 8005b40:	7a52      	ldrb	r2, [r2, #9]
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	f040 810d 	bne.w	8005d62 <protocol_exec_rt_suspend+0x592>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005b48:	0719      	lsls	r1, r3, #28
 8005b4a:	f57f af02 	bpl.w	8005952 <protocol_exec_rt_suspend+0x182>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 8005b4e:	2002      	movs	r0, #2
 8005b50:	f003 ffba 	bl	8009ac8 <system_set_exec_state_flag>
 8005b54:	e6fd      	b.n	8005952 <protocol_exec_rt_suspend+0x182>
      report_realtime_status();
 8005b56:	f001 fad9 	bl	800710c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	f003 ffbe 	bl	8009adc <system_clear_exec_state_flag>
 8005b60:	e684      	b.n	800586c <protocol_exec_rt_suspend+0x9c>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 8005b62:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005b66:	d07c      	beq.n	8005c62 <protocol_exec_rt_suspend+0x492>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8005b68:	78a2      	ldrb	r2, [r4, #2]
 8005b6a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8005b6e:	d070      	beq.n	8005c52 <protocol_exec_rt_suspend+0x482>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005b70:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005b74:	fa4f f98b 	sxtb.w	r9, fp
 8005b78:	d002      	beq.n	8005b80 <protocol_exec_rt_suspend+0x3b0>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005b7a:	0699      	lsls	r1, r3, #26
 8005b7c:	f140 8157 	bpl.w	8005e2e <protocol_exec_rt_suspend+0x65e>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005b80:	f01b 0f08 	tst.w	fp, #8
 8005b84:	d003      	beq.n	8005b8e <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005b86:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 8005b8a:	f000 80a7 	beq.w	8005cdc <protocol_exec_rt_suspend+0x50c>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8005b8e:	f01b 0f20 	tst.w	fp, #32
 8005b92:	f43f ae74 	beq.w	800587e <protocol_exec_rt_suspend+0xae>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8005b96:	2006      	movs	r0, #6
 8005b98:	f000 fe68 	bl	800686c <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8005b9c:	78a3      	ldrb	r3, [r4, #2]
 8005b9e:	061a      	lsls	r2, r3, #24
 8005ba0:	d407      	bmi.n	8005bb2 <protocol_exec_rt_suspend+0x3e2>
            if (sys.state == STATE_SAFETY_DOOR) {
 8005ba2:	7821      	ldrb	r1, [r4, #0]
 8005ba4:	2940      	cmp	r1, #64	; 0x40
 8005ba6:	f000 80f3 	beq.w	8005d90 <protocol_exec_rt_suspend+0x5c0>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8005baa:	2980      	cmp	r1, #128	; 0x80
 8005bac:	d001      	beq.n	8005bb2 <protocol_exec_rt_suspend+0x3e2>
 8005bae:	2140      	movs	r1, #64	; 0x40
 8005bb0:	7021      	strb	r1, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005bb2:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8005bb6:	f1b9 0f00 	cmp.w	r9, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8005bba:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 8005bbc:	f6bf ae63 	bge.w	8005886 <protocol_exec_rt_suspend+0xb6>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005bc0:	7823      	ldrb	r3, [r4, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	f000 80dd 	beq.w	8005d82 <protocol_exec_rt_suspend+0x5b2>
        sys.state = STATE_SLEEP; 
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	7023      	strb	r3, [r4, #0]
 8005bcc:	e65b      	b.n	8005886 <protocol_exec_rt_suspend+0xb6>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005bd6:	f002 f9b5 	bl	8007f44 <spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005bda:	2101      	movs	r1, #1
 8005bdc:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8005be0:	f7fe fb0e 	bl	8004200 <delay_sec>
 8005be4:	78a3      	ldrb	r3, [r4, #2]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005be6:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8005bea:	f003 0102 	and.w	r1, r3, #2
 8005bee:	b17a      	cbz	r2, 8005c10 <protocol_exec_rt_suspend+0x440>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	f47f ae26 	bne.w	8005842 <protocol_exec_rt_suspend+0x72>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	f003 0040 	and.w	r0, r3, #64	; 0x40
 8005bfc:	f7fc f828 	bl	8001c50 <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8005c00:	2101      	movs	r1, #1
 8005c02:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005c06:	f7fe fafb 	bl	8004200 <delay_sec>
 8005c0a:	78a3      	ldrb	r3, [r4, #2]
 8005c0c:	f003 0102 	and.w	r1, r3, #2
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8005c10:	2900      	cmp	r1, #0
 8005c12:	f47f ae16 	bne.w	8005842 <protocol_exec_rt_suspend+0x72>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005c16:	f043 0310 	orr.w	r3, r3, #16
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005c1a:	2002      	movs	r0, #2
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8005c1c:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8005c1e:	f003 ff53 	bl	8009ac8 <system_set_exec_state_flag>
 8005c22:	e60e      	b.n	8005842 <protocol_exec_rt_suspend+0x72>
          sys.suspend = SUSPEND_DISABLE;
 8005c24:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8005c26:	7022      	strb	r2, [r4, #0]
 8005c28:	e771      	b.n	8005b0e <protocol_exec_rt_suspend+0x33e>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005c2a:	f013 0f18 	tst.w	r3, #24
 8005c2e:	f43f ae77 	beq.w	8005920 <protocol_exec_rt_suspend+0x150>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005c32:	f8df a204 	ldr.w	sl, [pc, #516]	; 8005e38 <protocol_exec_rt_suspend+0x668>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005c36:	f01b 0f80 	tst.w	fp, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8005c3a:	f89a 9008 	ldrb.w	r9, [sl, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005c3e:	f43f af26 	beq.w	8005a8e <protocol_exec_rt_suspend+0x2be>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8005c42:	f019 0f80 	tst.w	r9, #128	; 0x80
 8005c46:	bf14      	ite	ne
 8005c48:	f009 097f 	andne.w	r9, r9, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8005c4c:	f049 0980 	orreq.w	r9, r9, #128	; 0x80
 8005c50:	e71d      	b.n	8005a8e <protocol_exec_rt_suspend+0x2be>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8005c52:	f002 fe83 	bl	800895c <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005c56:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005c58:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8005c5a:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	f000 80db 	beq.w	8005e18 <protocol_exec_rt_suspend+0x648>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d184      	bne.n	8005b70 <protocol_exec_rt_suspend+0x3a0>
 8005c66:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005c68:	f01b 0f40 	tst.w	fp, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8005c6c:	70a2      	strb	r2, [r4, #2]
 8005c6e:	fa4f f98b 	sxtb.w	r9, fp
        if (rt_exec & EXEC_MOTION_CANCEL) {
 8005c72:	d02f      	beq.n	8005cd4 <protocol_exec_rt_suspend+0x504>
 8005c74:	2141      	movs	r1, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005c76:	70a1      	strb	r1, [r4, #2]
 8005c78:	e782      	b.n	8005b80 <protocol_exec_rt_suspend+0x3b0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f000 fdf6 	bl	800686c <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8005c80:	2010      	movs	r0, #16
 8005c82:	f003 ff2b 	bl	8009adc <system_clear_exec_state_flag>
 8005c86:	4f6d      	ldr	r7, [pc, #436]	; (8005e3c <protocol_exec_rt_suspend+0x66c>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8005c88:	783b      	ldrb	r3, [r7, #0]
 8005c8a:	06db      	lsls	r3, r3, #27
 8005c8c:	d5fc      	bpl.n	8005c88 <protocol_exec_rt_suspend+0x4b8>
 8005c8e:	e674      	b.n	800597a <protocol_exec_rt_suspend+0x1aa>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005c90:	f896 1068 	ldrb.w	r1, [r6, #104]	; 0x68
 8005c94:	078a      	lsls	r2, r1, #30
 8005c96:	d59a      	bpl.n	8005bce <protocol_exec_rt_suspend+0x3fe>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005c98:	7921      	ldrb	r1, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005c9a:	f89a 0008 	ldrb.w	r0, [sl, #8]
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005c9e:	f041 0208 	orr.w	r2, r1, #8
 8005ca2:	7122      	strb	r2, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d0b6      	beq.n	8005c16 <protocol_exec_rt_suspend+0x446>
 8005ca8:	e7a5      	b.n	8005bf6 <protocol_exec_rt_suspend+0x426>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005caa:	06da      	lsls	r2, r3, #27
 8005cac:	f57f ae08 	bpl.w	80058c0 <protocol_exec_rt_suspend+0xf0>
 8005cb0:	78a2      	ldrb	r2, [r4, #2]
 8005cb2:	07d2      	lsls	r2, r2, #31
 8005cb4:	f57f ae04 	bpl.w	80058c0 <protocol_exec_rt_suspend+0xf0>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	f47f adf4 	bne.w	80058a6 <protocol_exec_rt_suspend+0xd6>
 8005cbe:	7ae3      	ldrb	r3, [r4, #11]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f43f adf0 	beq.w	80058a6 <protocol_exec_rt_suspend+0xd6>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005cc6:	f043 0308 	orr.w	r3, r3, #8
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005cca:	2002      	movs	r0, #2
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8005ccc:	72e3      	strb	r3, [r4, #11]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005cce:	f003 ff05 	bl	8009adc <system_clear_exec_state_flag>
 8005cd2:	e5f8      	b.n	80058c6 <protocol_exec_rt_suspend+0xf6>
        if (rt_exec & EXEC_FEED_HOLD) {
 8005cd4:	f01b 0f08 	tst.w	fp, #8
 8005cd8:	f43f af59 	beq.w	8005b8e <protocol_exec_rt_suspend+0x3be>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8005cdc:	2310      	movs	r3, #16
 8005cde:	7023      	strb	r3, [r4, #0]
 8005ce0:	e755      	b.n	8005b8e <protocol_exec_rt_suspend+0x3be>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	7123      	strb	r3, [r4, #4]
          plan_reset();
 8005ce6:	f7fe fcc9 	bl	800467c <plan_reset>
          st_reset();
 8005cea:	f002 fcc3 	bl	8008674 <st_reset>
          gc_sync_position();
 8005cee:	f7fc f8b1 	bl	8001e54 <gc_sync_position>
          plan_sync_position();
 8005cf2:	f7ff f88d 	bl	8004e10 <plan_sync_position>
 8005cf6:	78a3      	ldrb	r3, [r4, #2]
 8005cf8:	e6fe      	b.n	8005af8 <protocol_exec_rt_suspend+0x328>
            if (!(system_check_safety_door_ajar())) {
 8005cfa:	f003 fc4d 	bl	8009598 <system_check_safety_door_ajar>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005cfe:	78a3      	ldrb	r3, [r4, #2]
            if (!(system_check_safety_door_ajar())) {
 8005d00:	2800      	cmp	r0, #0
 8005d02:	f47f ad92 	bne.w	800582a <protocol_exec_rt_suspend+0x5a>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 8005d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d0a:	70a3      	strb	r3, [r4, #2]
 8005d0c:	e58d      	b.n	800582a <protocol_exec_rt_suspend+0x5a>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005d0e:	7ae3      	ldrb	r3, [r4, #11]
 8005d10:	b9db      	cbnz	r3, 8005d4a <protocol_exec_rt_suspend+0x57a>
 8005d12:	2302      	movs	r3, #2
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005d14:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8005d18:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005d1a:	f47f aeb0 	bne.w	8005a7e <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 8005d1e:	f002 fe33 	bl	8008988 <st_prep_buffer>
 8005d22:	e603      	b.n	800592c <protocol_exec_rt_suspend+0x15c>
              spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005d24:	4629      	mov	r1, r5
 8005d26:	f002 f90d 	bl	8007f44 <spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	72e3      	strb	r3, [r4, #11]
 8005d2e:	e588      	b.n	8005842 <protocol_exec_rt_suspend+0x72>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005d30:	78a3      	ldrb	r3, [r4, #2]
 8005d32:	f013 0220 	ands.w	r2, r3, #32
 8005d36:	f47f adc3 	bne.w	80058c0 <protocol_exec_rt_suspend+0xf0>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8005d3a:	06d8      	lsls	r0, r3, #27
 8005d3c:	d55d      	bpl.n	8005dfa <protocol_exec_rt_suspend+0x62a>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8005d3e:	7022      	strb	r2, [r4, #0]
 8005d40:	e5b1      	b.n	80058a6 <protocol_exec_rt_suspend+0xd6>
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
 8005d42:	2020      	movs	r0, #32
 8005d44:	f003 feee 	bl	8009b24 <system_set_exec_accessory_override_flag>
 8005d48:	e554      	b.n	80057f4 <protocol_exec_rt_suspend+0x24>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8005d4a:	07d9      	lsls	r1, r3, #31
 8005d4c:	d502      	bpl.n	8005d54 <protocol_exec_rt_suspend+0x584>
 8005d4e:	f043 0304 	orr.w	r3, r3, #4
 8005d52:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005d54:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
 8005d58:	f47f ae91 	bne.w	8005a7e <protocol_exec_rt_suspend+0x2ae>
    st_prep_buffer();
 8005d5c:	f002 fe14 	bl	8008988 <st_prep_buffer>
 8005d60:	e5e4      	b.n	800592c <protocol_exec_rt_suspend+0x15c>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 8005d62:	200a      	movs	r0, #10
 8005d64:	f000 fd82 	bl	800686c <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 8005d68:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 8005d6c:	0798      	lsls	r0, r3, #30
 8005d6e:	d54b      	bpl.n	8005e08 <protocol_exec_rt_suspend+0x638>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005d70:	7922      	ldrb	r2, [r4, #4]
 8005d72:	7ae3      	ldrb	r3, [r4, #11]
 8005d74:	f042 0208 	orr.w	r2, r2, #8
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005d78:	0719      	lsls	r1, r3, #28
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005d7a:	7122      	strb	r2, [r4, #4]
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 8005d7c:	f57f ade9 	bpl.w	8005952 <protocol_exec_rt_suspend+0x182>
 8005d80:	e6e5      	b.n	8005b4e <protocol_exec_rt_suspend+0x37e>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8005d82:	78a3      	ldrb	r3, [r4, #2]
 8005d84:	f043 0305 	orr.w	r3, r3, #5
 8005d88:	70a3      	strb	r3, [r4, #2]
        sys.state = STATE_SLEEP; 
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	7023      	strb	r3, [r4, #0]
 8005d8e:	e57a      	b.n	8005886 <protocol_exec_rt_suspend+0xb6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8005d90:	071f      	lsls	r7, r3, #28
 8005d92:	f57f af0c 	bpl.w	8005bae <protocol_exec_rt_suspend+0x3de>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8005d96:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8005d9a:	f043 0302 	orr.w	r3, r3, #2
 8005d9e:	e706      	b.n	8005bae <protocol_exec_rt_suspend+0x3de>
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005da0:	4b25      	ldr	r3, [pc, #148]	; (8005e38 <protocol_exec_rt_suspend+0x668>)
 8005da2:	7a5f      	ldrb	r7, [r3, #9]
 8005da4:	7a1a      	ldrb	r2, [r3, #8]
      restore_spindle_speed = gc_state.spindle_speed;
 8005da6:	f8d3 800c 	ldr.w	r8, [r3, #12]
      restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8005daa:	ea47 0302 	orr.w	r3, r7, r2
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	e51a      	b.n	80057e8 <protocol_exec_rt_suspend+0x18>
              sys.state = STATE_CYCLE;
 8005db2:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005db4:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 8005db6:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 8005db8:	f002 fde6 	bl	8008988 <st_prep_buffer>
              st_wake_up();
 8005dbc:	f002 fa02 	bl	80081c4 <st_wake_up>
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005dc0:	2002      	movs	r0, #2
 8005dc2:	f003 fe8b 	bl	8009adc <system_clear_exec_state_flag>
 8005dc6:	e57e      	b.n	80058c6 <protocol_exec_rt_suspend+0xf6>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8005dc8:	200b      	movs	r0, #11
 8005dca:	9201      	str	r2, [sp, #4]
 8005dcc:	f000 fd4e 	bl	800686c <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0f); // De-energize
 8005dd0:	9a01      	ldr	r2, [sp, #4]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f002 f8b5 	bl	8007f44 <spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8005dda:	9a01      	ldr	r2, [sp, #4]
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7fb ff37 	bl	8001c50 <coolant_set_state>
            st_go_idle(); // Disable steppers
 8005de2:	f002 fa2f 	bl	8008244 <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 8005de6:	7863      	ldrb	r3, [r4, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f47f ada3 	bne.w	8005934 <protocol_exec_rt_suspend+0x164>
 8005dee:	f7ff fb05 	bl	80053fc <protocol_exec_rt_system>
 8005df2:	7863      	ldrb	r3, [r4, #1]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0fa      	beq.n	8005dee <protocol_exec_rt_suspend+0x61e>
 8005df8:	e59c      	b.n	8005934 <protocol_exec_rt_suspend+0x164>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8005dfa:	0759      	lsls	r1, r3, #29
 8005dfc:	f57f ad60 	bpl.w	80058c0 <protocol_exec_rt_suspend+0xf0>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8005e00:	f043 0308 	orr.w	r3, r3, #8
 8005e04:	70a3      	strb	r3, [r4, #2]
 8005e06:	e55b      	b.n	80058c0 <protocol_exec_rt_suspend+0xf0>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8005e08:	9b01      	ldr	r3, [sp, #4]
 8005e0a:	4641      	mov	r1, r8
 8005e0c:	f003 0030 	and.w	r0, r3, #48	; 0x30
 8005e10:	f002 f898 	bl	8007f44 <spindle_set_state>
 8005e14:	7ae3      	ldrb	r3, [r4, #11]
 8005e16:	e697      	b.n	8005b48 <protocol_exec_rt_suspend+0x378>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8005e18:	fa4f f98b 	sxtb.w	r9, fp
 8005e1c:	f1b9 0f00 	cmp.w	r9, #0
 8005e20:	f6ff aeb5 	blt.w	8005b8e <protocol_exec_rt_suspend+0x3be>
 8005e24:	78a3      	ldrb	r3, [r4, #2]
 8005e26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e2a:	70a3      	strb	r3, [r4, #2]
 8005e2c:	e6af      	b.n	8005b8e <protocol_exec_rt_suspend+0x3be>
 8005e2e:	78a1      	ldrb	r1, [r4, #2]
 8005e30:	f041 0140 	orr.w	r1, r1, #64	; 0x40
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8005e34:	70a1      	strb	r1, [r4, #2]
 8005e36:	e6a3      	b.n	8005b80 <protocol_exec_rt_suspend+0x3b0>
 8005e38:	200010d4 	.word	0x200010d4
 8005e3c:	2000119d 	.word	0x2000119d

08005e40 <protocol_execute_realtime>:
{
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8005e42:	4bab      	ldr	r3, [pc, #684]	; (80060f0 <protocol_execute_realtime+0x2b0>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d156      	bne.n	8005ef8 <protocol_execute_realtime+0xb8>
 8005e4a:	4caa      	ldr	r4, [pc, #680]	; (80060f4 <protocol_execute_realtime+0x2b4>)
 8005e4c:	4daa      	ldr	r5, [pc, #680]	; (80060f8 <protocol_execute_realtime+0x2b8>)
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8005e4e:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8005e50:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005e54:	b393      	cbz	r3, 8005ebc <protocol_execute_realtime+0x7c>
    if (rt_exec & EXEC_RESET) {
 8005e56:	06ee      	lsls	r6, r5, #27
 8005e58:	f100 80dd 	bmi.w	8006016 <protocol_execute_realtime+0x1d6>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8005e5c:	07e8      	lsls	r0, r5, #31
 8005e5e:	f100 80f8 	bmi.w	8006052 <protocol_execute_realtime+0x212>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 8005e62:	f015 0fe8 	tst.w	r5, #232	; 0xe8
 8005e66:	d00a      	beq.n	8005e7e <protocol_execute_realtime+0x3e>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8005e68:	7823      	ldrb	r3, [r4, #0]
 8005e6a:	0799      	lsls	r1, r3, #30
 8005e6c:	f000 80f7 	beq.w	800605e <protocol_execute_realtime+0x21e>
 8005e70:	b26e      	sxtb	r6, r5
      if (rt_exec & EXEC_SLEEP) {
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	f2c0 8169 	blt.w	800614a <protocol_execute_realtime+0x30a>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8005e78:	20e8      	movs	r0, #232	; 0xe8
 8005e7a:	f003 fe2f 	bl	8009adc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 8005e7e:	07ab      	lsls	r3, r5, #30
 8005e80:	d519      	bpl.n	8005eb6 <protocol_execute_realtime+0x76>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8005e82:	f015 0f68 	tst.w	r5, #104	; 0x68
 8005e86:	d113      	bne.n	8005eb0 <protocol_execute_realtime+0x70>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8005e88:	7823      	ldrb	r3, [r4, #0]
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	f000 8175 	beq.w	800617a <protocol_execute_realtime+0x33a>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8143 	bne.w	800611c <protocol_execute_realtime+0x2dc>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8005e96:	2300      	movs	r3, #0
 8005e98:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 8005e9a:	f7fe fc31 	bl	8004700 <plan_get_current_block>
 8005e9e:	b120      	cbz	r0, 8005eaa <protocol_execute_realtime+0x6a>
 8005ea0:	78a3      	ldrb	r3, [r4, #2]
 8005ea2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005ea6:	f000 81a0 	beq.w	80061ea <protocol_execute_realtime+0x3aa>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 8005eaa:	2300      	movs	r3, #0
 8005eac:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 8005eae:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 8005eb0:	2002      	movs	r0, #2
 8005eb2:	f003 fe13 	bl	8009adc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 8005eb6:	0769      	lsls	r1, r5, #29
 8005eb8:	f100 80b0 	bmi.w	800601c <protocol_execute_realtime+0x1dc>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8005ebc:	4b8f      	ldr	r3, [pc, #572]	; (80060fc <protocol_execute_realtime+0x2bc>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005ec0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d16e      	bne.n	8005fa6 <protocol_execute_realtime+0x166>
  rt_exec = sys_rt_exec_accessory_override;
 8005ec8:	4b8d      	ldr	r3, [pc, #564]	; (8006100 <protocol_execute_realtime+0x2c0>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8005ecc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005ed0:	bb13      	cbnz	r3, 8005f18 <protocol_execute_realtime+0xd8>
 8005ed2:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8005ed4:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8005ed8:	d105      	bne.n	8005ee6 <protocol_execute_realtime+0xa6>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005eda:	78a3      	ldrb	r3, [r4, #2]
 8005edc:	b943      	cbnz	r3, 8005ef0 <protocol_execute_realtime+0xb0>
 8005ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005ee0:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005ee4:	d14c      	bne.n	8005f80 <protocol_execute_realtime+0x140>
    st_prep_buffer();
 8005ee6:	f002 fd4f 	bl	8008988 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005eea:	78a3      	ldrb	r3, [r4, #2]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0f6      	beq.n	8005ede <protocol_execute_realtime+0x9e>
}
 8005ef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8005ef4:	f7ff bc6c 	b.w	80057d0 <protocol_exec_rt_suspend>
    sys.state = STATE_ALARM; // Set system alarm state
 8005ef8:	2601      	movs	r6, #1
 8005efa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005efe:	4c7d      	ldr	r4, [pc, #500]	; (80060f4 <protocol_execute_realtime+0x2b4>)
    report_alarm_message(rt_exec);
 8005f00:	4628      	mov	r0, r5
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005f02:	3d01      	subs	r5, #1
    sys.state = STATE_ALARM; // Set system alarm state
 8005f04:	7026      	strb	r6, [r4, #0]
    report_alarm_message(rt_exec);
 8005f06:	f000 fc9b 	bl	8006840 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8005f0a:	42b5      	cmp	r5, r6
 8005f0c:	f240 8123 	bls.w	8006156 <protocol_execute_realtime+0x316>
 8005f10:	4d79      	ldr	r5, [pc, #484]	; (80060f8 <protocol_execute_realtime+0x2b8>)
    system_clear_exec_alarm(); // Clear alarm
 8005f12:	f003 fdf5 	bl	8009b00 <system_clear_exec_alarm>
 8005f16:	e79a      	b.n	8005e4e <protocol_execute_realtime+0xe>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8005f18:	f003 fe16 	bl	8009b48 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8005f1c:	7aa2      	ldrb	r2, [r4, #10]
 8005f1e:	f015 0f01 	tst.w	r5, #1
 8005f22:	bf0c      	ite	eq
 8005f24:	4613      	moveq	r3, r2
 8005f26:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005f28:	07a8      	lsls	r0, r5, #30
 8005f2a:	bf44      	itt	mi
 8005f2c:	330a      	addmi	r3, #10
 8005f2e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8005f30:	0769      	lsls	r1, r5, #29
 8005f32:	bf44      	itt	mi
 8005f34:	3b0a      	submi	r3, #10
 8005f36:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005f38:	072f      	lsls	r7, r5, #28
 8005f3a:	bf44      	itt	mi
 8005f3c:	3301      	addmi	r3, #1
 8005f3e:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8005f40:	06ee      	lsls	r6, r5, #27
 8005f42:	bf44      	itt	mi
 8005f44:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8005f48:	b2db      	uxtbmi	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8005f4a:	2bc8      	cmp	r3, #200	; 0xc8
 8005f4c:	bf28      	it	cs
 8005f4e:	23c8      	movcs	r3, #200	; 0xc8
 8005f50:	2b0a      	cmp	r3, #10
 8005f52:	bf38      	it	cc
 8005f54:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d006      	beq.n	8005f68 <protocol_execute_realtime+0x128>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005f5a:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005f5c:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 8005f5e:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8005f60:	f042 0308 	orr.w	r3, r2, #8
 8005f64:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8005f66:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005f68:	06a8      	lsls	r0, r5, #26
      if (sys.state == STATE_HOLD) {
 8005f6a:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8005f6c:	d502      	bpl.n	8005f74 <protocol_execute_realtime+0x134>
      if (sys.state == STATE_HOLD) {
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	f000 80ca 	beq.w	8006108 <protocol_execute_realtime+0x2c8>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8005f74:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8005f78:	d0ac      	beq.n	8005ed4 <protocol_execute_realtime+0x94>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 80e0 	bne.w	8006140 <protocol_execute_realtime+0x300>
        uint8_t coolant_state = gc_state.modal.coolant;
 8005f80:	4f60      	ldr	r7, [pc, #384]	; (8006104 <protocol_execute_realtime+0x2c4>)
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005f82:	062a      	lsls	r2, r5, #24
        uint8_t coolant_state = gc_state.modal.coolant;
 8005f84:	7a3e      	ldrb	r6, [r7, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8005f86:	f100 80f1 	bmi.w	800616c <protocol_execute_realtime+0x32c>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8005f8a:	0668      	lsls	r0, r5, #25
 8005f8c:	d505      	bpl.n	8005f9a <protocol_execute_realtime+0x15a>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8005f8e:	0671      	lsls	r1, r6, #25
 8005f90:	bf4c      	ite	mi
 8005f92:	f006 06bf 	andmi.w	r6, r6, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8005f96:	f046 0640 	orrpl.w	r6, r6, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f7fb fe58 	bl	8001c50 <coolant_set_state>
 8005fa0:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 8005fa2:	723e      	strb	r6, [r7, #8]
 8005fa4:	e796      	b.n	8005ed4 <protocol_execute_realtime+0x94>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8005fa6:	f003 fdc7 	bl	8009b38 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8005faa:	7a21      	ldrb	r1, [r4, #8]
 8005fac:	f015 0f01 	tst.w	r5, #1
 8005fb0:	bf0c      	ite	eq
 8005fb2:	460b      	moveq	r3, r1
 8005fb4:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8005fb6:	07ae      	lsls	r6, r5, #30
 8005fb8:	bf44      	itt	mi
 8005fba:	330a      	addmi	r3, #10
 8005fbc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8005fbe:	0768      	lsls	r0, r5, #29
 8005fc0:	bf44      	itt	mi
 8005fc2:	3b0a      	submi	r3, #10
 8005fc4:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8005fc6:	072f      	lsls	r7, r5, #28
 8005fc8:	bf44      	itt	mi
 8005fca:	3301      	addmi	r3, #1
 8005fcc:	b2db      	uxtbmi	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8005fce:	06ee      	lsls	r6, r5, #27
 8005fd0:	bf44      	itt	mi
 8005fd2:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8005fd6:	b2db      	uxtbmi	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8005fd8:	2bc8      	cmp	r3, #200	; 0xc8
 8005fda:	bf28      	it	cs
 8005fdc:	23c8      	movcs	r3, #200	; 0xc8
 8005fde:	2b0a      	cmp	r3, #10
 8005fe0:	bf38      	it	cc
 8005fe2:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 8005fe4:	7a60      	ldrb	r0, [r4, #9]
 8005fe6:	f015 0f20 	tst.w	r5, #32
 8005fea:	bf14      	ite	ne
 8005fec:	2264      	movne	r2, #100	; 0x64
 8005fee:	4602      	moveq	r2, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8005ff0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ff4:	bf18      	it	ne
 8005ff6:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8005ff8:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005ffc:	bf18      	it	ne
 8005ffe:	2219      	movne	r2, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006000:	4299      	cmp	r1, r3
 8006002:	d023      	beq.n	800604c <protocol_execute_realtime+0x20c>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006004:	2100      	movs	r1, #0
      sys.f_override = new_f_override;
 8006006:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8006008:	7262      	strb	r2, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 800600a:	7321      	strb	r1, [r4, #12]
      plan_update_velocity_profile_parameters();
 800600c:	f7fe fbea 	bl	80047e4 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 8006010:	f7fe ff1e 	bl	8004e50 <plan_cycle_reinitialize>
 8006014:	e758      	b.n	8005ec8 <protocol_execute_realtime+0x88>
      sys.abort = true;  // Only place this is set true.
 8006016:	2301      	movs	r3, #1
 8006018:	7063      	strb	r3, [r4, #1]
 800601a:	e75e      	b.n	8005eda <protocol_execute_realtime+0x9a>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800601c:	7823      	ldrb	r3, [r4, #0]
 800601e:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 8006022:	d002      	beq.n	800602a <protocol_execute_realtime+0x1ea>
 8006024:	78e3      	ldrb	r3, [r4, #3]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d051      	beq.n	80060ce <protocol_execute_realtime+0x28e>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 800602a:	78a3      	ldrb	r3, [r4, #2]
 800602c:	061f      	lsls	r7, r3, #24
 800602e:	d452      	bmi.n	80060d6 <protocol_execute_realtime+0x296>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 8006030:	f013 0220 	ands.w	r2, r3, #32
 8006034:	d036      	beq.n	80060a4 <protocol_execute_realtime+0x264>
          sys.state = STATE_SAFETY_DOOR;
 8006036:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 8006038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 8006042:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006044:	2004      	movs	r0, #4
 8006046:	f003 fd49 	bl	8009adc <system_clear_exec_state_flag>
 800604a:	e737      	b.n	8005ebc <protocol_execute_realtime+0x7c>
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 800604c:	4290      	cmp	r0, r2
 800604e:	d1d9      	bne.n	8006004 <protocol_execute_realtime+0x1c4>
 8006050:	e73a      	b.n	8005ec8 <protocol_execute_realtime+0x88>
      report_realtime_status();
 8006052:	f001 f85b 	bl	800710c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8006056:	2001      	movs	r0, #1
 8006058:	f003 fd40 	bl	8009adc <system_clear_exec_state_flag>
 800605c:	e701      	b.n	8005e62 <protocol_execute_realtime+0x22>
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 800605e:	f013 0f28 	tst.w	r3, #40	; 0x28
 8006062:	d122      	bne.n	80060aa <protocol_execute_realtime+0x26a>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8006064:	bb33      	cbnz	r3, 80060b4 <protocol_execute_realtime+0x274>
 8006066:	2201      	movs	r2, #1
 8006068:	70a2      	strb	r2, [r4, #2]
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800606a:	066a      	lsls	r2, r5, #25
 800606c:	f100 809b 	bmi.w	80061a6 <protocol_execute_realtime+0x366>
        if (rt_exec & EXEC_FEED_HOLD) {
 8006070:	072f      	lsls	r7, r5, #28
 8006072:	b26e      	sxtb	r6, r5
 8006074:	d501      	bpl.n	800607a <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8006076:	2310      	movs	r3, #16
 8006078:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800607a:	06a8      	lsls	r0, r5, #26
 800607c:	f57f aef9 	bpl.w	8005e72 <protocol_execute_realtime+0x32>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8006080:	2006      	movs	r0, #6
 8006082:	f000 fbf3 	bl	800686c <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8006086:	78a3      	ldrb	r3, [r4, #2]
 8006088:	0619      	lsls	r1, r3, #24
 800608a:	d407      	bmi.n	800609c <protocol_execute_realtime+0x25c>
            if (sys.state == STATE_SAFETY_DOOR) {
 800608c:	7822      	ldrb	r2, [r4, #0]
 800608e:	2a40      	cmp	r2, #64	; 0x40
 8006090:	f000 80ba 	beq.w	8006208 <protocol_execute_realtime+0x3c8>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8006094:	2a80      	cmp	r2, #128	; 0x80
 8006096:	d001      	beq.n	800609c <protocol_execute_realtime+0x25c>
 8006098:	2240      	movs	r2, #64	; 0x40
 800609a:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800609c:	f043 0320 	orr.w	r3, r3, #32
 80060a0:	70a3      	strb	r3, [r4, #2]
 80060a2:	e6e6      	b.n	8005e72 <protocol_execute_realtime+0x32>
          sys.suspend = SUSPEND_DISABLE;
 80060a4:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 80060a6:	7022      	strb	r2, [r4, #0]
 80060a8:	e7cc      	b.n	8006044 <protocol_execute_realtime+0x204>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80060aa:	78a2      	ldrb	r2, [r4, #2]
 80060ac:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80060b0:	f000 808a 	beq.w	80061c8 <protocol_execute_realtime+0x388>
 80060b4:	b26a      	sxtb	r2, r5
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80060b6:	0668      	lsls	r0, r5, #25
 80060b8:	4616      	mov	r6, r2
 80060ba:	d502      	bpl.n	80060c2 <protocol_execute_realtime+0x282>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	f140 80ab 	bpl.w	8006218 <protocol_execute_realtime+0x3d8>
        if (rt_exec & EXEC_FEED_HOLD) {
 80060c2:	072f      	lsls	r7, r5, #28
 80060c4:	d5d9      	bpl.n	800607a <protocol_execute_realtime+0x23a>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80060c6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 80060ca:	d1d6      	bne.n	800607a <protocol_execute_realtime+0x23a>
 80060cc:	e7d3      	b.n	8006076 <protocol_execute_realtime+0x236>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80060ce:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da5a      	bge.n	800618c <protocol_execute_realtime+0x34c>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80060d6:	2300      	movs	r3, #0
 80060d8:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80060da:	f7fe facf 	bl	800467c <plan_reset>
          st_reset();
 80060de:	f002 fac9 	bl	8008674 <st_reset>
          gc_sync_position();
 80060e2:	f7fb feb7 	bl	8001e54 <gc_sync_position>
          plan_sync_position();
 80060e6:	f7fe fe93 	bl	8004e10 <plan_sync_position>
 80060ea:	78a3      	ldrb	r3, [r4, #2]
 80060ec:	e7a0      	b.n	8006030 <protocol_execute_realtime+0x1f0>
 80060ee:	bf00      	nop
 80060f0:	200011c8 	.word	0x200011c8
 80060f4:	20001188 	.word	0x20001188
 80060f8:	2000119d 	.word	0x2000119d
 80060fc:	20001184 	.word	0x20001184
 8006100:	2000119c 	.word	0x2000119c
 8006104:	200010d4 	.word	0x200010d4
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006108:	7ae3      	ldrb	r3, [r4, #11]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d150      	bne.n	80061b0 <protocol_execute_realtime+0x370>
 800610e:	2302      	movs	r3, #2
 8006110:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006112:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8006116:	f47f af33 	bne.w	8005f80 <protocol_execute_realtime+0x140>
 800611a:	e6e4      	b.n	8005ee6 <protocol_execute_realtime+0xa6>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800611c:	06da      	lsls	r2, r3, #27
 800611e:	f57f aec7 	bpl.w	8005eb0 <protocol_execute_realtime+0x70>
 8006122:	78a2      	ldrb	r2, [r4, #2]
 8006124:	07d0      	lsls	r0, r2, #31
 8006126:	f57f aec3 	bpl.w	8005eb0 <protocol_execute_realtime+0x70>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 800612a:	2b10      	cmp	r3, #16
 800612c:	f47f aeb3 	bne.w	8005e96 <protocol_execute_realtime+0x56>
 8006130:	7ae3      	ldrb	r3, [r4, #11]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f43f aeaf 	beq.w	8005e96 <protocol_execute_realtime+0x56>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 8006138:	f043 0308 	orr.w	r3, r3, #8
 800613c:	72e3      	strb	r3, [r4, #11]
 800613e:	e6b7      	b.n	8005eb0 <protocol_execute_realtime+0x70>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006140:	f013 0f18 	tst.w	r3, #24
 8006144:	f43f aec6 	beq.w	8005ed4 <protocol_execute_realtime+0x94>
 8006148:	e71a      	b.n	8005f80 <protocol_execute_realtime+0x140>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800614a:	7823      	ldrb	r3, [r4, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d036      	beq.n	80061be <protocol_execute_realtime+0x37e>
        sys.state = STATE_SLEEP; 
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	7023      	strb	r3, [r4, #0]
 8006154:	e690      	b.n	8005e78 <protocol_execute_realtime+0x38>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 8006156:	4630      	mov	r0, r6
 8006158:	f000 fb88 	bl	800686c <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 800615c:	2010      	movs	r0, #16
 800615e:	f003 fcbd 	bl	8009adc <system_clear_exec_state_flag>
 8006162:	4d2f      	ldr	r5, [pc, #188]	; (8006220 <protocol_execute_realtime+0x3e0>)
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8006164:	782b      	ldrb	r3, [r5, #0]
 8006166:	06df      	lsls	r7, r3, #27
 8006168:	d5fc      	bpl.n	8006164 <protocol_execute_realtime+0x324>
 800616a:	e6d2      	b.n	8005f12 <protocol_execute_realtime+0xd2>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 800616c:	0633      	lsls	r3, r6, #24
 800616e:	bf4c      	ite	mi
 8006170:	f006 067f 	andmi.w	r6, r6, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8006174:	f046 0680 	orrpl.w	r6, r6, #128	; 0x80
 8006178:	e707      	b.n	8005f8a <protocol_execute_realtime+0x14a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800617a:	78a3      	ldrb	r3, [r4, #2]
 800617c:	f013 0220 	ands.w	r2, r3, #32
 8006180:	f47f ae96 	bne.w	8005eb0 <protocol_execute_realtime+0x70>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8006184:	06df      	lsls	r7, r3, #27
 8006186:	d538      	bpl.n	80061fa <protocol_execute_realtime+0x3ba>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006188:	7022      	strb	r2, [r4, #0]
 800618a:	e684      	b.n	8005e96 <protocol_execute_realtime+0x56>
        plan_cycle_reinitialize();
 800618c:	f7fe fe60 	bl	8004e50 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 8006190:	7923      	ldrb	r3, [r4, #4]
 8006192:	079a      	lsls	r2, r3, #30
 8006194:	d503      	bpl.n	800619e <protocol_execute_realtime+0x35e>
 8006196:	78a2      	ldrb	r2, [r4, #2]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 800619e:	f023 0306 	bic.w	r3, r3, #6
 80061a2:	7123      	strb	r3, [r4, #4]
 80061a4:	e74e      	b.n	8006044 <protocol_execute_realtime+0x204>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80061a6:	2141      	movs	r1, #65	; 0x41
 80061a8:	b26a      	sxtb	r2, r5
 80061aa:	4616      	mov	r6, r2
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80061ac:	70a1      	strb	r1, [r4, #2]
 80061ae:	e788      	b.n	80060c2 <protocol_execute_realtime+0x282>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 80061b0:	07d9      	lsls	r1, r3, #31
 80061b2:	f57f ae95 	bpl.w	8005ee0 <protocol_execute_realtime+0xa0>
 80061b6:	f043 0304 	orr.w	r3, r3, #4
 80061ba:	72e3      	strb	r3, [r4, #11]
 80061bc:	e7a9      	b.n	8006112 <protocol_execute_realtime+0x2d2>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 80061be:	78a3      	ldrb	r3, [r4, #2]
 80061c0:	f043 0305 	orr.w	r3, r3, #5
 80061c4:	70a3      	strb	r3, [r4, #2]
 80061c6:	e7c3      	b.n	8006150 <protocol_execute_realtime+0x310>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 80061c8:	f002 fbc8 	bl	800895c <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80061cc:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80061ce:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 80061d0:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	f47f af46 	bne.w	8006064 <protocol_execute_realtime+0x224>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 80061d8:	b26e      	sxtb	r6, r5
 80061da:	2e00      	cmp	r6, #0
 80061dc:	f6ff af4d 	blt.w	800607a <protocol_execute_realtime+0x23a>
 80061e0:	78a3      	ldrb	r3, [r4, #2]
 80061e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061e6:	70a3      	strb	r3, [r4, #2]
 80061e8:	e747      	b.n	800607a <protocol_execute_realtime+0x23a>
              sys.state = STATE_CYCLE;
 80061ea:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80061ec:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 80061ee:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80061f0:	f002 fbca 	bl	8008988 <st_prep_buffer>
              st_wake_up();
 80061f4:	f001 ffe6 	bl	80081c4 <st_wake_up>
 80061f8:	e65a      	b.n	8005eb0 <protocol_execute_realtime+0x70>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80061fa:	075e      	lsls	r6, r3, #29
 80061fc:	f57f ae58 	bpl.w	8005eb0 <protocol_execute_realtime+0x70>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8006200:	f043 0308 	orr.w	r3, r3, #8
 8006204:	70a3      	strb	r3, [r4, #2]
 8006206:	e653      	b.n	8005eb0 <protocol_execute_realtime+0x70>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8006208:	071a      	lsls	r2, r3, #28
 800620a:	f57f af45 	bpl.w	8006098 <protocol_execute_realtime+0x258>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 800620e:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8006212:	f043 0302 	orr.w	r3, r3, #2
 8006216:	e73f      	b.n	8006098 <protocol_execute_realtime+0x258>
 8006218:	78a1      	ldrb	r1, [r4, #2]
 800621a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800621e:	e7c4      	b.n	80061aa <protocol_execute_realtime+0x36a>
 8006220:	2000119d 	.word	0x2000119d

08006224 <protocol_buffer_synchronize>:
{
 8006224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 8006228:	f7fe fa6a 	bl	8004700 <plan_get_current_block>
 800622c:	b110      	cbz	r0, 8006234 <protocol_buffer_synchronize+0x10>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 800622e:	2002      	movs	r0, #2
 8006230:	f003 fc4a 	bl	8009ac8 <system_set_exec_state_flag>
 8006234:	4eab      	ldr	r6, [pc, #684]	; (80064e4 <protocol_buffer_synchronize+0x2c0>)
 8006236:	4cac      	ldr	r4, [pc, #688]	; (80064e8 <protocol_buffer_synchronize+0x2c4>)
 8006238:	4dac      	ldr	r5, [pc, #688]	; (80064ec <protocol_buffer_synchronize+0x2c8>)
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800623a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 80064f4 <protocol_buffer_synchronize+0x2d0>
  rt_exec = sys_rt_exec_accessory_override;
 800623e:	4fac      	ldr	r7, [pc, #688]	; (80064f0 <protocol_buffer_synchronize+0x2cc>)
        uint8_t coolant_state = gc_state.modal.coolant;
 8006240:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80064f8 <protocol_buffer_synchronize+0x2d4>
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 8006244:	7833      	ldrb	r3, [r6, #0]
  if (rt_exec) { // Enter only if any bit flag is true
 8006246:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 808b 	bne.w	8006366 <protocol_buffer_synchronize+0x142>
  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8006250:	782b      	ldrb	r3, [r5, #0]
  if (rt_exec) {
 8006252:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8006256:	2b00      	cmp	r3, #0
 8006258:	d054      	beq.n	8006304 <protocol_buffer_synchronize+0xe0>
    if (rt_exec & EXEC_RESET) {
 800625a:	f01a 0f10 	tst.w	sl, #16
 800625e:	f040 8121 	bne.w	80064a4 <protocol_buffer_synchronize+0x280>
    if (rt_exec & EXEC_STATUS_REPORT) {
 8006262:	f01a 0f01 	tst.w	sl, #1
 8006266:	f040 8137 	bne.w	80064d8 <protocol_buffer_synchronize+0x2b4>
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 800626a:	f01a 0fe8 	tst.w	sl, #232	; 0xe8
 800626e:	d00c      	beq.n	800628a <protocol_buffer_synchronize+0x66>
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 8006270:	7823      	ldrb	r3, [r4, #0]
 8006272:	0798      	lsls	r0, r3, #30
 8006274:	f000 8142 	beq.w	80064fc <protocol_buffer_synchronize+0x2d8>
 8006278:	fa4f fb8a 	sxtb.w	fp, sl
      if (rt_exec & EXEC_SLEEP) {
 800627c:	f1bb 0f00 	cmp.w	fp, #0
 8006280:	f2c0 8167 	blt.w	8006552 <protocol_buffer_synchronize+0x32e>
      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8006284:	20e8      	movs	r0, #232	; 0xe8
 8006286:	f003 fc29 	bl	8009adc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_START) {
 800628a:	f01a 0f02 	tst.w	sl, #2
 800628e:	d019      	beq.n	80062c4 <protocol_buffer_synchronize+0xa0>
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8006290:	f01a 0f68 	tst.w	sl, #104	; 0x68
 8006294:	d113      	bne.n	80062be <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006296:	7823      	ldrb	r3, [r4, #0]
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	f000 81ca 	beq.w	8006632 <protocol_buffer_synchronize+0x40e>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f040 81b5 	bne.w	800660e <protocol_buffer_synchronize+0x3ea>
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 80062a4:	2300      	movs	r3, #0
 80062a6:	7123      	strb	r3, [r4, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 80062a8:	f7fe fa2a 	bl	8004700 <plan_get_current_block>
 80062ac:	b120      	cbz	r0, 80062b8 <protocol_buffer_synchronize+0x94>
 80062ae:	78a3      	ldrb	r3, [r4, #2]
 80062b0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80062b4:	f000 81d0 	beq.w	8006658 <protocol_buffer_synchronize+0x434>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80062b8:	2300      	movs	r3, #0
 80062ba:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_IDLE;
 80062bc:	7023      	strb	r3, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80062be:	2002      	movs	r0, #2
 80062c0:	f003 fc0c 	bl	8009adc <system_clear_exec_state_flag>
    if (rt_exec & EXEC_CYCLE_STOP) {
 80062c4:	f01a 0f04 	tst.w	sl, #4
 80062c8:	d01c      	beq.n	8006304 <protocol_buffer_synchronize+0xe0>
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80062ca:	7823      	ldrb	r3, [r4, #0]
 80062cc:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80062d0:	f000 80f0 	beq.w	80064b4 <protocol_buffer_synchronize+0x290>
 80062d4:	78e3      	ldrb	r3, [r4, #3]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f040 80ec 	bne.w	80064b4 <protocol_buffer_synchronize+0x290>
 80062dc:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f2c0 8178 	blt.w	80065d6 <protocol_buffer_synchronize+0x3b2>
        plan_cycle_reinitialize();
 80062e6:	f7fe fdb3 	bl	8004e50 <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80062ea:	7923      	ldrb	r3, [r4, #4]
 80062ec:	079a      	lsls	r2, r3, #30
 80062ee:	d503      	bpl.n	80062f8 <protocol_buffer_synchronize+0xd4>
 80062f0:	78a2      	ldrb	r2, [r4, #2]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	70a2      	strb	r2, [r4, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80062f8:	f023 0306 	bic.w	r3, r3, #6
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80062fc:	2004      	movs	r0, #4
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80062fe:	7123      	strb	r3, [r4, #4]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006300:	f003 fbec 	bl	8009adc <system_clear_exec_state_flag>
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 8006304:	f898 3000 	ldrb.w	r3, [r8]
  if (rt_exec) {
 8006308:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8089 	bne.w	8006424 <protocol_buffer_synchronize+0x200>
  rt_exec = sys_rt_exec_accessory_override;
 8006312:	783b      	ldrb	r3, [r7, #0]
  if (rt_exec) {
 8006314:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8006318:	2b00      	cmp	r3, #0
 800631a:	d133      	bne.n	8006384 <protocol_buffer_synchronize+0x160>
 800631c:	7823      	ldrb	r3, [r4, #0]
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 800631e:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8006322:	d118      	bne.n	8006356 <protocol_buffer_synchronize+0x132>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006324:	78a3      	ldrb	r3, [r4, #2]
 8006326:	b9db      	cbnz	r3, 8006360 <protocol_buffer_synchronize+0x13c>
    if (sys.abort) { return; } // Check for system abort
 8006328:	7863      	ldrb	r3, [r4, #1]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 80c0 	bne.w	80064b0 <protocol_buffer_synchronize+0x28c>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 8006330:	f7fe f9e6 	bl	8004700 <plan_get_current_block>
 8006334:	2800      	cmp	r0, #0
 8006336:	d185      	bne.n	8006244 <protocol_buffer_synchronize+0x20>
 8006338:	7823      	ldrb	r3, [r4, #0]
 800633a:	2b08      	cmp	r3, #8
 800633c:	d082      	beq.n	8006244 <protocol_buffer_synchronize+0x20>
 800633e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8006342:	7ae3      	ldrb	r3, [r4, #11]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8159 	beq.w	80065fc <protocol_buffer_synchronize+0x3d8>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800634a:	07d9      	lsls	r1, r3, #31
 800634c:	f100 818c 	bmi.w	8006668 <protocol_buffer_synchronize+0x444>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006350:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006354:	d14f      	bne.n	80063f6 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8006356:	f002 fb17 	bl	8008988 <st_prep_buffer>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800635a:	78a3      	ldrb	r3, [r4, #2]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0e3      	beq.n	8006328 <protocol_buffer_synchronize+0x104>
 8006360:	f7ff fa36 	bl	80057d0 <protocol_exec_rt_suspend>
 8006364:	e7e0      	b.n	8006328 <protocol_buffer_synchronize+0x104>
    sys.state = STATE_ALARM; // Set system alarm state
 8006366:	f04f 0b01 	mov.w	fp, #1
    report_alarm_message(rt_exec);
 800636a:	4650      	mov	r0, sl
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 800636c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    sys.state = STATE_ALARM; // Set system alarm state
 8006370:	f884 b000 	strb.w	fp, [r4]
    report_alarm_message(rt_exec);
 8006374:	f000 fa64 	bl	8006840 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 8006378:	45da      	cmp	sl, fp
 800637a:	f240 8118 	bls.w	80065ae <protocol_buffer_synchronize+0x38a>
    system_clear_exec_alarm(); // Clear alarm
 800637e:	f003 fbbf 	bl	8009b00 <system_clear_exec_alarm>
 8006382:	e765      	b.n	8006250 <protocol_buffer_synchronize+0x2c>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 8006384:	f003 fbe0 	bl	8009b48 <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 8006388:	f01a 0f01 	tst.w	sl, #1
 800638c:	bf18      	it	ne
 800638e:	2364      	movne	r3, #100	; 0x64
 8006390:	7aa2      	ldrb	r2, [r4, #10]
 8006392:	bf08      	it	eq
 8006394:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8006396:	f01a 0f02 	tst.w	sl, #2
 800639a:	bf1c      	itt	ne
 800639c:	330a      	addne	r3, #10
 800639e:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80063a0:	f01a 0f04 	tst.w	sl, #4
 80063a4:	bf1c      	itt	ne
 80063a6:	3b0a      	subne	r3, #10
 80063a8:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80063aa:	f01a 0f08 	tst.w	sl, #8
 80063ae:	bf1c      	itt	ne
 80063b0:	3301      	addne	r3, #1
 80063b2:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 80063b4:	f01a 0f10 	tst.w	sl, #16
 80063b8:	bf1c      	itt	ne
 80063ba:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 80063be:	b2db      	uxtbne	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 80063c0:	2bc8      	cmp	r3, #200	; 0xc8
 80063c2:	bf28      	it	cs
 80063c4:	23c8      	movcs	r3, #200	; 0xc8
 80063c6:	2b0a      	cmp	r3, #10
 80063c8:	bf38      	it	cc
 80063ca:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d006      	beq.n	80063de <protocol_buffer_synchronize+0x1ba>
      sys.report_ovr_counter = 0; // Set to report change immediately
 80063d0:	2100      	movs	r1, #0
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80063d2:	7922      	ldrb	r2, [r4, #4]
      sys.spindle_speed_ovr = last_s_override;
 80063d4:	72a3      	strb	r3, [r4, #10]
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80063d6:	f042 0308 	orr.w	r3, r2, #8
 80063da:	7123      	strb	r3, [r4, #4]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80063dc:	7321      	strb	r1, [r4, #12]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80063de:	f01a 0f20 	tst.w	sl, #32
      if (sys.state == STATE_HOLD) {
 80063e2:	7823      	ldrb	r3, [r4, #0]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 80063e4:	d001      	beq.n	80063ea <protocol_buffer_synchronize+0x1c6>
      if (sys.state == STATE_HOLD) {
 80063e6:	2b10      	cmp	r3, #16
 80063e8:	d0ab      	beq.n	8006342 <protocol_buffer_synchronize+0x11e>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 80063ea:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 80063ee:	d096      	beq.n	800631e <protocol_buffer_synchronize+0xfa>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 80b7 	bne.w	8006564 <protocol_buffer_synchronize+0x340>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80063f6:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 80063fa:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 80063fe:	f040 80bb 	bne.w	8006578 <protocol_buffer_synchronize+0x354>
          if (rt_exec & EXEC_COOLANT_FLOOD_OVR_TOGGLE) {
 8006402:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006406:	d006      	beq.n	8006416 <protocol_buffer_synchronize+0x1f2>
            if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8006408:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800640c:	bf14      	ite	ne
 800640e:	f00b 0bbf 	andne.w	fp, fp, #191	; 0xbf
            else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8006412:	f04b 0b40 	orreq.w	fp, fp, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8006416:	4658      	mov	r0, fp
 8006418:	f7fb fc1a 	bl	8001c50 <coolant_set_state>
 800641c:	7823      	ldrb	r3, [r4, #0]
        gc_state.modal.coolant = coolant_state;
 800641e:	f889 b008 	strb.w	fp, [r9, #8]
 8006422:	e77c      	b.n	800631e <protocol_buffer_synchronize+0xfa>
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8006424:	f003 fb88 	bl	8009b38 <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 8006428:	f01a 0f01 	tst.w	sl, #1
 800642c:	bf18      	it	ne
 800642e:	2364      	movne	r3, #100	; 0x64
 8006430:	7a22      	ldrb	r2, [r4, #8]
    uint8_t new_r_override = sys.r_override;
 8006432:	7a60      	ldrb	r0, [r4, #9]
    uint8_t new_f_override =  sys.f_override;
 8006434:	bf08      	it	eq
 8006436:	4613      	moveq	r3, r2
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 8006438:	f01a 0f02 	tst.w	sl, #2
 800643c:	bf1c      	itt	ne
 800643e:	330a      	addne	r3, #10
 8006440:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8006442:	f01a 0f04 	tst.w	sl, #4
 8006446:	bf1c      	itt	ne
 8006448:	3b0a      	subne	r3, #10
 800644a:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 800644c:	f01a 0f08 	tst.w	sl, #8
 8006450:	bf1c      	itt	ne
 8006452:	3301      	addne	r3, #1
 8006454:	b2db      	uxtbne	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 8006456:	f01a 0f10 	tst.w	sl, #16
 800645a:	bf1c      	itt	ne
 800645c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 8006460:	b2db      	uxtbne	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8006462:	2bc8      	cmp	r3, #200	; 0xc8
 8006464:	bf28      	it	cs
 8006466:	23c8      	movcs	r3, #200	; 0xc8
 8006468:	2b0a      	cmp	r3, #10
 800646a:	bf38      	it	cc
 800646c:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 800646e:	f01a 0f20 	tst.w	sl, #32
 8006472:	bf14      	ite	ne
 8006474:	2164      	movne	r1, #100	; 0x64
 8006476:	4601      	moveq	r1, r0
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 8006478:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800647c:	bf18      	it	ne
 800647e:	2132      	movne	r1, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 8006480:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8006484:	bf18      	it	ne
 8006486:	2119      	movne	r1, #25
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 8006488:	429a      	cmp	r2, r3
 800648a:	d102      	bne.n	8006492 <protocol_buffer_synchronize+0x26e>
 800648c:	4288      	cmp	r0, r1
 800648e:	f43f af40 	beq.w	8006312 <protocol_buffer_synchronize+0xee>
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006492:	2200      	movs	r2, #0
      sys.f_override = new_f_override;
 8006494:	7223      	strb	r3, [r4, #8]
      sys.r_override = new_r_override;
 8006496:	7261      	strb	r1, [r4, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8006498:	7322      	strb	r2, [r4, #12]
      plan_update_velocity_profile_parameters();
 800649a:	f7fe f9a3 	bl	80047e4 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 800649e:	f7fe fcd7 	bl	8004e50 <plan_cycle_reinitialize>
 80064a2:	e736      	b.n	8006312 <protocol_buffer_synchronize+0xee>
      sys.abort = true;  // Only place this is set true.
 80064a4:	2201      	movs	r2, #1
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80064a6:	78a3      	ldrb	r3, [r4, #2]
      sys.abort = true;  // Only place this is set true.
 80064a8:	7062      	strb	r2, [r4, #1]
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f47f af58 	bne.w	8006360 <protocol_buffer_synchronize+0x13c>
 80064b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80064b4:	78a3      	ldrb	r3, [r4, #2]
 80064b6:	0618      	lsls	r0, r3, #24
 80064b8:	f100 808d 	bmi.w	80065d6 <protocol_buffer_synchronize+0x3b2>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80064bc:	f013 0220 	ands.w	r2, r3, #32
 80064c0:	d04d      	beq.n	800655e <protocol_buffer_synchronize+0x33a>
          sys.state = STATE_SAFETY_DOOR;
 80064c2:	2240      	movs	r2, #64	; 0x40
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80064c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	70a3      	strb	r3, [r4, #2]
          sys.state = STATE_SAFETY_DOOR;
 80064ce:	7022      	strb	r2, [r4, #0]
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 80064d0:	2004      	movs	r0, #4
 80064d2:	f003 fb03 	bl	8009adc <system_clear_exec_state_flag>
 80064d6:	e715      	b.n	8006304 <protocol_buffer_synchronize+0xe0>
      report_realtime_status();
 80064d8:	f000 fe18 	bl	800710c <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 80064dc:	2001      	movs	r0, #1
 80064de:	f003 fafd 	bl	8009adc <system_clear_exec_state_flag>
 80064e2:	e6c2      	b.n	800626a <protocol_buffer_synchronize+0x46>
 80064e4:	200011c8 	.word	0x200011c8
 80064e8:	20001188 	.word	0x20001188
 80064ec:	2000119d 	.word	0x2000119d
 80064f0:	2000119c 	.word	0x2000119c
 80064f4:	20001184 	.word	0x20001184
 80064f8:	200010d4 	.word	0x200010d4
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80064fc:	f013 0f28 	tst.w	r3, #40	; 0x28
 8006500:	d049      	beq.n	8006596 <protocol_buffer_synchronize+0x372>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 8006502:	78a2      	ldrb	r2, [r4, #2]
 8006504:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8006508:	d03e      	beq.n	8006588 <protocol_buffer_synchronize+0x364>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800650a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800650e:	fa4f fb8a 	sxtb.w	fp, sl
 8006512:	d16c      	bne.n	80065ee <protocol_buffer_synchronize+0x3ca>
        if (rt_exec & EXEC_FEED_HOLD) {
 8006514:	f01a 0f08 	tst.w	sl, #8
 8006518:	d002      	beq.n	8006520 <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 800651a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800651e:	d053      	beq.n	80065c8 <protocol_buffer_synchronize+0x3a4>
        if (rt_exec & EXEC_SAFETY_DOOR) {
 8006520:	f01a 0f20 	tst.w	sl, #32
 8006524:	f43f aeaa 	beq.w	800627c <protocol_buffer_synchronize+0x58>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 8006528:	2006      	movs	r0, #6
 800652a:	f000 f99f 	bl	800686c <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 800652e:	78a3      	ldrb	r3, [r4, #2]
 8006530:	061a      	lsls	r2, r3, #24
 8006532:	d407      	bmi.n	8006544 <protocol_buffer_synchronize+0x320>
            if (sys.state == STATE_SAFETY_DOOR) {
 8006534:	7822      	ldrb	r2, [r4, #0]
 8006536:	2a40      	cmp	r2, #64	; 0x40
 8006538:	f000 80a7 	beq.w	800668a <protocol_buffer_synchronize+0x466>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 800653c:	2a80      	cmp	r2, #128	; 0x80
 800653e:	d001      	beq.n	8006544 <protocol_buffer_synchronize+0x320>
 8006540:	2240      	movs	r2, #64	; 0x40
 8006542:	7022      	strb	r2, [r4, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 8006544:	f043 0320 	orr.w	r3, r3, #32
      if (rt_exec & EXEC_SLEEP) {
 8006548:	f1bb 0f00 	cmp.w	fp, #0
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800654c:	70a3      	strb	r3, [r4, #2]
      if (rt_exec & EXEC_SLEEP) {
 800654e:	f6bf ae99 	bge.w	8006284 <protocol_buffer_synchronize+0x60>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 8006552:	7823      	ldrb	r3, [r4, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d07a      	beq.n	800664e <protocol_buffer_synchronize+0x42a>
        sys.state = STATE_SLEEP; 
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	7023      	strb	r3, [r4, #0]
 800655c:	e692      	b.n	8006284 <protocol_buffer_synchronize+0x60>
          sys.suspend = SUSPEND_DISABLE;
 800655e:	70a2      	strb	r2, [r4, #2]
          sys.state = STATE_IDLE;
 8006560:	7022      	strb	r2, [r4, #0]
 8006562:	e7b5      	b.n	80064d0 <protocol_buffer_synchronize+0x2ac>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 8006564:	f013 0f18 	tst.w	r3, #24
 8006568:	f43f aed9 	beq.w	800631e <protocol_buffer_synchronize+0xfa>
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 800656c:	f01a 0f80 	tst.w	sl, #128	; 0x80
        uint8_t coolant_state = gc_state.modal.coolant;
 8006570:	f899 b008 	ldrb.w	fp, [r9, #8]
          if (rt_exec & EXEC_COOLANT_MIST_OVR_TOGGLE) {
 8006574:	f43f af45 	beq.w	8006402 <protocol_buffer_synchronize+0x1de>
            if (coolant_state & COOLANT_MIST_ENABLE) { bit_false(coolant_state,COOLANT_MIST_ENABLE); }
 8006578:	f01b 0f80 	tst.w	fp, #128	; 0x80
 800657c:	bf14      	ite	ne
 800657e:	f00b 0b7f 	andne.w	fp, fp, #127	; 0x7f
            else { coolant_state |= COOLANT_MIST_ENABLE; }
 8006582:	f04b 0b80 	orreq.w	fp, fp, #128	; 0x80
 8006586:	e73c      	b.n	8006402 <protocol_buffer_synchronize+0x1de>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8006588:	f002 f9e8 	bl	800895c <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800658c:	2202      	movs	r2, #2
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 800658e:	7823      	ldrb	r3, [r4, #0]
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 8006590:	7122      	strb	r2, [r4, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8006592:	2b20      	cmp	r3, #32
 8006594:	d06e      	beq.n	8006674 <protocol_buffer_synchronize+0x450>
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1b7      	bne.n	800650a <protocol_buffer_synchronize+0x2e6>
 800659a:	2201      	movs	r2, #1
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800659c:	f01a 0f40 	tst.w	sl, #64	; 0x40
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80065a0:	70a2      	strb	r2, [r4, #2]
 80065a2:	fa4f fb8a 	sxtb.w	fp, sl
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80065a6:	d00c      	beq.n	80065c2 <protocol_buffer_synchronize+0x39e>
 80065a8:	2241      	movs	r2, #65	; 0x41
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80065aa:	70a2      	strb	r2, [r4, #2]
 80065ac:	e7b2      	b.n	8006514 <protocol_buffer_synchronize+0x2f0>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80065ae:	4658      	mov	r0, fp
 80065b0:	f000 f95c 	bl	800686c <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 80065b4:	2010      	movs	r0, #16
 80065b6:	f003 fa91 	bl	8009adc <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 80065ba:	782b      	ldrb	r3, [r5, #0]
 80065bc:	06db      	lsls	r3, r3, #27
 80065be:	d5fc      	bpl.n	80065ba <protocol_buffer_synchronize+0x396>
 80065c0:	e6dd      	b.n	800637e <protocol_buffer_synchronize+0x15a>
        if (rt_exec & EXEC_FEED_HOLD) {
 80065c2:	f01a 0f08 	tst.w	sl, #8
 80065c6:	d0ab      	beq.n	8006520 <protocol_buffer_synchronize+0x2fc>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80065c8:	2310      	movs	r3, #16
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80065ca:	f01a 0f20 	tst.w	sl, #32
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80065ce:	7023      	strb	r3, [r4, #0]
        if (rt_exec & EXEC_SAFETY_DOOR) {
 80065d0:	f43f ae54 	beq.w	800627c <protocol_buffer_synchronize+0x58>
 80065d4:	e7a8      	b.n	8006528 <protocol_buffer_synchronize+0x304>
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80065d6:	2300      	movs	r3, #0
 80065d8:	7123      	strb	r3, [r4, #4]
          plan_reset();
 80065da:	f7fe f84f 	bl	800467c <plan_reset>
          st_reset();
 80065de:	f002 f849 	bl	8008674 <st_reset>
          gc_sync_position();
 80065e2:	f7fb fc37 	bl	8001e54 <gc_sync_position>
          plan_sync_position();
 80065e6:	f7fe fc13 	bl	8004e10 <plan_sync_position>
 80065ea:	78a3      	ldrb	r3, [r4, #2]
 80065ec:	e766      	b.n	80064bc <protocol_buffer_synchronize+0x298>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 80065ee:	0699      	lsls	r1, r3, #26
 80065f0:	d490      	bmi.n	8006514 <protocol_buffer_synchronize+0x2f0>
 80065f2:	78a2      	ldrb	r2, [r4, #2]
 80065f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f8:	70a2      	strb	r2, [r4, #2]
 80065fa:	e78b      	b.n	8006514 <protocol_buffer_synchronize+0x2f0>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 80065fc:	2302      	movs	r3, #2
 80065fe:	72e3      	strb	r3, [r4, #11]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8006600:	f01a 0fc0 	tst.w	sl, #192	; 0xc0
 8006604:	f47f aef7 	bne.w	80063f6 <protocol_buffer_synchronize+0x1d2>
    st_prep_buffer();
 8006608:	f002 f9be 	bl	8008988 <st_prep_buffer>
 800660c:	e6a5      	b.n	800635a <protocol_buffer_synchronize+0x136>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 800660e:	06da      	lsls	r2, r3, #27
 8006610:	f57f ae55 	bpl.w	80062be <protocol_buffer_synchronize+0x9a>
 8006614:	78a2      	ldrb	r2, [r4, #2]
 8006616:	07d1      	lsls	r1, r2, #31
 8006618:	f57f ae51 	bpl.w	80062be <protocol_buffer_synchronize+0x9a>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 800661c:	2b10      	cmp	r3, #16
 800661e:	f47f ae41 	bne.w	80062a4 <protocol_buffer_synchronize+0x80>
 8006622:	7ae3      	ldrb	r3, [r4, #11]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f43f ae3d 	beq.w	80062a4 <protocol_buffer_synchronize+0x80>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800662a:	f043 0308 	orr.w	r3, r3, #8
 800662e:	72e3      	strb	r3, [r4, #11]
 8006630:	e645      	b.n	80062be <protocol_buffer_synchronize+0x9a>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8006632:	78a3      	ldrb	r3, [r4, #2]
 8006634:	f013 0220 	ands.w	r2, r3, #32
 8006638:	f47f ae41 	bne.w	80062be <protocol_buffer_synchronize+0x9a>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 800663c:	06d9      	lsls	r1, r3, #27
 800663e:	d417      	bmi.n	8006670 <protocol_buffer_synchronize+0x44c>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8006640:	0758      	lsls	r0, r3, #29
 8006642:	f57f ae3c 	bpl.w	80062be <protocol_buffer_synchronize+0x9a>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8006646:	f043 0308 	orr.w	r3, r3, #8
 800664a:	70a3      	strb	r3, [r4, #2]
 800664c:	e637      	b.n	80062be <protocol_buffer_synchronize+0x9a>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800664e:	78a3      	ldrb	r3, [r4, #2]
 8006650:	f043 0305 	orr.w	r3, r3, #5
 8006654:	70a3      	strb	r3, [r4, #2]
 8006656:	e77f      	b.n	8006558 <protocol_buffer_synchronize+0x334>
              sys.state = STATE_CYCLE;
 8006658:	2208      	movs	r2, #8
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 800665a:	70a3      	strb	r3, [r4, #2]
              sys.state = STATE_CYCLE;
 800665c:	7022      	strb	r2, [r4, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 800665e:	f002 f993 	bl	8008988 <st_prep_buffer>
              st_wake_up();
 8006662:	f001 fdaf 	bl	80081c4 <st_wake_up>
 8006666:	e62a      	b.n	80062be <protocol_buffer_synchronize+0x9a>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	72e3      	strb	r3, [r4, #11]
 800666e:	e7c7      	b.n	8006600 <protocol_buffer_synchronize+0x3dc>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8006670:	7022      	strb	r2, [r4, #0]
 8006672:	e617      	b.n	80062a4 <protocol_buffer_synchronize+0x80>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8006674:	fa4f fb8a 	sxtb.w	fp, sl
 8006678:	f1bb 0f00 	cmp.w	fp, #0
 800667c:	f6ff af50 	blt.w	8006520 <protocol_buffer_synchronize+0x2fc>
 8006680:	78a3      	ldrb	r3, [r4, #2]
 8006682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006686:	70a3      	strb	r3, [r4, #2]
 8006688:	e74a      	b.n	8006520 <protocol_buffer_synchronize+0x2fc>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 800668a:	0718      	lsls	r0, r3, #28
 800668c:	f57f af58 	bpl.w	8006540 <protocol_buffer_synchronize+0x31c>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 8006690:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	e752      	b.n	8006540 <protocol_buffer_synchronize+0x31c>
 800669a:	bf00      	nop

0800669c <protocol_main_loop>:
{
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (bit_istrue(settings.flags, BITFLAG_HARD_LIMIT_ENABLE)) {
 80066a0:	4b57      	ldr	r3, [pc, #348]	; (8006800 <protocol_main_loop+0x164>)
 80066a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80066a6:	071a      	lsls	r2, r3, #28
 80066a8:	f100 8091 	bmi.w	80067ce <protocol_main_loop+0x132>
 80066ac:	4e55      	ldr	r6, [pc, #340]	; (8006804 <protocol_main_loop+0x168>)
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 80066ae:	7833      	ldrb	r3, [r6, #0]
 80066b0:	f013 0381 	ands.w	r3, r3, #129	; 0x81
 80066b4:	f000 8083 	beq.w	80067be <protocol_main_loop+0x122>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80066b8:	2002      	movs	r0, #2
 80066ba:	f000 f8d7 	bl	800686c <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80066be:	2301      	movs	r3, #1
 80066c0:	7033      	strb	r3, [r6, #0]
        line_flags = 0;
 80066c2:	2500      	movs	r5, #0
 80066c4:	462c      	mov	r4, r5
        line[char_counter] = 0; // Set string termination character.
 80066c6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006808 <protocol_main_loop+0x16c>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80066ca:	f000 ff39 	bl	8007540 <serial_read>
 80066ce:	28ff      	cmp	r0, #255	; 0xff
 80066d0:	d00f      	beq.n	80066f2 <protocol_main_loop+0x56>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 80066d2:	280a      	cmp	r0, #10
 80066d4:	d01d      	beq.n	8006712 <protocol_main_loop+0x76>
 80066d6:	280d      	cmp	r0, #13
 80066d8:	d01b      	beq.n	8006712 <protocol_main_loop+0x76>
        if (line_flags) {
 80066da:	2c00      	cmp	r4, #0
 80066dc:	d035      	beq.n	800674a <protocol_main_loop+0xae>
          if (c == ')') {
 80066de:	2829      	cmp	r0, #41	; 0x29
 80066e0:	d1f3      	bne.n	80066ca <protocol_main_loop+0x2e>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80066e2:	07a3      	lsls	r3, r4, #30
 80066e4:	d5f1      	bpl.n	80066ca <protocol_main_loop+0x2e>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80066e6:	f000 ff2b 	bl	8007540 <serial_read>
 80066ea:	28ff      	cmp	r0, #255	; 0xff
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80066ec:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80066f0:	d1ef      	bne.n	80066d2 <protocol_main_loop+0x36>
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 80066f2:	f7fe f805 	bl	8004700 <plan_get_current_block>
 80066f6:	b110      	cbz	r0, 80066fe <protocol_main_loop+0x62>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 80066f8:	2002      	movs	r0, #2
 80066fa:	f003 f9e5 	bl	8009ac8 <system_set_exec_state_flag>
  protocol_exec_rt_system();
 80066fe:	f7fe fe7d 	bl	80053fc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006702:	78b3      	ldrb	r3, [r6, #2]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d14a      	bne.n	800679e <protocol_main_loop+0x102>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 8006708:	7873      	ldrb	r3, [r6, #1]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0dd      	beq.n	80066ca <protocol_main_loop+0x2e>
 800670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  protocol_exec_rt_system();
 8006712:	f7fe fe73 	bl	80053fc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006716:	78b3      	ldrb	r3, [r6, #2]
 8006718:	bb63      	cbnz	r3, 8006774 <protocol_main_loop+0xd8>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 800671a:	7877      	ldrb	r7, [r6, #1]
 800671c:	2f00      	cmp	r7, #0
 800671e:	d1f6      	bne.n	800670e <protocol_main_loop+0x72>
        line[char_counter] = 0; // Set string termination character.
 8006720:	f808 7005 	strb.w	r7, [r8, r5]
				LedBlink();
 8006724:	f7fd f99e 	bl	8003a64 <LedBlink>
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8006728:	f014 0401 	ands.w	r4, r4, #1
 800672c:	d125      	bne.n	800677a <protocol_main_loop+0xde>
        } else if (line[0] == 0) {
 800672e:	f898 0000 	ldrb.w	r0, [r8]
 8006732:	b378      	cbz	r0, 8006794 <protocol_main_loop+0xf8>
        } else if (line[0] == '$') {
 8006734:	2824      	cmp	r0, #36	; 0x24
 8006736:	d039      	beq.n	80067ac <protocol_main_loop+0x110>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8006738:	7833      	ldrb	r3, [r6, #0]
 800673a:	f013 0521 	ands.w	r5, r3, #33	; 0x21
 800673e:	d022      	beq.n	8006786 <protocol_main_loop+0xea>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006740:	2009      	movs	r0, #9
        char_counter = 0;
 8006742:	4625      	mov	r5, r4
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 8006744:	f000 f864 	bl	8006810 <report_status_message>
 8006748:	e7bf      	b.n	80066ca <protocol_main_loop+0x2e>
          if (c <= ' ') {
 800674a:	2820      	cmp	r0, #32
 800674c:	d9bd      	bls.n	80066ca <protocol_main_loop+0x2e>
          } else if (c == '/') {
 800674e:	282f      	cmp	r0, #47	; 0x2f
 8006750:	d0bb      	beq.n	80066ca <protocol_main_loop+0x2e>
          } else if (c == '(') {
 8006752:	2828      	cmp	r0, #40	; 0x28
 8006754:	d026      	beq.n	80067a4 <protocol_main_loop+0x108>
          } else if (c == ';') {
 8006756:	283b      	cmp	r0, #59	; 0x3b
 8006758:	d02f      	beq.n	80067ba <protocol_main_loop+0x11e>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 800675a:	2d58      	cmp	r5, #88	; 0x58
 800675c:	d824      	bhi.n	80067a8 <protocol_main_loop+0x10c>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 800675e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 8006766:	bf98      	it	ls
 8006768:	3820      	subls	r0, #32
            line[char_counter++] = c;
 800676a:	1c6b      	adds	r3, r5, #1
 800676c:	f808 0005 	strb.w	r0, [r8, r5]
 8006770:	b2dd      	uxtb	r5, r3
 8006772:	e7aa      	b.n	80066ca <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 8006774:	f7ff f82c 	bl	80057d0 <protocol_exec_rt_suspend>
 8006778:	e7cf      	b.n	800671a <protocol_main_loop+0x7e>
          report_status_message(STATUS_OVERFLOW);
 800677a:	200b      	movs	r0, #11
        char_counter = 0;
 800677c:	463d      	mov	r5, r7
        line_flags = 0;
 800677e:	463c      	mov	r4, r7
          report_status_message(STATUS_OVERFLOW);
 8006780:	f000 f846 	bl	8006810 <report_status_message>
 8006784:	e7a1      	b.n	80066ca <protocol_main_loop+0x2e>
          report_status_message(gc_execute_line(line));
 8006786:	4640      	mov	r0, r8
 8006788:	f7fb fb6c 	bl	8001e64 <gc_execute_line>
 800678c:	f000 f840 	bl	8006810 <report_status_message>
        line_flags = 0;
 8006790:	462c      	mov	r4, r5
 8006792:	e79a      	b.n	80066ca <protocol_main_loop+0x2e>
        char_counter = 0;
 8006794:	4605      	mov	r5, r0
          report_status_message(STATUS_OK);
 8006796:	f000 f83b 	bl	8006810 <report_status_message>
        line_flags = 0;
 800679a:	462c      	mov	r4, r5
 800679c:	e795      	b.n	80066ca <protocol_main_loop+0x2e>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 800679e:	f7ff f817 	bl	80057d0 <protocol_exec_rt_suspend>
 80067a2:	e7b1      	b.n	8006708 <protocol_main_loop+0x6c>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80067a4:	2402      	movs	r4, #2
 80067a6:	e790      	b.n	80066ca <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_OVERFLOW;
 80067a8:	2401      	movs	r4, #1
 80067aa:	e78e      	b.n	80066ca <protocol_main_loop+0x2e>
          report_status_message(system_execute_line(line));
 80067ac:	4640      	mov	r0, r8
        char_counter = 0;
 80067ae:	4625      	mov	r5, r4
          report_status_message(system_execute_line(line));
 80067b0:	f002 ff10 	bl	80095d4 <system_execute_line>
 80067b4:	f000 f82c 	bl	8006810 <report_status_message>
 80067b8:	e787      	b.n	80066ca <protocol_main_loop+0x2e>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 80067ba:	2404      	movs	r4, #4
 80067bc:	e785      	b.n	80066ca <protocol_main_loop+0x2e>
    sys.state = STATE_IDLE;
 80067be:	7033      	strb	r3, [r6, #0]
    if (system_check_safety_door_ajar()) {
 80067c0:	f002 feea 	bl	8009598 <system_check_safety_door_ajar>
 80067c4:	b978      	cbnz	r0, 80067e6 <protocol_main_loop+0x14a>
    system_execute_startup(line); // Execute startup script.
 80067c6:	4810      	ldr	r0, [pc, #64]	; (8006808 <protocol_main_loop+0x16c>)
 80067c8:	f002 fee8 	bl	800959c <system_execute_startup>
 80067cc:	e779      	b.n	80066c2 <protocol_main_loop+0x26>
      if (limits_get_state()) {
 80067ce:	f7fc fd67 	bl	80032a0 <limits_get_state>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f43f af6a 	beq.w	80066ac <protocol_main_loop+0x10>
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 80067d8:	2301      	movs	r3, #1
 80067da:	4e0a      	ldr	r6, [pc, #40]	; (8006804 <protocol_main_loop+0x168>)
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 80067dc:	2007      	movs	r0, #7
        sys.state = STATE_ALARM; // Ensure alarm state is active.
 80067de:	7033      	strb	r3, [r6, #0]
        report_feedback_message(MESSAGE_CHECK_LIMITS);
 80067e0:	f000 f844 	bl	800686c <report_feedback_message>
 80067e4:	e763      	b.n	80066ae <protocol_main_loop+0x12>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80067e6:	4a09      	ldr	r2, [pc, #36]	; (800680c <protocol_main_loop+0x170>)
 80067e8:	7813      	ldrb	r3, [r2, #0]
 80067ea:	f043 0320 	orr.w	r3, r3, #32
 80067ee:	7013      	strb	r3, [r2, #0]
  protocol_exec_rt_system();
 80067f0:	f7fe fe04 	bl	80053fc <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80067f4:	78b3      	ldrb	r3, [r6, #2]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0e5      	beq.n	80067c6 <protocol_main_loop+0x12a>
 80067fa:	f7fe ffe9 	bl	80057d0 <protocol_exec_rt_suspend>
 80067fe:	e7e2      	b.n	80067c6 <protocol_main_loop+0x12a>
 8006800:	2000134c 	.word	0x2000134c
 8006804:	20001188 	.word	0x20001188
 8006808:	20000a90 	.word	0x20000a90
 800680c:	2000119d 	.word	0x2000119d

08006810 <report_status_message>:
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
  switch(status_code) {
 8006810:	b160      	cbz	r0, 800682c <report_status_message+0x1c>
{
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
    case STATUS_OK: // STATUS_OK
      printPgmString(PSTR("ok\r\n")); break;
    default:
      printPgmString(PSTR("error:"));
 8006816:	4807      	ldr	r0, [pc, #28]	; (8006834 <report_status_message+0x24>)
 8006818:	f7fe fb2a 	bl	8004e70 <printString>
      print_uint8_base10(status_code);
 800681c:	4620      	mov	r0, r4
 800681e:	f7fe fb33 	bl	8004e88 <print_uint8_base10>
      report_util_line_feed();
  }
}
 8006822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006826:	4804      	ldr	r0, [pc, #16]	; (8006838 <report_status_message+0x28>)
 8006828:	f7fe bb22 	b.w	8004e70 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 800682c:	4803      	ldr	r0, [pc, #12]	; (800683c <report_status_message+0x2c>)
 800682e:	f7fe bb1f 	b.w	8004e70 <printString>
 8006832:	bf00      	nop
 8006834:	0800c2c0 	.word	0x0800c2c0
 8006838:	0800c2c8 	.word	0x0800c2c8
 800683c:	0800c2b8 	.word	0x0800c2b8

08006840 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 8006840:	b510      	push	{r4, lr}
 8006842:	4604      	mov	r4, r0
  printPgmString(PSTR("ALARM:"));
 8006844:	4807      	ldr	r0, [pc, #28]	; (8006864 <report_alarm_message+0x24>)
 8006846:	f7fe fb13 	bl	8004e70 <printString>
  print_uint8_base10(alarm_code);
 800684a:	4620      	mov	r0, r4
 800684c:	f7fe fb1c 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006850:	4805      	ldr	r0, [pc, #20]	; (8006868 <report_alarm_message+0x28>)
 8006852:	f7fe fb0d 	bl	8004e70 <printString>
  report_util_line_feed();
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
}
 8006856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 800685a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800685e:	f7fd bd07 	b.w	8004270 <delay_ms>
 8006862:	bf00      	nop
 8006864:	0800c0b4 	.word	0x0800c0b4
 8006868:	0800c2c8 	.word	0x0800c2c8

0800686c <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 800686c:	b510      	push	{r4, lr}
 800686e:	4604      	mov	r4, r0
  printPgmString(PSTR("[MSG:"));
 8006870:	4820      	ldr	r0, [pc, #128]	; (80068f4 <report_feedback_message+0x88>)
 8006872:	f7fe fafd 	bl	8004e70 <printString>
  switch(message_code) {
 8006876:	1e60      	subs	r0, r4, #1
 8006878:	280a      	cmp	r0, #10
 800687a:	d80a      	bhi.n	8006892 <report_feedback_message+0x26>
 800687c:	e8df f000 	tbb	[pc, r0]
 8006880:	1d191511 	.word	0x1d191511
 8006884:	2d292521 	.word	0x2d292521
 8006888:	3531      	.short	0x3531
 800688a:	06          	.byte	0x06
 800688b:	00          	.byte	0x00
    case MESSAGE_RESTORE_DEFAULTS:
      printPgmString(PSTR("Restoring defaults")); break;
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
 800688c:	481a      	ldr	r0, [pc, #104]	; (80068f8 <report_feedback_message+0x8c>)
 800688e:	f7fe faef 	bl	8004e70 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006892:	205d      	movs	r0, #93	; 0x5d
 8006894:	f000 fe48 	bl	8007528 <serial_write>
  }
  report_util_feedback_line_feed();
}
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800689c:	4817      	ldr	r0, [pc, #92]	; (80068fc <report_feedback_message+0x90>)
 800689e:	f7fe bae7 	b.w	8004e70 <printString>
      printPgmString(PSTR("Reset to continue")); break;
 80068a2:	4817      	ldr	r0, [pc, #92]	; (8006900 <report_feedback_message+0x94>)
 80068a4:	f7fe fae4 	bl	8004e70 <printString>
 80068a8:	e7f3      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 80068aa:	4816      	ldr	r0, [pc, #88]	; (8006904 <report_feedback_message+0x98>)
 80068ac:	f7fe fae0 	bl	8004e70 <printString>
 80068b0:	e7ef      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 80068b2:	4815      	ldr	r0, [pc, #84]	; (8006908 <report_feedback_message+0x9c>)
 80068b4:	f7fe fadc 	bl	8004e70 <printString>
 80068b8:	e7eb      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 80068ba:	4814      	ldr	r0, [pc, #80]	; (800690c <report_feedback_message+0xa0>)
 80068bc:	f7fe fad8 	bl	8004e70 <printString>
 80068c0:	e7e7      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 80068c2:	4813      	ldr	r0, [pc, #76]	; (8006910 <report_feedback_message+0xa4>)
 80068c4:	f7fe fad4 	bl	8004e70 <printString>
 80068c8:	e7e3      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 80068ca:	4812      	ldr	r0, [pc, #72]	; (8006914 <report_feedback_message+0xa8>)
 80068cc:	f7fe fad0 	bl	8004e70 <printString>
 80068d0:	e7df      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 80068d2:	4811      	ldr	r0, [pc, #68]	; (8006918 <report_feedback_message+0xac>)
 80068d4:	f7fe facc 	bl	8004e70 <printString>
 80068d8:	e7db      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 80068da:	4810      	ldr	r0, [pc, #64]	; (800691c <report_feedback_message+0xb0>)
 80068dc:	f7fe fac8 	bl	8004e70 <printString>
 80068e0:	e7d7      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 80068e2:	480f      	ldr	r0, [pc, #60]	; (8006920 <report_feedback_message+0xb4>)
 80068e4:	f7fe fac4 	bl	8004e70 <printString>
 80068e8:	e7d3      	b.n	8006892 <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 80068ea:	480e      	ldr	r0, [pc, #56]	; (8006924 <report_feedback_message+0xb8>)
 80068ec:	f7fe fac0 	bl	8004e70 <printString>
 80068f0:	e7cf      	b.n	8006892 <report_feedback_message+0x26>
 80068f2:	bf00      	nop
 80068f4:	0800c0d8 	.word	0x0800c0d8
 80068f8:	0800c17c 	.word	0x0800c17c
 80068fc:	0800c2c8 	.word	0x0800c2c8
 8006900:	0800c0e0 	.word	0x0800c0e0
 8006904:	0800c0f4 	.word	0x0800c0f4
 8006908:	0800c108 	.word	0x0800c108
 800690c:	0800c11c 	.word	0x0800c11c
 8006910:	0800c124 	.word	0x0800c124
 8006914:	0800c130 	.word	0x0800c130
 8006918:	0800c13c 	.word	0x0800c13c
 800691c:	0800c14c 	.word	0x0800c14c
 8006920:	0800c154 	.word	0x0800c154
 8006924:	0800c168 	.word	0x0800c168

08006928 <report_init_message>:


// Welcome message
void report_init_message()
{
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <report_init_message+0x8>)
 800692a:	f7fe baa1 	b.w	8004e70 <printString>
 800692e:	bf00      	nop
 8006930:	0800c1f4 	.word	0x0800c1f4

08006934 <report_grbl_help>:
}

// Grbl help message
void report_grbl_help() {
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <report_grbl_help+0x8>)
 8006936:	f7fe ba9b 	b.w	8004e70 <printString>
 800693a:	bf00      	nop
 800693c:	0800c1a8 	.word	0x0800c1a8

08006940 <report_grbl_settings>:
}


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8006940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006944:	4cde      	ldr	r4, [pc, #888]	; (8006cc0 <report_grbl_settings+0x380>)
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006946:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8006948:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800694c:	f000 fdec 	bl	8007528 <serial_write>
 8006950:	2000      	movs	r0, #0
 8006952:	f7fe fa99 	bl	8004e88 <print_uint8_base10>
 8006956:	203d      	movs	r0, #61	; 0x3d
 8006958:	f000 fde6 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 800695c:	4628      	mov	r0, r5
 800695e:	f7fe fa93 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006962:	48d8      	ldr	r0, [pc, #864]	; (8006cc4 <report_grbl_settings+0x384>)
 8006964:	f7fe fa84 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006968:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 800696a:	f894 5056 	ldrb.w	r5, [r4, #86]	; 0x56
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800696e:	f000 fddb 	bl	8007528 <serial_write>
 8006972:	2001      	movs	r0, #1
 8006974:	f7fe fa88 	bl	8004e88 <print_uint8_base10>
 8006978:	203d      	movs	r0, #61	; 0x3d
 800697a:	f000 fdd5 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 800697e:	4628      	mov	r0, r5
 8006980:	f7fe fa82 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006984:	48cf      	ldr	r0, [pc, #828]	; (8006cc4 <report_grbl_settings+0x384>)
 8006986:	f7fe fa73 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 800698a:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(2,settings.step_invert_mask);
 800698c:	f8b4 5052 	ldrh.w	r5, [r4, #82]	; 0x52
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006990:	f000 fdca 	bl	8007528 <serial_write>
 8006994:	2002      	movs	r0, #2
 8006996:	f7fe fa77 	bl	8004e88 <print_uint8_base10>
 800699a:	203d      	movs	r0, #61	; 0x3d
 800699c:	f000 fdc4 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 80069a0:	b2e8      	uxtb	r0, r5
 80069a2:	f7fe fa71 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069a6:	48c7      	ldr	r0, [pc, #796]	; (8006cc4 <report_grbl_settings+0x384>)
 80069a8:	f7fe fa62 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069ac:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(3,settings.dir_invert_mask);
 80069ae:	f8b4 5054 	ldrh.w	r5, [r4, #84]	; 0x54
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069b2:	f000 fdb9 	bl	8007528 <serial_write>
 80069b6:	2003      	movs	r0, #3
 80069b8:	f7fe fa66 	bl	8004e88 <print_uint8_base10>
 80069bc:	203d      	movs	r0, #61	; 0x3d
 80069be:	f000 fdb3 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 80069c2:	b2e8      	uxtb	r0, r5
 80069c4:	f7fe fa60 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069c8:	48be      	ldr	r0, [pc, #760]	; (8006cc4 <report_grbl_settings+0x384>)
 80069ca:	f7fe fa51 	bl	8004e70 <printString>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80069ce:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069d2:	2024      	movs	r0, #36	; 0x24
 80069d4:	f000 fda8 	bl	8007528 <serial_write>
 80069d8:	2004      	movs	r0, #4
 80069da:	f7fe fa55 	bl	8004e88 <print_uint8_base10>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 80069de:	f3c5 0580 	ubfx	r5, r5, #2, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069e2:	203d      	movs	r0, #61	; 0x3d
 80069e4:	f000 fda0 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 80069e8:	4628      	mov	r0, r5
 80069ea:	f7fe fa4d 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80069ee:	48b5      	ldr	r0, [pc, #724]	; (8006cc4 <report_grbl_settings+0x384>)
 80069f0:	f7fe fa3e 	bl	8004e70 <printString>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 80069f4:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 80069f8:	2024      	movs	r0, #36	; 0x24
 80069fa:	f000 fd95 	bl	8007528 <serial_write>
 80069fe:	2005      	movs	r0, #5
 8006a00:	f7fe fa42 	bl	8004e88 <print_uint8_base10>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8006a04:	f3c5 1580 	ubfx	r5, r5, #6, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a08:	203d      	movs	r0, #61	; 0x3d
 8006a0a:	f000 fd8d 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f7fe fa3a 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a14:	48ab      	ldr	r0, [pc, #684]	; (8006cc4 <report_grbl_settings+0x384>)
 8006a16:	f7fe fa2b 	bl	8004e70 <printString>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006a1a:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a1e:	2024      	movs	r0, #36	; 0x24
 8006a20:	f000 fd82 	bl	8007528 <serial_write>
 8006a24:	2006      	movs	r0, #6
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8006a26:	09ed      	lsrs	r5, r5, #7
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a28:	f7fe fa2e 	bl	8004e88 <print_uint8_base10>
 8006a2c:	203d      	movs	r0, #61	; 0x3d
 8006a2e:	f000 fd7b 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7fe fa28 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a38:	48a2      	ldr	r0, [pc, #648]	; (8006cc4 <report_grbl_settings+0x384>)
 8006a3a:	f7fe fa19 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a3e:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(10,settings.status_report_mask);
 8006a40:	f894 5057 	ldrb.w	r5, [r4, #87]	; 0x57
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a44:	f000 fd70 	bl	8007528 <serial_write>
 8006a48:	200a      	movs	r0, #10
 8006a4a:	f7fe fa1d 	bl	8004e88 <print_uint8_base10>
 8006a4e:	203d      	movs	r0, #61	; 0x3d
 8006a50:	f000 fd6a 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7fe fa17 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a5a:	489a      	ldr	r0, [pc, #616]	; (8006cc4 <report_grbl_settings+0x384>)
 8006a5c:	f7fe fa08 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a60:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8006a62:	6da5      	ldr	r5, [r4, #88]	; 0x58
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a64:	f000 fd60 	bl	8007528 <serial_write>
 8006a68:	200b      	movs	r0, #11
 8006a6a:	f7fe fa0d 	bl	8004e88 <print_uint8_base10>
 8006a6e:	203d      	movs	r0, #61	; 0x3d
 8006a70:	f000 fd5a 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006a74:	2103      	movs	r1, #3
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7fe fa48 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a7c:	4891      	ldr	r0, [pc, #580]	; (8006cc4 <report_grbl_settings+0x384>)
 8006a7e:	f7fe f9f7 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a82:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8006a84:	6de5      	ldr	r5, [r4, #92]	; 0x5c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006a86:	f000 fd4f 	bl	8007528 <serial_write>
 8006a8a:	200c      	movs	r0, #12
 8006a8c:	f7fe f9fc 	bl	8004e88 <print_uint8_base10>
 8006a90:	203d      	movs	r0, #61	; 0x3d
 8006a92:	f000 fd49 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006a96:	2103      	movs	r1, #3
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f7fe fa37 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006a9e:	4889      	ldr	r0, [pc, #548]	; (8006cc4 <report_grbl_settings+0x384>)
 8006aa0:	f7fe f9e6 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006aa4:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8006aa6:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006aaa:	f000 fd3d 	bl	8007528 <serial_write>
 8006aae:	200d      	movs	r0, #13
 8006ab0:	f7fe f9ea 	bl	8004e88 <print_uint8_base10>
 8006ab4:	203d      	movs	r0, #61	; 0x3d
 8006ab6:	f000 fd37 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006aba:	f005 0001 	and.w	r0, r5, #1
 8006abe:	f7fe f9e3 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ac2:	4880      	ldr	r0, [pc, #512]	; (8006cc4 <report_grbl_settings+0x384>)
 8006ac4:	f7fe f9d4 	bl	8004e70 <printString>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006ac8:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006acc:	2024      	movs	r0, #36	; 0x24
 8006ace:	f000 fd2b 	bl	8007528 <serial_write>
 8006ad2:	2014      	movs	r0, #20
 8006ad4:	f7fe f9d8 	bl	8004e88 <print_uint8_base10>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8006ad8:	f3c5 1540 	ubfx	r5, r5, #5, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006adc:	203d      	movs	r0, #61	; 0x3d
 8006ade:	f000 fd23 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f7fe f9d0 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006ae8:	4876      	ldr	r0, [pc, #472]	; (8006cc4 <report_grbl_settings+0x384>)
 8006aea:	f7fe f9c1 	bl	8004e70 <printString>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006aee:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006af2:	2024      	movs	r0, #36	; 0x24
 8006af4:	f000 fd18 	bl	8007528 <serial_write>
 8006af8:	2015      	movs	r0, #21
 8006afa:	f7fe f9c5 	bl	8004e88 <print_uint8_base10>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8006afe:	f3c5 05c0 	ubfx	r5, r5, #3, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b02:	203d      	movs	r0, #61	; 0x3d
 8006b04:	f000 fd10 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f7fe f9bd 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b0e:	486d      	ldr	r0, [pc, #436]	; (8006cc4 <report_grbl_settings+0x384>)
 8006b10:	f7fe f9ae 	bl	8004e70 <printString>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006b14:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b18:	2024      	movs	r0, #36	; 0x24
 8006b1a:	f000 fd05 	bl	8007528 <serial_write>
 8006b1e:	2016      	movs	r0, #22
 8006b20:	f7fe f9b2 	bl	8004e88 <print_uint8_base10>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8006b24:	f3c5 1500 	ubfx	r5, r5, #4, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b28:	203d      	movs	r0, #61	; 0x3d
 8006b2a:	f000 fcfd 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f7fe f9aa 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b34:	4863      	ldr	r0, [pc, #396]	; (8006cc4 <report_grbl_settings+0x384>)
 8006b36:	f7fe f99b 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b3a:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8006b3c:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b40:	f000 fcf2 	bl	8007528 <serial_write>
 8006b44:	2017      	movs	r0, #23
 8006b46:	f7fe f99f 	bl	8004e88 <print_uint8_base10>
 8006b4a:	203d      	movs	r0, #61	; 0x3d
 8006b4c:	f000 fcec 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006b50:	b2e8      	uxtb	r0, r5
 8006b52:	f7fe f999 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b56:	485b      	ldr	r0, [pc, #364]	; (8006cc4 <report_grbl_settings+0x384>)
 8006b58:	f7fe f98a 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b5c:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8006b5e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b60:	f000 fce2 	bl	8007528 <serial_write>
 8006b64:	2018      	movs	r0, #24
 8006b66:	f7fe f98f 	bl	8004e88 <print_uint8_base10>
 8006b6a:	203d      	movs	r0, #61	; 0x3d
 8006b6c:	f000 fcdc 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006b70:	2103      	movs	r1, #3
 8006b72:	4628      	mov	r0, r5
 8006b74:	f7fe f9ca 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b78:	4852      	ldr	r0, [pc, #328]	; (8006cc4 <report_grbl_settings+0x384>)
 8006b7a:	f7fe f979 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b7e:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8006b80:	6f25      	ldr	r5, [r4, #112]	; 0x70
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006b82:	f000 fcd1 	bl	8007528 <serial_write>
 8006b86:	2019      	movs	r0, #25
 8006b88:	f7fe f97e 	bl	8004e88 <print_uint8_base10>
 8006b8c:	203d      	movs	r0, #61	; 0x3d
 8006b8e:	f000 fccb 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006b92:	2103      	movs	r1, #3
 8006b94:	4628      	mov	r0, r5
 8006b96:	f7fe f9b9 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006b9a:	484a      	ldr	r0, [pc, #296]	; (8006cc4 <report_grbl_settings+0x384>)
 8006b9c:	f7fe f968 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ba0:	2024      	movs	r0, #36	; 0x24
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8006ba2:	f8b4 5074 	ldrh.w	r5, [r4, #116]	; 0x74
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006ba6:	f000 fcbf 	bl	8007528 <serial_write>
 8006baa:	201a      	movs	r0, #26
 8006bac:	f7fe f96c 	bl	8004e88 <print_uint8_base10>
 8006bb0:	203d      	movs	r0, #61	; 0x3d
 8006bb2:	f000 fcb9 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006bb6:	b2e8      	uxtb	r0, r5
 8006bb8:	f7fe f966 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bbc:	4841      	ldr	r0, [pc, #260]	; (8006cc4 <report_grbl_settings+0x384>)
 8006bbe:	f7fe f957 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bc2:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8006bc4:	6fa5      	ldr	r5, [r4, #120]	; 0x78
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006bc6:	f000 fcaf 	bl	8007528 <serial_write>
 8006bca:	201b      	movs	r0, #27
 8006bcc:	f7fe f95c 	bl	8004e88 <print_uint8_base10>
 8006bd0:	203d      	movs	r0, #61	; 0x3d
 8006bd2:	f000 fca9 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7fe f997 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006bde:	4839      	ldr	r0, [pc, #228]	; (8006cc4 <report_grbl_settings+0x384>)
 8006be0:	f7fe f946 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006be4:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8006be6:	6e25      	ldr	r5, [r4, #96]	; 0x60
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006be8:	f000 fc9e 	bl	8007528 <serial_write>
 8006bec:	201e      	movs	r0, #30
 8006bee:	f7fe f94b 	bl	8004e88 <print_uint8_base10>
 8006bf2:	203d      	movs	r0, #61	; 0x3d
 8006bf4:	f000 fc98 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f7fe f986 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c00:	4830      	ldr	r0, [pc, #192]	; (8006cc4 <report_grbl_settings+0x384>)
 8006c02:	f7fe f935 	bl	8004e70 <printString>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c06:	2024      	movs	r0, #36	; 0x24
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8006c08:	6e65      	ldr	r5, [r4, #100]	; 0x64
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c0a:	f000 fc8d 	bl	8007528 <serial_write>
 8006c0e:	201f      	movs	r0, #31
 8006c10:	f7fe f93a 	bl	8004e88 <print_uint8_base10>
 8006c14:	203d      	movs	r0, #61	; 0x3d
 8006c16:	f000 fc87 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7fe f975 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c22:	4828      	ldr	r0, [pc, #160]	; (8006cc4 <report_grbl_settings+0x384>)
 8006c24:	f7fe f924 	bl	8004e70 <printString>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006c28:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c2c:	2024      	movs	r0, #36	; 0x24
 8006c2e:	f000 fc7b 	bl	8007528 <serial_write>
 8006c32:	2020      	movs	r0, #32
 8006c34:	f7fe f928 	bl	8004e88 <print_uint8_base10>
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
 8006c38:	f3c4 0440 	ubfx	r4, r4, #1, #1
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c3c:	203d      	movs	r0, #61	; 0x3d
 8006c3e:	f000 fc73 	bl	8007528 <serial_write>
  print_uint8_base10(val);
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7fe f920 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c48:	481e      	ldr	r0, [pc, #120]	; (8006cc4 <report_grbl_settings+0x384>)
 8006c4a:	f7fe f911 	bl	8004e70 <printString>
 8006c4e:	f04f 0800 	mov.w	r8, #0
  #else
    report_util_uint8_setting(32,0);
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8006c52:	2664      	movs	r6, #100	; 0x64
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c54:	4f1b      	ldr	r7, [pc, #108]	; (8006cc4 <report_grbl_settings+0x384>)
 8006c56:	fa5f fb88 	uxtb.w	fp, r8
 8006c5a:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006cc0 <report_grbl_settings+0x380>
void report_grbl_settings() {
 8006c5e:	4635      	mov	r5, r6
 8006c60:	2401      	movs	r4, #1
 8006c62:	e021      	b.n	8006ca8 <report_grbl_settings+0x368>
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
 8006c64:	f1bb 0f03 	cmp.w	fp, #3
 8006c68:	d030      	beq.n	8006ccc <report_grbl_settings+0x38c>
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c6a:	2024      	movs	r0, #36	; 0x24
      switch (set_idx) {
 8006c6c:	f1bb 0f01 	cmp.w	fp, #1
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c70:	bf14      	ite	ne
 8006c72:	f8da 9000 	ldrne.w	r9, [sl]
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8006c76:	f8da 9014 	ldreq.w	r9, [sl, #20]
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006c7a:	f000 fc55 	bl	8007528 <serial_write>
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f7fe f902 	bl	8004e88 <print_uint8_base10>
 8006c84:	203d      	movs	r0, #61	; 0x3d
 8006c86:	f000 fc4f 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006c8a:	4648      	mov	r0, r9
 8006c8c:	2103      	movs	r1, #3
 8006c8e:	f7fe f93d 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7fe f8ec 	bl	8004e70 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8006c98:	2c05      	cmp	r4, #5
 8006c9a:	d02f      	beq.n	8006cfc <report_grbl_settings+0x3bc>
 8006c9c:	3401      	adds	r4, #1
 8006c9e:	1c68      	adds	r0, r5, #1
 8006ca0:	b2e4      	uxtb	r4, r4
 8006ca2:	b2c5      	uxtb	r5, r0
 8006ca4:	f10a 0a04 	add.w	sl, sl, #4
      switch (set_idx) {
 8006ca8:	f1bb 0f02 	cmp.w	fp, #2
 8006cac:	d1da      	bne.n	8006c64 <report_grbl_settings+0x324>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8006cae:	4906      	ldr	r1, [pc, #24]	; (8006cc8 <report_grbl_settings+0x388>)
 8006cb0:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8006cb4:	f7f9 fffc 	bl	8000cb0 <__aeabi_fmul>
 8006cb8:	4681      	mov	r9, r0
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cba:	2024      	movs	r0, #36	; 0x24
 8006cbc:	e7dd      	b.n	8006c7a <report_grbl_settings+0x33a>
 8006cbe:	bf00      	nop
 8006cc0:	2000134c 	.word	0x2000134c
 8006cc4:	0800c2c8 	.word	0x0800c2c8
 8006cc8:	3991a2b4 	.word	0x3991a2b4
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006ccc:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cd0:	2024      	movs	r0, #36	; 0x24
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8006cd2:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8006cd6:	f000 fc27 	bl	8007528 <serial_write>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f7fe f8d4 	bl	8004e88 <print_uint8_base10>
 8006ce0:	203d      	movs	r0, #61	; 0x3d
 8006ce2:	f000 fc21 	bl	8007528 <serial_write>
  printFloat(val, n_decimal);
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	4648      	mov	r0, r9
 8006cea:	f7fe f90f 	bl	8004f0c <printFloat>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f7fe f8be 	bl	8004e70 <printString>
    for (idx=0; idx<N_AXIS; idx++) {
 8006cf4:	2c05      	cmp	r4, #5
 8006cf6:	d1d1      	bne.n	8006c9c <report_grbl_settings+0x35c>
 8006cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
    }
    val += AXIS_SETTINGS_INCREMENT;
 8006cfc:	360a      	adds	r6, #10
 8006cfe:	b2f6      	uxtb	r6, r6
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8006d00:	2e8c      	cmp	r6, #140	; 0x8c
 8006d02:	f108 0801 	add.w	r8, r8, #1
 8006d06:	d1a6      	bne.n	8006c56 <report_grbl_settings+0x316>
 8006d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d0c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8006d0c:	b530      	push	{r4, r5, lr}
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8006d0e:	4812      	ldr	r0, [pc, #72]	; (8006d58 <report_probe_parameters+0x4c>)
{
 8006d10:	b087      	sub	sp, #28
  printPgmString(PSTR("[PRB:"));
 8006d12:	f7fe f8ad 	bl	8004e70 <printString>
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006d16:	a801      	add	r0, sp, #4
 8006d18:	4910      	ldr	r1, [pc, #64]	; (8006d5c <report_probe_parameters+0x50>)
 8006d1a:	f002 fe0f 	bl	800993c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006d1e:	9801      	ldr	r0, [sp, #4]
 8006d20:	f7fe f966 	bl	8004ff0 <printFloat_CoordValue>
 8006d24:	ac01      	add	r4, sp, #4
 8006d26:	ad05      	add	r5, sp, #20
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006d28:	202c      	movs	r0, #44	; 0x2c
 8006d2a:	f000 fbfd 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006d2e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006d32:	f7fe f95d 	bl	8004ff0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006d36:	42ac      	cmp	r4, r5
 8006d38:	d1f6      	bne.n	8006d28 <report_probe_parameters+0x1c>
  report_util_axis_values(print_position);
  serial_write(':');
 8006d3a:	203a      	movs	r0, #58	; 0x3a
 8006d3c:	f000 fbf4 	bl	8007528 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <report_probe_parameters+0x54>)
 8006d42:	7958      	ldrb	r0, [r3, #5]
 8006d44:	f7fe f8a0 	bl	8004e88 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006d48:	205d      	movs	r0, #93	; 0x5d
 8006d4a:	f000 fbed 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006d4e:	4805      	ldr	r0, [pc, #20]	; (8006d64 <report_probe_parameters+0x58>)
 8006d50:	f7fe f88e 	bl	8004e70 <printString>
  report_util_feedback_line_feed();
}
 8006d54:	b007      	add	sp, #28
 8006d56:	bd30      	pop	{r4, r5, pc}
 8006d58:	0800c230 	.word	0x0800c230
 8006d5c:	200011a0 	.word	0x200011a0
 8006d60:	20001188 	.word	0x20001188
 8006d64:	0800c2c8 	.word	0x0800c2c8

08006d68 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8006d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	2500      	movs	r5, #0
 8006d6e:	b08b      	sub	sp, #44	; 0x2c
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8006d70:	4f48      	ldr	r7, [pc, #288]	; (8006e94 <report_ngc_parameters+0x12c>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8006d72:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8006eb8 <report_ngc_parameters+0x150>
      case 7: printPgmString(PSTR("30")); break;
 8006d76:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006ebc <report_ngc_parameters+0x154>
 8006d7a:	e01e      	b.n	8006dba <report_ngc_parameters+0x52>
    switch (coord_select) {
 8006d7c:	2c07      	cmp	r4, #7
 8006d7e:	d12c      	bne.n	8006dda <report_ngc_parameters+0x72>
      case 7: printPgmString(PSTR("30")); break;
 8006d80:	4640      	mov	r0, r8
 8006d82:	f7fe f875 	bl	8004e70 <printString>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8006d86:	203a      	movs	r0, #58	; 0x3a
 8006d88:	f000 fbce 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006d8c:	9800      	ldr	r0, [sp, #0]
 8006d8e:	f7fe f92f 	bl	8004ff0 <printFloat_CoordValue>
 8006d92:	466c      	mov	r4, sp
 8006d94:	ae04      	add	r6, sp, #16
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006d96:	202c      	movs	r0, #44	; 0x2c
 8006d98:	f000 fbc6 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006d9c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006da0:	f7fe f926 	bl	8004ff0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006da4:	42a6      	cmp	r6, r4
 8006da6:	d1f6      	bne.n	8006d96 <report_ngc_parameters+0x2e>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006da8:	205d      	movs	r0, #93	; 0x5d
 8006daa:	f000 fbbd 	bl	8007528 <serial_write>
 8006dae:	3501      	adds	r5, #1
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006db0:	4839      	ldr	r0, [pc, #228]	; (8006e98 <report_ngc_parameters+0x130>)
 8006db2:	f7fe f85d 	bl	8004e70 <printString>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8006db6:	2d08      	cmp	r5, #8
 8006db8:	d015      	beq.n	8006de6 <report_ngc_parameters+0x7e>
 8006dba:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4669      	mov	r1, sp
 8006dc0:	f000 fdaa 	bl	8007918 <settings_read_coord_data>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d059      	beq.n	8006e7c <report_ngc_parameters+0x114>
    printPgmString(PSTR("[G"));
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7fe f851 	bl	8004e70 <printString>
    switch (coord_select) {
 8006dce:	2c06      	cmp	r4, #6
 8006dd0:	d1d4      	bne.n	8006d7c <report_ngc_parameters+0x14>
      case 6: printPgmString(PSTR("28")); break;
 8006dd2:	4648      	mov	r0, r9
 8006dd4:	f7fe f84c 	bl	8004e70 <printString>
 8006dd8:	e7d5      	b.n	8006d86 <report_ngc_parameters+0x1e>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8006dda:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8006dde:	b2c0      	uxtb	r0, r0
 8006de0:	f7fe f852 	bl	8004e88 <print_uint8_base10>
 8006de4:	e7cf      	b.n	8006d86 <report_ngc_parameters+0x1e>
    printFloat_CoordValue(axis_value[idx]);
 8006de6:	4d2d      	ldr	r5, [pc, #180]	; (8006e9c <report_ngc_parameters+0x134>)
    report_util_axis_values(coord_data);
    report_util_feedback_line_feed();
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8006de8:	482d      	ldr	r0, [pc, #180]	; (8006ea0 <report_ngc_parameters+0x138>)
 8006dea:	f7fe f841 	bl	8004e70 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8006dee:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8006df0:	f7fe f8fe 	bl	8004ff0 <printFloat_CoordValue>
 8006df4:	f105 0448 	add.w	r4, r5, #72	; 0x48
 8006df8:	f105 0658 	add.w	r6, r5, #88	; 0x58
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006dfc:	202c      	movs	r0, #44	; 0x2c
 8006dfe:	f000 fb93 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e02:	f854 0b04 	ldr.w	r0, [r4], #4
 8006e06:	f7fe f8f3 	bl	8004ff0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e0a:	42b4      	cmp	r4, r6
 8006e0c:	d1f6      	bne.n	8006dfc <report_ngc_parameters+0x94>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e0e:	205d      	movs	r0, #93	; 0x5d
 8006e10:	f000 fb8a 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e14:	4820      	ldr	r0, [pc, #128]	; (8006e98 <report_ngc_parameters+0x130>)
 8006e16:	f7fe f82b 	bl	8004e70 <printString>
  report_util_axis_values(gc_state.coord_offset);
  report_util_feedback_line_feed();
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8006e1a:	4822      	ldr	r0, [pc, #136]	; (8006ea4 <report_ngc_parameters+0x13c>)
 8006e1c:	f7fe f828 	bl	8004e70 <printString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8006e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e22:	f7fe f8e5 	bl	8004ff0 <printFloat_CoordValue>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e26:	205d      	movs	r0, #93	; 0x5d
 8006e28:	f000 fb7e 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e2c:	481a      	ldr	r0, [pc, #104]	; (8006e98 <report_ngc_parameters+0x130>)
 8006e2e:	f7fe f81f 	bl	8004e70 <printString>
  printPgmString(PSTR("[PRB:"));
 8006e32:	481d      	ldr	r0, [pc, #116]	; (8006ea8 <report_ngc_parameters+0x140>)
 8006e34:	f7fe f81c 	bl	8004e70 <printString>
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8006e38:	a805      	add	r0, sp, #20
 8006e3a:	491c      	ldr	r1, [pc, #112]	; (8006eac <report_ngc_parameters+0x144>)
 8006e3c:	f002 fd7e 	bl	800993c <system_convert_array_steps_to_mpos>
    printFloat_CoordValue(axis_value[idx]);
 8006e40:	9805      	ldr	r0, [sp, #20]
 8006e42:	f7fe f8d5 	bl	8004ff0 <printFloat_CoordValue>
 8006e46:	ac05      	add	r4, sp, #20
 8006e48:	ad09      	add	r5, sp, #36	; 0x24
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e4a:	202c      	movs	r0, #44	; 0x2c
 8006e4c:	f000 fb6c 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8006e50:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8006e54:	f7fe f8cc 	bl	8004ff0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8006e58:	42ac      	cmp	r4, r5
 8006e5a:	d1f6      	bne.n	8006e4a <report_ngc_parameters+0xe2>
  serial_write(':');
 8006e5c:	203a      	movs	r0, #58	; 0x3a
 8006e5e:	f000 fb63 	bl	8007528 <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <report_ngc_parameters+0x148>)
 8006e64:	7958      	ldrb	r0, [r3, #5]
 8006e66:	f7fe f80f 	bl	8004e88 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006e6a:	205d      	movs	r0, #93	; 0x5d
 8006e6c:	f000 fb5c 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e70:	4809      	ldr	r0, [pc, #36]	; (8006e98 <report_ngc_parameters+0x130>)
 8006e72:	f7fd fffd 	bl	8004e70 <printString>
  report_util_feedback_line_feed();
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
}
 8006e76:	b00b      	add	sp, #44	; 0x2c
 8006e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      printPgmString(PSTR("error:"));
 8006e7c:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <report_ngc_parameters+0x14c>)
 8006e7e:	f7fd fff7 	bl	8004e70 <printString>
      print_uint8_base10(status_code);
 8006e82:	2007      	movs	r0, #7
 8006e84:	f7fe f800 	bl	8004e88 <print_uint8_base10>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006e88:	4803      	ldr	r0, [pc, #12]	; (8006e98 <report_ngc_parameters+0x130>)
 8006e8a:	f7fd fff1 	bl	8004e70 <printString>
}
 8006e8e:	b00b      	add	sp, #44	; 0x2c
 8006e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e94:	0800c214 	.word	0x0800c214
 8006e98:	0800c2c8 	.word	0x0800c2c8
 8006e9c:	200010d4 	.word	0x200010d4
 8006ea0:	0800c220 	.word	0x0800c220
 8006ea4:	0800c228 	.word	0x0800c228
 8006ea8:	0800c230 	.word	0x0800c230
 8006eac:	200011a0 	.word	0x200011a0
 8006eb0:	20001188 	.word	0x20001188
 8006eb4:	0800c2c0 	.word	0x0800c2c0
 8006eb8:	0800c218 	.word	0x0800c218
 8006ebc:	0800c21c 	.word	0x0800c21c

08006ec0 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8006ec0:	b510      	push	{r4, lr}
  printPgmString(PSTR("[GC:G"));
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006ec2:	4c4f      	ldr	r4, [pc, #316]	; (8007000 <report_gcode_modes+0x140>)
  printPgmString(PSTR("[GC:G"));
 8006ec4:	484f      	ldr	r0, [pc, #316]	; (8007004 <report_gcode_modes+0x144>)
 8006ec6:	f7fd ffd3 	bl	8004e70 <printString>
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8006eca:	7820      	ldrb	r0, [r4, #0]
 8006ecc:	288b      	cmp	r0, #139	; 0x8b
 8006ece:	d95e      	bls.n	8006f8e <report_gcode_modes+0xce>
    printPgmString(PSTR("38."));
 8006ed0:	484d      	ldr	r0, [pc, #308]	; (8007008 <report_gcode_modes+0x148>)
 8006ed2:	f7fd ffcd 	bl	8004e70 <printString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8006ed6:	7820      	ldrb	r0, [r4, #0]
 8006ed8:	3076      	adds	r0, #118	; 0x76
 8006eda:	b2c0      	uxtb	r0, r0
 8006edc:	f7fd ffd4 	bl	8004e88 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006ee0:	484a      	ldr	r0, [pc, #296]	; (800700c <report_gcode_modes+0x14c>)
 8006ee2:	f7fd ffc5 	bl	8004e70 <printString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8006ee6:	79a0      	ldrb	r0, [r4, #6]
 8006ee8:	3036      	adds	r0, #54	; 0x36
 8006eea:	b2c0      	uxtb	r0, r0
 8006eec:	f7fd ffcc 	bl	8004e88 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006ef0:	4846      	ldr	r0, [pc, #280]	; (800700c <report_gcode_modes+0x14c>)
 8006ef2:	f7fd ffbd 	bl	8004e70 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8006ef6:	7920      	ldrb	r0, [r4, #4]
 8006ef8:	3011      	adds	r0, #17
 8006efa:	b2c0      	uxtb	r0, r0
 8006efc:	f7fd ffc4 	bl	8004e88 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006f00:	4842      	ldr	r0, [pc, #264]	; (800700c <report_gcode_modes+0x14c>)
 8006f02:	f7fd ffb5 	bl	8004e70 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8006f06:	78a0      	ldrb	r0, [r4, #2]
 8006f08:	f1c0 0015 	rsb	r0, r0, #21
 8006f0c:	b2c0      	uxtb	r0, r0
 8006f0e:	f7fd ffbb 	bl	8004e88 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006f12:	483e      	ldr	r0, [pc, #248]	; (800700c <report_gcode_modes+0x14c>)
 8006f14:	f7fd ffac 	bl	8004e70 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8006f18:	78e0      	ldrb	r0, [r4, #3]
 8006f1a:	305a      	adds	r0, #90	; 0x5a
 8006f1c:	b2c0      	uxtb	r0, r0
 8006f1e:	f7fd ffb3 	bl	8004e88 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8006f22:	483a      	ldr	r0, [pc, #232]	; (800700c <report_gcode_modes+0x14c>)
 8006f24:	f7fd ffa4 	bl	8004e70 <printString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8006f28:	7860      	ldrb	r0, [r4, #1]
 8006f2a:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8006f2e:	b2c0      	uxtb	r0, r0
 8006f30:	f7fd ffaa 	bl	8004e88 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8006f34:	79e3      	ldrb	r3, [r4, #7]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d139      	bne.n	8006fae <report_gcode_modes+0xee>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006f3a:	4835      	ldr	r0, [pc, #212]	; (8007010 <report_gcode_modes+0x150>)
 8006f3c:	f7fd ff98 	bl	8004e70 <printString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8006f40:	7a63      	ldrb	r3, [r4, #9]
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d044      	beq.n	8006fd0 <report_gcode_modes+0x110>
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d03e      	beq.n	8006fc8 <report_gcode_modes+0x108>
 8006f4a:	b31b      	cbz	r3, 8006f94 <report_gcode_modes+0xd4>
    case SPINDLE_DISABLE : serial_write('5'); break;
  }

  //report_util_gcode_modes_M();
  #ifdef ENABLE_M7
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006f4c:	7a23      	ldrb	r3, [r4, #8]
 8006f4e:	b33b      	cbz	r3, 8006fa0 <report_gcode_modes+0xe0>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006f50:	061a      	lsls	r2, r3, #24
 8006f52:	d44c      	bmi.n	8006fee <report_gcode_modes+0x12e>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006f54:	065b      	lsls	r3, r3, #25
 8006f56:	d43f      	bmi.n	8006fd8 <report_gcode_modes+0x118>
			report_util_gcode_modes_M();
			print_uint8_base10(56);
		}
	#endif

  printPgmString(PSTR(" T"));
 8006f58:	482e      	ldr	r0, [pc, #184]	; (8007014 <report_gcode_modes+0x154>)
 8006f5a:	f7fd ff89 	bl	8004e70 <printString>
  print_uint8_base10(gc_state.tool);
 8006f5e:	7d20      	ldrb	r0, [r4, #20]
 8006f60:	f7fd ff92 	bl	8004e88 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8006f64:	482c      	ldr	r0, [pc, #176]	; (8007018 <report_gcode_modes+0x158>)
 8006f66:	f7fd ff83 	bl	8004e70 <printString>
  printFloat_RateValue(gc_state.feed_rate);
 8006f6a:	6920      	ldr	r0, [r4, #16]
 8006f6c:	f7fe f928 	bl	80051c0 <printFloat_RateValue>

  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
 8006f70:	482a      	ldr	r0, [pc, #168]	; (800701c <report_gcode_modes+0x15c>)
 8006f72:	f7fd ff7d 	bl	8004e70 <printString>
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
 8006f76:	68e0      	ldr	r0, [r4, #12]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f7fd ffc7 	bl	8004f0c <printFloat>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8006f7e:	205d      	movs	r0, #93	; 0x5d
 8006f80:	f000 fad2 	bl	8007528 <serial_write>
  #endif

  report_util_feedback_line_feed();
}
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8006f88:	4825      	ldr	r0, [pc, #148]	; (8007020 <report_gcode_modes+0x160>)
 8006f8a:	f7fd bf71 	b.w	8004e70 <printString>
    print_uint8_base10(gc_state.modal.motion);
 8006f8e:	f7fd ff7b 	bl	8004e88 <print_uint8_base10>
 8006f92:	e7a5      	b.n	8006ee0 <report_gcode_modes+0x20>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8006f94:	2035      	movs	r0, #53	; 0x35
 8006f96:	f000 fac7 	bl	8007528 <serial_write>
    if (gc_state.modal.coolant) { // Note: Multiple coolant states may be active at the same time.
 8006f9a:	7a23      	ldrb	r3, [r4, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1d7      	bne.n	8006f50 <report_gcode_modes+0x90>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006fa0:	481b      	ldr	r0, [pc, #108]	; (8007010 <report_gcode_modes+0x150>)
 8006fa2:	f7fd ff65 	bl	8004e70 <printString>
    } else { report_util_gcode_modes_M(); serial_write('9'); }
 8006fa6:	2039      	movs	r0, #57	; 0x39
 8006fa8:	f000 fabe 	bl	8007528 <serial_write>
 8006fac:	e7d4      	b.n	8006f58 <report_gcode_modes+0x98>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006fae:	4818      	ldr	r0, [pc, #96]	; (8007010 <report_gcode_modes+0x150>)
 8006fb0:	f7fd ff5e 	bl	8004e70 <printString>
    switch (gc_state.modal.program_flow) {
 8006fb4:	79e0      	ldrb	r0, [r4, #7]
 8006fb6:	2803      	cmp	r0, #3
 8006fb8:	d015      	beq.n	8006fe6 <report_gcode_modes+0x126>
 8006fba:	281e      	cmp	r0, #30
 8006fbc:	d001      	beq.n	8006fc2 <report_gcode_modes+0x102>
 8006fbe:	2802      	cmp	r0, #2
 8006fc0:	d1bb      	bne.n	8006f3a <report_gcode_modes+0x7a>
        print_uint8_base10(gc_state.modal.program_flow);
 8006fc2:	f7fd ff61 	bl	8004e88 <print_uint8_base10>
        break;
 8006fc6:	e7b8      	b.n	8006f3a <report_gcode_modes+0x7a>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8006fc8:	2034      	movs	r0, #52	; 0x34
 8006fca:	f000 faad 	bl	8007528 <serial_write>
 8006fce:	e7bd      	b.n	8006f4c <report_gcode_modes+0x8c>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8006fd0:	2033      	movs	r0, #51	; 0x33
 8006fd2:	f000 faa9 	bl	8007528 <serial_write>
 8006fd6:	e7b9      	b.n	8006f4c <report_gcode_modes+0x8c>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006fd8:	480d      	ldr	r0, [pc, #52]	; (8007010 <report_gcode_modes+0x150>)
 8006fda:	f7fd ff49 	bl	8004e70 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
 8006fde:	2038      	movs	r0, #56	; 0x38
 8006fe0:	f000 faa2 	bl	8007528 <serial_write>
 8006fe4:	e7b8      	b.n	8006f58 <report_gcode_modes+0x98>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8006fe6:	2030      	movs	r0, #48	; 0x30
 8006fe8:	f000 fa9e 	bl	8007528 <serial_write>
 8006fec:	e7a5      	b.n	8006f3a <report_gcode_modes+0x7a>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8006fee:	4808      	ldr	r0, [pc, #32]	; (8007010 <report_gcode_modes+0x150>)
 8006ff0:	f7fd ff3e 	bl	8004e70 <printString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
 8006ff4:	2037      	movs	r0, #55	; 0x37
 8006ff6:	f000 fa97 	bl	8007528 <serial_write>
 8006ffa:	7a23      	ldrb	r3, [r4, #8]
 8006ffc:	e7aa      	b.n	8006f54 <report_gcode_modes+0x94>
 8006ffe:	bf00      	nop
 8007000:	200010d4 	.word	0x200010d4
 8007004:	0800c188 	.word	0x0800c188
 8007008:	0800c190 	.word	0x0800c190
 800700c:	0800c194 	.word	0x0800c194
 8007010:	0800c198 	.word	0x0800c198
 8007014:	0800c19c 	.word	0x0800c19c
 8007018:	0800c1a0 	.word	0x0800c1a0
 800701c:	0800c1a4 	.word	0x0800c1a4
 8007020:	0800c2c8 	.word	0x0800c2c8

08007024 <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4605      	mov	r5, r0
 8007028:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 800702a:	4808      	ldr	r0, [pc, #32]	; (800704c <report_startup_line+0x28>)
 800702c:	f7fd ff20 	bl	8004e70 <printString>
  print_uint8_base10(n);
 8007030:	4628      	mov	r0, r5
 8007032:	f7fd ff29 	bl	8004e88 <print_uint8_base10>
  serial_write('=');
 8007036:	203d      	movs	r0, #61	; 0x3d
 8007038:	f000 fa76 	bl	8007528 <serial_write>
  printString(line);
 800703c:	4620      	mov	r0, r4
 800703e:	f7fd ff17 	bl	8004e70 <printString>
  report_util_line_feed();
}
 8007042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007046:	4802      	ldr	r0, [pc, #8]	; (8007050 <report_startup_line+0x2c>)
 8007048:	f7fd bf12 	b.w	8004e70 <printString>
 800704c:	0800c2b4 	.word	0x0800c2b4
 8007050:	0800c2c8 	.word	0x0800c2c8

08007054 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4605      	mov	r5, r0
 8007058:	460c      	mov	r4, r1
  serial_write('>');
 800705a:	203e      	movs	r0, #62	; 0x3e
 800705c:	f000 fa64 	bl	8007528 <serial_write>
  printString(line);
 8007060:	4628      	mov	r0, r5
 8007062:	f7fd ff05 	bl	8004e70 <printString>
  serial_write(':');
 8007066:	203a      	movs	r0, #58	; 0x3a
 8007068:	f000 fa5e 	bl	8007528 <serial_write>
  switch(status_code) {
 800706c:	b154      	cbz	r4, 8007084 <report_execute_startup_message+0x30>
      printPgmString(PSTR("error:"));
 800706e:	4808      	ldr	r0, [pc, #32]	; (8007090 <report_execute_startup_message+0x3c>)
 8007070:	f7fd fefe 	bl	8004e70 <printString>
      print_uint8_base10(status_code);
 8007074:	4620      	mov	r0, r4
 8007076:	f7fd ff07 	bl	8004e88 <print_uint8_base10>
  report_status_message(status_code);
}
 800707a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 800707e:	4805      	ldr	r0, [pc, #20]	; (8007094 <report_execute_startup_message+0x40>)
 8007080:	f7fd bef6 	b.w	8004e70 <printString>
      printPgmString(PSTR("ok\r\n")); break;
 8007084:	4804      	ldr	r0, [pc, #16]	; (8007098 <report_execute_startup_message+0x44>)
}
 8007086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      printPgmString(PSTR("ok\r\n")); break;
 800708a:	f7fd bef1 	b.w	8004e70 <printString>
 800708e:	bf00      	nop
 8007090:	0800c2c0 	.word	0x0800c2c0
 8007094:	0800c2c8 	.word	0x0800c2c8
 8007098:	0800c2b8 	.word	0x0800c2b8

0800709c <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
  printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 80070a0:	4817      	ldr	r0, [pc, #92]	; (8007100 <report_build_info+0x64>)
 80070a2:	f7fd fee5 	bl	8004e70 <printString>
  printString(line);
 80070a6:	4620      	mov	r0, r4
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070a8:	4c16      	ldr	r4, [pc, #88]	; (8007104 <report_build_info+0x68>)
  printString(line);
 80070aa:	f7fd fee1 	bl	8004e70 <printString>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80070ae:	205d      	movs	r0, #93	; 0x5d
 80070b0:	f000 fa3a 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7fd fedb 	bl	8004e70 <printString>
  report_util_feedback_line_feed();
  printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 80070ba:	4813      	ldr	r0, [pc, #76]	; (8007108 <report_build_info+0x6c>)
 80070bc:	f7fd fed8 	bl	8004e70 <printString>
  #ifdef VARIABLE_SPINDLE
    serial_write('V');
 80070c0:	2056      	movs	r0, #86	; 0x56
 80070c2:	f000 fa31 	bl	8007528 <serial_write>
  #endif
  #ifdef USE_LINE_NUMBERS
    serial_write('N');
  #endif
  #ifdef ENABLE_M7
    serial_write('M');
 80070c6:	204d      	movs	r0, #77	; 0x4d
 80070c8:	f000 fa2e 	bl	8007528 <serial_write>
  #endif
  #ifdef PARKING_ENABLE
    serial_write('P');
  #endif
  #ifdef HOMING_FORCE_SET_ORIGIN
    serial_write('Z');
 80070cc:	205a      	movs	r0, #90	; 0x5a
 80070ce:	f000 fa2b 	bl	8007528 <serial_write>
  #endif
  #ifdef HOMING_SINGLE_AXIS_COMMANDS
    serial_write('H');
 80070d2:	2048      	movs	r0, #72	; 0x48
 80070d4:	f000 fa28 	bl	8007528 <serial_write>
	#ifndef HOMING_INIT_LOCK
		serial_write('L');
	#endif

  // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
	serial_write(',');
 80070d8:	202c      	movs	r0, #44	; 0x2c
 80070da:	f000 fa25 	bl	8007528 <serial_write>
	print_uint8_base10(BLOCK_BUFFER_SIZE - 1);
 80070de:	2023      	movs	r0, #35	; 0x23
 80070e0:	f7fd fed2 	bl	8004e88 <print_uint8_base10>
	serial_write(',');
 80070e4:	202c      	movs	r0, #44	; 0x2c
 80070e6:	f000 fa1f 	bl	8007528 <serial_write>
	print_uint8_base10(RX_BUFFER_SIZE);
 80070ea:	20fe      	movs	r0, #254	; 0xfe
 80070ec:	f7fd fecc 	bl	8004e88 <print_uint8_base10>
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 80070f0:	205d      	movs	r0, #93	; 0x5d
 80070f2:	f000 fa19 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070f6:	4620      	mov	r0, r4

	report_util_feedback_line_feed();
}
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 80070fc:	f7fd beb8 	b.w	8004e70 <printString>
 8007100:	0800c0bc 	.word	0x0800c0bc
 8007104:	0800c2c8 	.word	0x0800c2c8
 8007108:	0800c0d0 	.word	0x0800c0d0

0800710c <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t idx;
  int32_t current_position[N_AXIS]; // Copy current state of the system position variable
  memcpy(current_position, sys_position, sizeof(sys_position));
 800710e:	4db1      	ldr	r5, [pc, #708]	; (80073d4 <report_realtime_status+0x2c8>)
{
 8007110:	b091      	sub	sp, #68	; 0x44
  memcpy(current_position, sys_position, sizeof(sys_position));
 8007112:	ac01      	add	r4, sp, #4
 8007114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007118:	682b      	ldr	r3, [r5, #0]
  float print_position[N_AXIS];
  system_convert_array_steps_to_mpos(print_position, current_position);
 800711a:	a806      	add	r0, sp, #24
  memcpy(current_position, sys_position, sizeof(sys_position));
 800711c:	6023      	str	r3, [r4, #0]
  system_convert_array_steps_to_mpos(print_position, current_position);
 800711e:	a901      	add	r1, sp, #4

  // Report current machine state and sub-states
  serial_write('<');
  switch (sys.state) {
 8007120:	4dad      	ldr	r5, [pc, #692]	; (80073d8 <report_realtime_status+0x2cc>)
  system_convert_array_steps_to_mpos(print_position, current_position);
 8007122:	f002 fc0b 	bl	800993c <system_convert_array_steps_to_mpos>
  serial_write('<');
 8007126:	203c      	movs	r0, #60	; 0x3c
 8007128:	f000 f9fe 	bl	8007528 <serial_write>
  switch (sys.state) {
 800712c:	782b      	ldrb	r3, [r5, #0]
 800712e:	2b08      	cmp	r3, #8
 8007130:	f000 81ae 	beq.w	8007490 <report_realtime_status+0x384>
 8007134:	d951      	bls.n	80071da <report_realtime_status+0xce>
 8007136:	2b20      	cmp	r3, #32
 8007138:	f000 819e 	beq.w	8007478 <report_realtime_status+0x36c>
 800713c:	f240 8105 	bls.w	800734a <report_realtime_status+0x23e>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	f000 80ee 	beq.w	8007322 <report_realtime_status+0x216>
 8007146:	2b80      	cmp	r3, #128	; 0x80
 8007148:	d154      	bne.n	80071f4 <report_realtime_status+0xe8>
    break;
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
  }

  float wco[N_AXIS];
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 800714a:	4fa4      	ldr	r7, [pc, #656]	; (80073dc <report_realtime_status+0x2d0>)
  case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 800714c:	48a4      	ldr	r0, [pc, #656]	; (80073e0 <report_realtime_status+0x2d4>)
 800714e:	f7fd fe8f 	bl	8004e70 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8007152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007156:	07de      	lsls	r6, r3, #31
 8007158:	d451      	bmi.n	80071fe <report_realtime_status+0xf2>
    (sys.report_wco_counter == 0)) {
    for (idx = 0; idx< N_AXIS; idx++) {
      // Apply work coordinate offsets and tool length offset to current position.
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800715a:	4ca2      	ldr	r4, [pc, #648]	; (80073e4 <report_realtime_status+0x2d8>)
 800715c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800715e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007160:	f7f9 fc9e 	bl	8000aa0 <__addsf3>
 8007164:	4603      	mov	r3, r0
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
      if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
        print_position[idx] -= wco[idx];
 8007166:	9806      	ldr	r0, [sp, #24]
 8007168:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800716a:	930b      	str	r3, [sp, #44]	; 0x2c
        print_position[idx] -= wco[idx];
 800716c:	f7f9 fc96 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007170:	6ca1      	ldr	r1, [r4, #72]	; 0x48
        print_position[idx] -= wco[idx];
 8007172:	9006      	str	r0, [sp, #24]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007174:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007176:	f7f9 fc93 	bl	8000aa0 <__addsf3>
 800717a:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 800717c:	9807      	ldr	r0, [sp, #28]
 800717e:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007180:	930c      	str	r3, [sp, #48]	; 0x30
        print_position[idx] -= wco[idx];
 8007182:	f7f9 fc8b 	bl	8000a9c <__aeabi_fsub>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007186:	6da6      	ldr	r6, [r4, #88]	; 0x58
        print_position[idx] -= wco[idx];
 8007188:	9007      	str	r0, [sp, #28]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800718a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800718c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800718e:	f7f9 fc87 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007192:	4631      	mov	r1, r6
 8007194:	f7f9 fc84 	bl	8000aa0 <__addsf3>
 8007198:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 800719a:	9808      	ldr	r0, [sp, #32]
 800719c:	4619      	mov	r1, r3
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800719e:	930d      	str	r3, [sp, #52]	; 0x34
        print_position[idx] -= wco[idx];
 80071a0:	f7f9 fc7c 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80071a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
        print_position[idx] -= wco[idx];
 80071a6:	9008      	str	r0, [sp, #32]
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80071a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80071aa:	f7f9 fc79 	bl	8000aa0 <__addsf3>
 80071ae:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 80071b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b2:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80071b4:	930e      	str	r3, [sp, #56]	; 0x38
        print_position[idx] -= wco[idx];
 80071b6:	f7f9 fc71 	bl	8000a9c <__aeabi_fsub>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80071ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
        print_position[idx] -= wco[idx];
 80071bc:	9009      	str	r0, [sp, #36]	; 0x24
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80071be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80071c0:	f7f9 fc6e 	bl	8000aa0 <__addsf3>
 80071c4:	4603      	mov	r3, r0
        print_position[idx] -= wco[idx];
 80071c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071c8:	4619      	mov	r1, r3
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 80071ca:	930f      	str	r3, [sp, #60]	; 0x3c
        print_position[idx] -= wco[idx];
 80071cc:	f7f9 fc66 	bl	8000a9c <__aeabi_fsub>
 80071d0:	900a      	str	r0, [sp, #40]	; 0x28
  // Report machine position
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE)) {
    printPgmString(PSTR("|MPos:"));
  }
  else {
    printPgmString(PSTR("|WPos:"));
 80071d2:	4885      	ldr	r0, [pc, #532]	; (80073e8 <report_realtime_status+0x2dc>)
 80071d4:	f7fd fe4c 	bl	8004e70 <printString>
 80071d8:	e034      	b.n	8007244 <report_realtime_status+0x138>
  switch (sys.state) {
 80071da:	2b01      	cmp	r3, #1
 80071dc:	f000 8154 	beq.w	8007488 <report_realtime_status+0x37c>
 80071e0:	f0c0 814e 	bcc.w	8007480 <report_realtime_status+0x374>
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	f000 80ac 	beq.w	8007342 <report_realtime_status+0x236>
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d102      	bne.n	80071f4 <report_realtime_status+0xe8>
  case STATE_HOMING: printPgmString(PSTR("Home")); break;
 80071ee:	487f      	ldr	r0, [pc, #508]	; (80073ec <report_realtime_status+0x2e0>)
 80071f0:	f7fd fe3e 	bl	8004e70 <printString>
  if (bit_isfalse(settings.status_report_mask, BITFLAG_RT_STATUS_POSITION_TYPE) ||
 80071f4:	4f79      	ldr	r7, [pc, #484]	; (80073dc <report_realtime_status+0x2d0>)
 80071f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071fa:	07de      	lsls	r6, r3, #31
 80071fc:	d5ad      	bpl.n	800715a <report_realtime_status+0x4e>
 80071fe:	7b6b      	ldrb	r3, [r5, #13]
 8007200:	b9eb      	cbnz	r3, 800723e <report_realtime_status+0x132>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007202:	4c78      	ldr	r4, [pc, #480]	; (80073e4 <report_realtime_status+0x2d8>)
 8007204:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007206:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007208:	f7f9 fc4a 	bl	8000aa0 <__addsf3>
 800720c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800720e:	900b      	str	r0, [sp, #44]	; 0x2c
 8007210:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007212:	f7f9 fc45 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007216:	6da6      	ldr	r6, [r4, #88]	; 0x58
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007218:	900c      	str	r0, [sp, #48]	; 0x30
 800721a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800721c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800721e:	f7f9 fc3f 	bl	8000aa0 <__addsf3>
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8007222:	4631      	mov	r1, r6
 8007224:	f7f9 fc3c 	bl	8000aa0 <__addsf3>
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 8007228:	6be1      	ldr	r1, [r4, #60]	; 0x3c
      if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 800722a:	900d      	str	r0, [sp, #52]	; 0x34
      wco[idx] = gc_state.coord_system[idx] + gc_state.coord_offset[idx];
 800722c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800722e:	f7f9 fc37 	bl	8000aa0 <__addsf3>
 8007232:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007234:	900e      	str	r0, [sp, #56]	; 0x38
 8007236:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007238:	f7f9 fc32 	bl	8000aa0 <__addsf3>
 800723c:	900f      	str	r0, [sp, #60]	; 0x3c
    printPgmString(PSTR("|MPos:"));
 800723e:	486c      	ldr	r0, [pc, #432]	; (80073f0 <report_realtime_status+0x2e4>)
 8007240:	f7fd fe16 	bl	8004e70 <printString>
    printFloat_CoordValue(axis_value[idx]);
 8007244:	9806      	ldr	r0, [sp, #24]
 8007246:	f7fd fed3 	bl	8004ff0 <printFloat_CoordValue>
 800724a:	ac06      	add	r4, sp, #24
 800724c:	ae0a      	add	r6, sp, #40	; 0x28
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800724e:	202c      	movs	r0, #44	; 0x2c
 8007250:	f000 f96a 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 8007254:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8007258:	f7fd feca 	bl	8004ff0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 800725c:	42a6      	cmp	r6, r4
 800725e:	d1f6      	bne.n	800724e <report_realtime_status+0x142>
  }
  report_util_axis_values(print_position);

  // Returns planner and serial read buffer states.
#ifdef REPORT_FIELD_BUFFER_STATE
  if (bit_istrue(settings.status_report_mask, BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8007260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007264:	079c      	lsls	r4, r3, #30
 8007266:	f100 80a5 	bmi.w	80073b4 <report_realtime_status+0x2a8>
#endif

  // Report realtime feed speed
#ifdef REPORT_FIELD_CURRENT_FEED_SPEED
#ifdef VARIABLE_SPINDLE
  printPgmString(PSTR("|FS:"));
 800726a:	4862      	ldr	r0, [pc, #392]	; (80073f4 <report_realtime_status+0x2e8>)
 800726c:	f7fd fe00 	bl	8004e70 <printString>
  printFloat_RateValue(st_get_realtime_rate());
 8007270:	f002 f8e6 	bl	8009440 <st_get_realtime_rate>
 8007274:	f7fd ffa4 	bl	80051c0 <printFloat_RateValue>
  serial_write(',');
 8007278:	202c      	movs	r0, #44	; 0x2c
 800727a:	f000 f955 	bl	8007528 <serial_write>
  printFloat(sys.spindle_speed, N_DECIMAL_RPMVALUE);
 800727e:	2100      	movs	r1, #0
 8007280:	6928      	ldr	r0, [r5, #16]
 8007282:	f7fd fe43 	bl	8004f0c <printFloat>
  printFloat_RateValue(st_get_realtime_rate());
#endif      
#endif

#ifdef REPORT_FIELD_PIN_STATE
  uint8_t lim_pin_state = limits_get_state();
 8007286:	f7fc f80b 	bl	80032a0 <limits_get_state>
 800728a:	4604      	mov	r4, r0
  uint8_t ctrl_pin_state = system_control_get_state();
 800728c:	f002 f92a 	bl	80094e4 <system_control_get_state>
 8007290:	4606      	mov	r6, r0
  uint8_t prb_pin_state = probe_get_state();
 8007292:	f7fe f873 	bl	800537c <probe_get_state>
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8007296:	ea44 0306 	orr.w	r3, r4, r6
 800729a:	4303      	orrs	r3, r0
 800729c:	f013 0fff 	tst.w	r3, #255	; 0xff
  uint8_t prb_pin_state = probe_get_state();
 80072a0:	4607      	mov	r7, r0
  if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 80072a2:	f040 80b9 	bne.w	8007418 <report_realtime_status+0x30c>
    }
  }
#endif

#ifdef REPORT_FIELD_WORK_COORD_OFFSET
  if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 80072a6:	7b6b      	ldrb	r3, [r5, #13]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d060      	beq.n	800736e <report_realtime_status+0x262>
 80072ac:	3b01      	subs	r3, #1
 80072ae:	736b      	strb	r3, [r5, #13]
    report_util_axis_values(wco);
  }
#endif

  #ifdef REPORT_FIELD_OVERRIDES
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80072b0:	7b2b      	ldrb	r3, [r5, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d17b      	bne.n	80073ae <report_realtime_status+0x2a2>
    else {
      if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80072b6:	782b      	ldrb	r3, [r5, #0]
        sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT - 1); // Reset counter for slow refresh
      }
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
      printPgmString(PSTR("|Ov:"));
 80072b8:	484f      	ldr	r0, [pc, #316]	; (80073f8 <report_realtime_status+0x2ec>)
      else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT - 1); }
 80072ba:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 80072be:	bf14      	ite	ne
 80072c0:	2313      	movne	r3, #19
 80072c2:	2309      	moveq	r3, #9
 80072c4:	732b      	strb	r3, [r5, #12]
      printPgmString(PSTR("|Ov:"));
 80072c6:	f7fd fdd3 	bl	8004e70 <printString>
      print_uint8_base10(sys.f_override);
 80072ca:	7a28      	ldrb	r0, [r5, #8]
 80072cc:	f7fd fddc 	bl	8004e88 <print_uint8_base10>
      serial_write(',');
 80072d0:	202c      	movs	r0, #44	; 0x2c
 80072d2:	f000 f929 	bl	8007528 <serial_write>
      print_uint8_base10(sys.r_override);
 80072d6:	7a68      	ldrb	r0, [r5, #9]
 80072d8:	f7fd fdd6 	bl	8004e88 <print_uint8_base10>
      serial_write(',');
 80072dc:	202c      	movs	r0, #44	; 0x2c
 80072de:	f000 f923 	bl	8007528 <serial_write>
      print_uint8_base10(sys.spindle_speed_ovr);
 80072e2:	7aa8      	ldrb	r0, [r5, #10]
 80072e4:	f7fd fdd0 	bl	8004e88 <print_uint8_base10>

      uint8_t sp_state = spindle_get_state();
 80072e8:	f000 fdba 	bl	8007e60 <spindle_get_state>
 80072ec:	4605      	mov	r5, r0
      uint8_t cl_state = coolant_get_state();
 80072ee:	f7fa fc8f 	bl	8001c10 <coolant_get_state>
 80072f2:	4604      	mov	r4, r0
      if (sp_state || cl_state) {
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	f040 80b0 	bne.w	800745a <report_realtime_status+0x34e>
 80072fa:	b150      	cbz	r0, 8007312 <report_realtime_status+0x206>
        printPgmString(PSTR("|A:"));
 80072fc:	483f      	ldr	r0, [pc, #252]	; (80073fc <report_realtime_status+0x2f0>)
 80072fe:	f7fd fdb7 	bl	8004e70 <printString>
          #else
            if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
            else { serial_write('C'); } // CCW
          #endif
        }
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8007302:	07e2      	lsls	r2, r4, #31
 8007304:	f100 80b4 	bmi.w	8007470 <report_realtime_status+0x364>
        #ifdef ENABLE_M7
          if (cl_state & COOLANT_STATE_MIST) { serial_write('M'); }
 8007308:	07a3      	lsls	r3, r4, #30
 800730a:	d502      	bpl.n	8007312 <report_realtime_status+0x206>
 800730c:	204d      	movs	r0, #77	; 0x4d
 800730e:	f000 f90b 	bl	8007528 <serial_write>
        #endif
      }
    }
  #endif

  serial_write('>');
 8007312:	203e      	movs	r0, #62	; 0x3e
 8007314:	f000 f908 	bl	8007528 <serial_write>
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8007318:	4839      	ldr	r0, [pc, #228]	; (8007400 <report_realtime_status+0x2f4>)
 800731a:	f7fd fda9 	bl	8004e70 <printString>
  report_util_line_feed();
}
 800731e:	b011      	add	sp, #68	; 0x44
 8007320:	bdf0      	pop	{r4, r5, r6, r7, pc}
    printPgmString(PSTR("Door:"));
 8007322:	4838      	ldr	r0, [pc, #224]	; (8007404 <report_realtime_status+0x2f8>)
 8007324:	f7fd fda4 	bl	8004e70 <printString>
    if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8007328:	78ab      	ldrb	r3, [r5, #2]
 800732a:	0719      	lsls	r1, r3, #28
 800732c:	f100 80d4 	bmi.w	80074d8 <report_realtime_status+0x3cc>
      if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8007330:	075a      	lsls	r2, r3, #29
 8007332:	f140 80d5 	bpl.w	80074e0 <report_realtime_status+0x3d4>
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 8007336:	069f      	lsls	r7, r3, #26
 8007338:	d515      	bpl.n	8007366 <report_realtime_status+0x25a>
      else { serial_write('1'); } // Actively holding
 800733a:	2031      	movs	r0, #49	; 0x31
 800733c:	f000 f8f4 	bl	8007528 <serial_write>
 8007340:	e758      	b.n	80071f4 <report_realtime_status+0xe8>
  case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 8007342:	4831      	ldr	r0, [pc, #196]	; (8007408 <report_realtime_status+0x2fc>)
 8007344:	f7fd fd94 	bl	8004e70 <printString>
 8007348:	e754      	b.n	80071f4 <report_realtime_status+0xe8>
  switch (sys.state) {
 800734a:	2b10      	cmp	r3, #16
 800734c:	f47f af52 	bne.w	80071f4 <report_realtime_status+0xe8>
    if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8007350:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f2c0 808f 	blt.w	8007478 <report_realtime_status+0x36c>
      printPgmString(PSTR("Hold:"));
 800735a:	482c      	ldr	r0, [pc, #176]	; (800740c <report_realtime_status+0x300>)
 800735c:	f7fd fd88 	bl	8004e70 <printString>
      if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 8007360:	78ab      	ldrb	r3, [r5, #2]
 8007362:	07d8      	lsls	r0, r3, #31
 8007364:	d5e9      	bpl.n	800733a <report_realtime_status+0x22e>
 8007366:	2030      	movs	r0, #48	; 0x30
 8007368:	f000 f8de 	bl	8007528 <serial_write>
 800736c:	e742      	b.n	80071f4 <report_realtime_status+0xe8>
    if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 800736e:	782a      	ldrb	r2, [r5, #0]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 8007370:	7b2b      	ldrb	r3, [r5, #12]
    else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT - 1); }
 8007372:	f012 0f7c 	tst.w	r2, #124	; 0x7c
 8007376:	bf14      	ite	ne
 8007378:	221d      	movne	r2, #29
 800737a:	2209      	moveq	r2, #9
 800737c:	736a      	strb	r2, [r5, #13]
    if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 800737e:	b90b      	cbnz	r3, 8007384 <report_realtime_status+0x278>
 8007380:	2301      	movs	r3, #1
 8007382:	732b      	strb	r3, [r5, #12]
    printPgmString(PSTR("|WCO:"));
 8007384:	4822      	ldr	r0, [pc, #136]	; (8007410 <report_realtime_status+0x304>)
    printFloat_CoordValue(axis_value[idx]);
 8007386:	ac10      	add	r4, sp, #64	; 0x40
    printPgmString(PSTR("|WCO:"));
 8007388:	f7fd fd72 	bl	8004e70 <printString>
    printFloat_CoordValue(axis_value[idx]);
 800738c:	f854 0d14 	ldr.w	r0, [r4, #-20]!
 8007390:	f7fd fe2e 	bl	8004ff0 <printFloat_CoordValue>
 8007394:	ae0f      	add	r6, sp, #60	; 0x3c
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8007396:	202c      	movs	r0, #44	; 0x2c
 8007398:	f000 f8c6 	bl	8007528 <serial_write>
    printFloat_CoordValue(axis_value[idx]);
 800739c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80073a0:	f7fd fe26 	bl	8004ff0 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 80073a4:	42b4      	cmp	r4, r6
 80073a6:	d1f6      	bne.n	8007396 <report_realtime_status+0x28a>
    if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 80073a8:	7b2b      	ldrb	r3, [r5, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d083      	beq.n	80072b6 <report_realtime_status+0x1aa>
 80073ae:	3b01      	subs	r3, #1
 80073b0:	732b      	strb	r3, [r5, #12]
 80073b2:	e7ae      	b.n	8007312 <report_realtime_status+0x206>
    printPgmString(PSTR("|Bf:"));
 80073b4:	4817      	ldr	r0, [pc, #92]	; (8007414 <report_realtime_status+0x308>)
 80073b6:	f7fd fd5b 	bl	8004e70 <printString>
    print_uint8_base10(plan_get_block_buffer_available());
 80073ba:	f7fd fd37 	bl	8004e2c <plan_get_block_buffer_available>
 80073be:	f7fd fd63 	bl	8004e88 <print_uint8_base10>
    serial_write(',');
 80073c2:	202c      	movs	r0, #44	; 0x2c
 80073c4:	f000 f8b0 	bl	8007528 <serial_write>
    print_uint8_base10(serial_get_rx_buffer_available());
 80073c8:	f000 f89a 	bl	8007500 <serial_get_rx_buffer_available>
 80073cc:	f7fd fd5c 	bl	8004e88 <print_uint8_base10>
 80073d0:	e74b      	b.n	800726a <report_realtime_status+0x15e>
 80073d2:	bf00      	nop
 80073d4:	200011b4 	.word	0x200011b4
 80073d8:	20001188 	.word	0x20001188
 80073dc:	2000134c 	.word	0x2000134c
 80073e0:	0800c270 	.word	0x0800c270
 80073e4:	200010d4 	.word	0x200010d4
 80073e8:	0800c2ac 	.word	0x0800c2ac
 80073ec:	0800c250 	.word	0x0800c250
 80073f0:	0800c278 	.word	0x0800c278
 80073f4:	0800c288 	.word	0x0800c288
 80073f8:	0800c2a0 	.word	0x0800c2a0
 80073fc:	0800c2a8 	.word	0x0800c2a8
 8007400:	0800c2c8 	.word	0x0800c2c8
 8007404:	0800c268 	.word	0x0800c268
 8007408:	0800c260 	.word	0x0800c260
 800740c:	0800c244 	.word	0x0800c244
 8007410:	0800c298 	.word	0x0800c298
 8007414:	0800c280 	.word	0x0800c280
    printPgmString(PSTR("|Pn:"));
 8007418:	4833      	ldr	r0, [pc, #204]	; (80074e8 <report_realtime_status+0x3dc>)
 800741a:	f7fd fd29 	bl	8004e70 <printString>
    if (prb_pin_state) { serial_write('P'); }
 800741e:	b9c7      	cbnz	r7, 8007452 <report_realtime_status+0x346>
    if (lim_pin_state) {
 8007420:	b14c      	cbz	r4, 8007436 <report_realtime_status+0x32a>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 8007422:	07e0      	lsls	r0, r4, #31
 8007424:	d454      	bmi.n	80074d0 <report_realtime_status+0x3c4>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 8007426:	07a1      	lsls	r1, r4, #30
 8007428:	d44e      	bmi.n	80074c8 <report_realtime_status+0x3bc>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 800742a:	0762      	lsls	r2, r4, #29
 800742c:	d448      	bmi.n	80074c0 <report_realtime_status+0x3b4>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 800742e:	0723      	lsls	r3, r4, #28
 8007430:	d442      	bmi.n	80074b8 <report_realtime_status+0x3ac>
	  if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
 8007432:	06e7      	lsls	r7, r4, #27
 8007434:	d434      	bmi.n	80074a0 <report_realtime_status+0x394>
    if (ctrl_pin_state) {
 8007436:	2e00      	cmp	r6, #0
 8007438:	f43f af35 	beq.w	80072a6 <report_realtime_status+0x19a>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 800743c:	07f4      	lsls	r4, r6, #31
 800743e:	d437      	bmi.n	80074b0 <report_realtime_status+0x3a4>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 8007440:	07b0      	lsls	r0, r6, #30
 8007442:	d431      	bmi.n	80074a8 <report_realtime_status+0x39c>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 8007444:	0771      	lsls	r1, r6, #29
 8007446:	f57f af2e 	bpl.w	80072a6 <report_realtime_status+0x19a>
 800744a:	2053      	movs	r0, #83	; 0x53
 800744c:	f000 f86c 	bl	8007528 <serial_write>
 8007450:	e729      	b.n	80072a6 <report_realtime_status+0x19a>
    if (prb_pin_state) { serial_write('P'); }
 8007452:	2050      	movs	r0, #80	; 0x50
 8007454:	f000 f868 	bl	8007528 <serial_write>
 8007458:	e7e2      	b.n	8007420 <report_realtime_status+0x314>
        printPgmString(PSTR("|A:"));
 800745a:	4824      	ldr	r0, [pc, #144]	; (80074ec <report_realtime_status+0x3e0>)
 800745c:	f7fd fd08 	bl	8004e70 <printString>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007460:	2d01      	cmp	r5, #1
 8007462:	d019      	beq.n	8007498 <report_realtime_status+0x38c>
              else { serial_write('C'); } // CCW
 8007464:	2043      	movs	r0, #67	; 0x43
 8007466:	f000 f85f 	bl	8007528 <serial_write>
        if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 800746a:	07e2      	lsls	r2, r4, #31
 800746c:	f57f af4c 	bpl.w	8007308 <report_realtime_status+0x1fc>
 8007470:	2046      	movs	r0, #70	; 0x46
 8007472:	f000 f859 	bl	8007528 <serial_write>
 8007476:	e747      	b.n	8007308 <report_realtime_status+0x1fc>
  case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8007478:	481d      	ldr	r0, [pc, #116]	; (80074f0 <report_realtime_status+0x3e4>)
 800747a:	f7fd fcf9 	bl	8004e70 <printString>
 800747e:	e6b9      	b.n	80071f4 <report_realtime_status+0xe8>
  case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8007480:	481c      	ldr	r0, [pc, #112]	; (80074f4 <report_realtime_status+0x3e8>)
 8007482:	f7fd fcf5 	bl	8004e70 <printString>
 8007486:	e6b5      	b.n	80071f4 <report_realtime_status+0xe8>
  case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 8007488:	481b      	ldr	r0, [pc, #108]	; (80074f8 <report_realtime_status+0x3ec>)
 800748a:	f7fd fcf1 	bl	8004e70 <printString>
 800748e:	e6b1      	b.n	80071f4 <report_realtime_status+0xe8>
  case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 8007490:	481a      	ldr	r0, [pc, #104]	; (80074fc <report_realtime_status+0x3f0>)
 8007492:	f7fd fced 	bl	8004e70 <printString>
 8007496:	e6ad      	b.n	80071f4 <report_realtime_status+0xe8>
              if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
 8007498:	2053      	movs	r0, #83	; 0x53
 800749a:	f000 f845 	bl	8007528 <serial_write>
 800749e:	e730      	b.n	8007302 <report_realtime_status+0x1f6>
	  if (bit_istrue(lim_pin_state, bit(B_AXIS))) { serial_write('B'); }
 80074a0:	2042      	movs	r0, #66	; 0x42
 80074a2:	f000 f841 	bl	8007528 <serial_write>
 80074a6:	e7c6      	b.n	8007436 <report_realtime_status+0x32a>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80074a8:	2048      	movs	r0, #72	; 0x48
 80074aa:	f000 f83d 	bl	8007528 <serial_write>
 80074ae:	e7c9      	b.n	8007444 <report_realtime_status+0x338>
      if (bit_istrue(ctrl_pin_state, CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80074b0:	2052      	movs	r0, #82	; 0x52
 80074b2:	f000 f839 	bl	8007528 <serial_write>
 80074b6:	e7c3      	b.n	8007440 <report_realtime_status+0x334>
	  if (bit_istrue(lim_pin_state, bit(A_AXIS))) { serial_write('A'); }
 80074b8:	2041      	movs	r0, #65	; 0x41
 80074ba:	f000 f835 	bl	8007528 <serial_write>
 80074be:	e7b8      	b.n	8007432 <report_realtime_status+0x326>
      if (bit_istrue(lim_pin_state, bit(Z_AXIS))) { serial_write('Z'); }
 80074c0:	205a      	movs	r0, #90	; 0x5a
 80074c2:	f000 f831 	bl	8007528 <serial_write>
 80074c6:	e7b2      	b.n	800742e <report_realtime_status+0x322>
      if (bit_istrue(lim_pin_state, bit(Y_AXIS))) { serial_write('Y'); }
 80074c8:	2059      	movs	r0, #89	; 0x59
 80074ca:	f000 f82d 	bl	8007528 <serial_write>
 80074ce:	e7ac      	b.n	800742a <report_realtime_status+0x31e>
      if (bit_istrue(lim_pin_state, bit(X_AXIS))) { serial_write('X'); }
 80074d0:	2058      	movs	r0, #88	; 0x58
 80074d2:	f000 f829 	bl	8007528 <serial_write>
 80074d6:	e7a6      	b.n	8007426 <report_realtime_status+0x31a>
      serial_write('3'); // Restoring
 80074d8:	2033      	movs	r0, #51	; 0x33
 80074da:	f000 f825 	bl	8007528 <serial_write>
 80074de:	e689      	b.n	80071f4 <report_realtime_status+0xe8>
        serial_write('2'); // Retracting
 80074e0:	2032      	movs	r0, #50	; 0x32
 80074e2:	f000 f821 	bl	8007528 <serial_write>
 80074e6:	e685      	b.n	80071f4 <report_realtime_status+0xe8>
 80074e8:	0800c290 	.word	0x0800c290
 80074ec:	0800c2a8 	.word	0x0800c2a8
 80074f0:	0800c24c 	.word	0x0800c24c
 80074f4:	0800c238 	.word	0x0800c238
 80074f8:	0800c258 	.word	0x0800c258
 80074fc:	0800c240 	.word	0x0800c240

08007500 <serial_get_rx_buffer_available>:


// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <serial_get_rx_buffer_available+0x1c>)
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007502:	4a07      	ldr	r2, [pc, #28]	; (8007520 <serial_get_rx_buffer_available+0x20>)
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007504:	781b      	ldrb	r3, [r3, #0]
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 8007506:	7812      	ldrb	r2, [r2, #0]
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8007508:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800750a:	4293      	cmp	r3, r2
 800750c:	bf94      	ite	ls
 800750e:	1e98      	subls	r0, r3, #2
  return((rtail-serial_rx_buffer_head-1));
 8007510:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
 8007514:	1a80      	subs	r0, r0, r2
 8007516:	b2c0      	uxtb	r0, r0
}
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000aeb 	.word	0x20000aeb
 8007520:	20000aea 	.word	0x20000aea

08007524 <serial_init>:
}

//*****************************************************************************************************************

void serial_init()
{
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop

08007528 <serial_write>:
void serial_write(uint8_t data) {
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
  #ifdef STM32F103C8
	#ifndef USEUSB
	USART_SendData(USART1, data);
 8007528:	4601      	mov	r1, r0
void serial_write(uint8_t data) {
 800752a:	b508      	push	{r3, lr}
	USART_SendData(USART1, data);
 800752c:	4803      	ldr	r0, [pc, #12]	; (800753c <serial_write+0x14>)
 800752e:	f7fa fb39 	bl	8001ba4 <USART_SendData>
	while (!(USART1->SR & USART_FLAG_TXE));
 8007532:	4a02      	ldr	r2, [pc, #8]	; (800753c <serial_write+0x14>)
 8007534:	8813      	ldrh	r3, [r2, #0]
 8007536:	061b      	lsls	r3, r3, #24
 8007538:	d5fc      	bpl.n	8007534 <serial_write+0xc>
  }
#endif
  serial_tx_buffer_head = next_head;


}
 800753a:	bd08      	pop	{r3, pc}
 800753c:	40013800 	.word	0x40013800

08007540 <serial_read>:


// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007540:	4908      	ldr	r1, [pc, #32]	; (8007564 <serial_read+0x24>)
  if (serial_rx_buffer_head == tail) {
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <serial_read+0x28>)
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007544:	780b      	ldrb	r3, [r1, #0]
  if (serial_rx_buffer_head == tail) {
 8007546:	7812      	ldrb	r2, [r2, #0]
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8007548:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 800754a:	429a      	cmp	r2, r3
 800754c:	d008      	beq.n	8007560 <serial_read+0x20>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];

    tail++;
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	b2d2      	uxtb	r2, r2
    if (tail == RX_RING_BUFFER) { tail = 0; }
 8007552:	2afe      	cmp	r2, #254	; 0xfe
 8007554:	bf08      	it	eq
 8007556:	2200      	moveq	r2, #0
    uint8_t data = serial_rx_buffer[tail];
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <serial_read+0x2c>)
    serial_rx_buffer_tail = tail;
 800755a:	700a      	strb	r2, [r1, #0]
    uint8_t data = serial_rx_buffer[tail];
 800755c:	5cc0      	ldrb	r0, [r0, r3]

    return data;
 800755e:	4770      	bx	lr
    return SERIAL_NO_DATA;
 8007560:	20ff      	movs	r0, #255	; 0xff
  }
}
 8007562:	4770      	bx	lr
 8007564:	20000aeb 	.word	0x20000aeb
 8007568:	20000aea 	.word	0x20000aea
 800756c:	2000124c 	.word	0x2000124c

08007570 <USART1_IRQHandler>:
/*----------------------------------------------------------------------------
  USART1_IRQHandler
  Handles USART1 global interrupt request.
 *----------------------------------------------------------------------------*/
void USART1_IRQHandler (void) 
{
 8007570:	b510      	push	{r4, lr}
    volatile unsigned int IIR;
    uint8_t data;
    uint8_t next_head;

    IIR = USART1->SR;
 8007572:	4a66      	ldr	r2, [pc, #408]	; (800770c <USART1_IRQHandler+0x19c>)
{
 8007574:	b082      	sub	sp, #8
    IIR = USART1->SR;
 8007576:	8813      	ldrh	r3, [r2, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	9301      	str	r3, [sp, #4]
    if (IIR & USART_FLAG_RXNE) 
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	0698      	lsls	r0, r3, #26
 8007580:	d513      	bpl.n	80075aa <USART1_IRQHandler+0x3a>
    {                  // read interrupt
        data = USART1->DR & 0x1FF;
 8007582:	8893      	ldrh	r3, [r2, #4]
 8007584:	b29b      	uxth	r3, r3
 8007586:	b2da      	uxtb	r2, r3
#endif
#endif
  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
  switch (data) {
 8007588:	2a21      	cmp	r2, #33	; 0x21
 800758a:	d014      	beq.n	80075b6 <USART1_IRQHandler+0x46>
 800758c:	d917      	bls.n	80075be <USART1_IRQHandler+0x4e>
 800758e:	2a3f      	cmp	r2, #63	; 0x3f
 8007590:	d00d      	beq.n	80075ae <USART1_IRQHandler+0x3e>
 8007592:	2a7e      	cmp	r2, #126	; 0x7e
 8007594:	d118      	bne.n	80075c8 <USART1_IRQHandler+0x58>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 8007596:	2002      	movs	r0, #2
 8007598:	f002 fa96 	bl	8009ac8 <system_set_exec_state_flag>
#ifdef WIN32
    }
#endif
#ifdef STM32F103C8
#ifndef USEUSB
        USART1->SR &= ~USART_FLAG_RXNE;	          // clear interrupt
 800759c:	4a5b      	ldr	r2, [pc, #364]	; (800770c <USART1_IRQHandler+0x19c>)
 800759e:	8813      	ldrh	r3, [r2, #0]
 80075a0:	f023 0320 	bic.w	r3, r3, #32
 80075a4:	041b      	lsls	r3, r3, #16
 80075a6:	0c1b      	lsrs	r3, r3, #16
 80075a8:	8013      	strh	r3, [r2, #0]
#else
    length--;
#endif
   }
#endif
}
 80075aa:	b002      	add	sp, #8
 80075ac:	bd10      	pop	{r4, pc}
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80075ae:	2001      	movs	r0, #1
 80075b0:	f002 fa8a 	bl	8009ac8 <system_set_exec_state_flag>
 80075b4:	e7f2      	b.n	800759c <USART1_IRQHandler+0x2c>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 80075b6:	2008      	movs	r0, #8
 80075b8:	f002 fa86 	bl	8009ac8 <system_set_exec_state_flag>
 80075bc:	e7ee      	b.n	800759c <USART1_IRQHandler+0x2c>
  switch (data) {
 80075be:	2a18      	cmp	r2, #24
 80075c0:	d102      	bne.n	80075c8 <USART1_IRQHandler+0x58>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 80075c2:	f7fc fd65 	bl	8004090 <mc_reset>
 80075c6:	e7e9      	b.n	800759c <USART1_IRQHandler+0x2c>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 80075c8:	0619      	lsls	r1, r3, #24
 80075ca:	d40e      	bmi.n	80075ea <USART1_IRQHandler+0x7a>
        next_head = serial_rx_buffer_head + 1;
 80075cc:	4850      	ldr	r0, [pc, #320]	; (8007710 <USART1_IRQHandler+0x1a0>)
        if (next_head != serial_rx_buffer_tail) {
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <USART1_IRQHandler+0x1a4>)
        next_head = serial_rx_buffer_head + 1;
 80075d0:	7801      	ldrb	r1, [r0, #0]
        if (next_head != serial_rx_buffer_tail) {
 80075d2:	781c      	ldrb	r4, [r3, #0]
        next_head = serial_rx_buffer_head + 1;
 80075d4:	1c4b      	adds	r3, r1, #1
 80075d6:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 80075d8:	2bfe      	cmp	r3, #254	; 0xfe
 80075da:	bf08      	it	eq
 80075dc:	2300      	moveq	r3, #0
        if (next_head != serial_rx_buffer_tail) {
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d0dc      	beq.n	800759c <USART1_IRQHandler+0x2c>
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80075e2:	4c4d      	ldr	r4, [pc, #308]	; (8007718 <USART1_IRQHandler+0x1a8>)
          serial_rx_buffer_head = next_head;
 80075e4:	7003      	strb	r3, [r0, #0]
          serial_rx_buffer[serial_rx_buffer_head] = data;
 80075e6:	5462      	strb	r2, [r4, r1]
 80075e8:	e7d8      	b.n	800759c <USART1_IRQHandler+0x2c>
        switch(data) {
 80075ea:	3a84      	subs	r2, #132	; 0x84
 80075ec:	2a1d      	cmp	r2, #29
 80075ee:	d8d5      	bhi.n	800759c <USART1_IRQHandler+0x2c>
 80075f0:	a301      	add	r3, pc, #4	; (adr r3, 80075f8 <USART1_IRQHandler+0x88>)
 80075f2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	08007703 	.word	0x08007703
 80075fc:	080076f1 	.word	0x080076f1
 8007600:	0800759d 	.word	0x0800759d
 8007604:	0800759d 	.word	0x0800759d
 8007608:	0800759d 	.word	0x0800759d
 800760c:	0800759d 	.word	0x0800759d
 8007610:	0800759d 	.word	0x0800759d
 8007614:	0800759d 	.word	0x0800759d
 8007618:	0800759d 	.word	0x0800759d
 800761c:	0800759d 	.word	0x0800759d
 8007620:	0800759d 	.word	0x0800759d
 8007624:	0800759d 	.word	0x0800759d
 8007628:	080076e9 	.word	0x080076e9
 800762c:	080076e1 	.word	0x080076e1
 8007630:	080076d9 	.word	0x080076d9
 8007634:	080076d1 	.word	0x080076d1
 8007638:	080076c9 	.word	0x080076c9
 800763c:	080076c1 	.word	0x080076c1
 8007640:	080076b9 	.word	0x080076b9
 8007644:	080076b1 	.word	0x080076b1
 8007648:	0800759d 	.word	0x0800759d
 800764c:	080076a9 	.word	0x080076a9
 8007650:	080076a1 	.word	0x080076a1
 8007654:	08007699 	.word	0x08007699
 8007658:	08007691 	.word	0x08007691
 800765c:	08007689 	.word	0x08007689
 8007660:	08007681 	.word	0x08007681
 8007664:	0800759d 	.word	0x0800759d
 8007668:	08007679 	.word	0x08007679
 800766c:	08007671 	.word	0x08007671
            case CMD_COOLANT_MIST_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_MIST_OVR_TOGGLE); break;
 8007670:	2080      	movs	r0, #128	; 0x80
 8007672:	f002 fa57 	bl	8009b24 <system_set_exec_accessory_override_flag>
 8007676:	e791      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8007678:	2040      	movs	r0, #64	; 0x40
 800767a:	f002 fa53 	bl	8009b24 <system_set_exec_accessory_override_flag>
 800767e:	e78d      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8007680:	2020      	movs	r0, #32
 8007682:	f002 fa4f 	bl	8009b24 <system_set_exec_accessory_override_flag>
 8007686:	e789      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8007688:	2010      	movs	r0, #16
 800768a:	f002 fa4b 	bl	8009b24 <system_set_exec_accessory_override_flag>
 800768e:	e785      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8007690:	2008      	movs	r0, #8
 8007692:	f002 fa47 	bl	8009b24 <system_set_exec_accessory_override_flag>
 8007696:	e781      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8007698:	2004      	movs	r0, #4
 800769a:	f002 fa43 	bl	8009b24 <system_set_exec_accessory_override_flag>
 800769e:	e77d      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 80076a0:	2002      	movs	r0, #2
 80076a2:	f002 fa3f 	bl	8009b24 <system_set_exec_accessory_override_flag>
 80076a6:	e779      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 80076a8:	2001      	movs	r0, #1
 80076aa:	f002 fa3b 	bl	8009b24 <system_set_exec_accessory_override_flag>
 80076ae:	e775      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80076b0:	2080      	movs	r0, #128	; 0x80
 80076b2:	f002 fa2d 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076b6:	e771      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80076b8:	2040      	movs	r0, #64	; 0x40
 80076ba:	f002 fa29 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076be:	e76d      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80076c0:	2020      	movs	r0, #32
 80076c2:	f002 fa25 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076c6:	e769      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80076c8:	2010      	movs	r0, #16
 80076ca:	f002 fa21 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076ce:	e765      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80076d0:	2008      	movs	r0, #8
 80076d2:	f002 fa1d 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076d6:	e761      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 80076d8:	2004      	movs	r0, #4
 80076da:	f002 fa19 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076de:	e75d      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80076e0:	2002      	movs	r0, #2
 80076e2:	f002 fa15 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076e6:	e759      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80076e8:	2001      	movs	r0, #1
 80076ea:	f002 fa11 	bl	8009b10 <system_set_exec_motion_override_flag>
 80076ee:	e755      	b.n	800759c <USART1_IRQHandler+0x2c>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <USART1_IRQHandler+0x1ac>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	069b      	lsls	r3, r3, #26
 80076f6:	f57f af51 	bpl.w	800759c <USART1_IRQHandler+0x2c>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 80076fa:	2040      	movs	r0, #64	; 0x40
 80076fc:	f002 f9e4 	bl	8009ac8 <system_set_exec_state_flag>
 8007700:	e74c      	b.n	800759c <USART1_IRQHandler+0x2c>
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 8007702:	2020      	movs	r0, #32
 8007704:	f002 f9e0 	bl	8009ac8 <system_set_exec_state_flag>
 8007708:	e748      	b.n	800759c <USART1_IRQHandler+0x2c>
 800770a:	bf00      	nop
 800770c:	40013800 	.word	0x40013800
 8007710:	20000aea 	.word	0x20000aea
 8007714:	20000aeb 	.word	0x20000aeb
 8007718:	2000124c 	.word	0x2000124c
 800771c:	20001188 	.word	0x20001188

08007720 <serial_reset_read_buffer>:

void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8007720:	4a02      	ldr	r2, [pc, #8]	; (800772c <serial_reset_read_buffer+0xc>)
 8007722:	4b03      	ldr	r3, [pc, #12]	; (8007730 <serial_reset_read_buffer+0x10>)
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000aea 	.word	0x20000aea
 8007730:	20000aeb 	.word	0x20000aeb

08007734 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4605      	mov	r5, r0
 8007738:	460c      	mov	r4, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800773a:	f7fe fd73 	bl	8006224 <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800773e:	235b      	movs	r3, #91	; 0x5b
 8007740:	fb03 f005 	mul.w	r0, r3, r5
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8007744:	4621      	mov	r1, r4
}
 8007746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 800774a:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800774e:	225a      	movs	r2, #90	; 0x5a
 8007750:	f7fa baf6 	b.w	8001d40 <memcpy_to_eeprom_with_checksum>

08007754 <settings_store_build_info>:
// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007754:	4601      	mov	r1, r0
 8007756:	225a      	movs	r2, #90	; 0x5a
 8007758:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 800775c:	f7fa baf0 	b.w	8001d40 <memcpy_to_eeprom_with_checksum>

08007760 <settings_write_coord_data>:
}


// Method to store coord data parameters into EEPROM
void settings_write_coord_data(uint8_t coord_select, float *coord_data)
{
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4604      	mov	r4, r0
 8007764:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
  #endif
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 8007766:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800776a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    protocol_buffer_synchronize();
 800776e:	f7fe fd59 	bl	8006224 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007772:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8007776:	4629      	mov	r1, r5
}
 8007778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800777c:	2214      	movs	r2, #20
 800777e:	f7fa badf 	b.w	8001d40 <memcpy_to_eeprom_with_checksum>
 8007782:	bf00      	nop

08007784 <settings_restore>:
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
}


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 8007784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007786:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 8007788:	07c0      	lsls	r0, r0, #31
void settings_restore(uint8_t restore_flag) {
 800778a:	b087      	sub	sp, #28
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 800778c:	d43a      	bmi.n	8007804 <settings_restore+0x80>
	#endif
// ---
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 800778e:	07a9      	lsls	r1, r5, #30
 8007790:	d424      	bmi.n	80077dc <settings_restore+0x58>
    float coord_data[N_AXIS];
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 8007792:	076a      	lsls	r2, r5, #29
 8007794:	d40d      	bmi.n	80077b2 <settings_restore+0x2e>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 8007796:	072b      	lsls	r3, r5, #28
 8007798:	d509      	bpl.n	80077ae <settings_restore+0x2a>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 800779a:	2100      	movs	r1, #0
 800779c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 80077a0:	f7fa fac8 	bl	8001d34 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 80077a4:	2100      	movs	r1, #0
 80077a6:	f240 30c1 	movw	r0, #961	; 0x3c1
 80077aa:	f7fa fac3 	bl	8001d34 <eeprom_put_char>
  }
}
 80077ae:	b007      	add	sp, #28
 80077b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 80077b2:	2100      	movs	r1, #0
 80077b4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80077b8:	f7fa fabc 	bl	8001d34 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 80077bc:	2100      	movs	r1, #0
 80077be:	f240 3001 	movw	r0, #769	; 0x301
 80077c2:	f7fa fab7 	bl	8001d34 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 80077c6:	2100      	movs	r1, #0
 80077c8:	f240 305b 	movw	r0, #859	; 0x35b
 80077cc:	f7fa fab2 	bl	8001d34 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 80077d0:	2100      	movs	r1, #0
 80077d2:	f44f 7057 	mov.w	r0, #860	; 0x35c
 80077d6:	f7fa faad 	bl	8001d34 <eeprom_put_char>
 80077da:	e7dc      	b.n	8007796 <settings_restore+0x12>
    memset(&coord_data, 0, sizeof(coord_data));
 80077dc:	2300      	movs	r3, #0
 80077de:	f44f 7400 	mov.w	r4, #512	; 0x200
 80077e2:	9301      	str	r3, [sp, #4]
 80077e4:	9302      	str	r3, [sp, #8]
 80077e6:	9303      	str	r3, [sp, #12]
 80077e8:	9304      	str	r3, [sp, #16]
 80077ea:	9305      	str	r3, [sp, #20]
    protocol_buffer_synchronize();
 80077ec:	f7fe fd1a 	bl	8006224 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 80077f0:	4620      	mov	r0, r4
 80077f2:	2214      	movs	r2, #20
 80077f4:	a901      	add	r1, sp, #4
 80077f6:	3415      	adds	r4, #21
 80077f8:	f7fa faa2 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 80077fc:	f5b4 7f2a 	cmp.w	r4, #680	; 0x2a8
 8007800:	d1f4      	bne.n	80077ec <settings_restore+0x68>
 8007802:	e7c6      	b.n	8007792 <settings_restore+0xe>
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007804:	f44f 16f8 	mov.w	r6, #2031616	; 0x1f0000
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007808:	231f      	movs	r3, #31
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800780a:	4c22      	ldr	r4, [pc, #136]	; (8007894 <settings_restore+0x110>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 800780c:	22fa      	movs	r2, #250	; 0xfa
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 800780e:	f8c4 6052 	str.w	r6, [r4, #82]	; 0x52
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007812:	4e21      	ldr	r6, [pc, #132]	; (8007898 <settings_restore+0x114>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007814:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007818:	65e6      	str	r6, [r4, #92]	; 0x5c
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 800781a:	2600      	movs	r6, #0
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 800781c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007820:	2144      	movs	r1, #68	; 0x44
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007822:	2000      	movs	r0, #0
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007824:	f04f 0e06 	mov.w	lr, #6
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007828:	4f1c      	ldr	r7, [pc, #112]	; (800789c <settings_restore+0x118>)
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 800782a:	6666      	str	r6, [r4, #100]	; 0x64
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 800782c:	65a7      	str	r7, [r4, #88]	; 0x58
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 800782e:	4f1c      	ldr	r7, [pc, #112]	; (80078a0 <settings_restore+0x11c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007830:	4e1c      	ldr	r6, [pc, #112]	; (80078a4 <settings_restore+0x120>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007832:	6627      	str	r7, [r4, #96]	; 0x60
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007834:	4f1c      	ldr	r7, [pc, #112]	; (80078a8 <settings_restore+0x124>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007836:	6726      	str	r6, [r4, #112]	; 0x70
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007838:	66e7      	str	r7, [r4, #108]	; 0x6c
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 800783a:	4e1c      	ldr	r6, [pc, #112]	; (80078ac <settings_restore+0x128>)
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800783c:	4f1c      	ldr	r7, [pc, #112]	; (80078b0 <settings_restore+0x12c>)
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 800783e:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007842:	67a3      	str	r3, [r4, #120]	; 0x78
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007844:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <settings_restore+0x130>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007846:	4b1c      	ldr	r3, [pc, #112]	; (80078b8 <settings_restore+0x134>)
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007848:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  eeprom_put_char(0, SETTINGS_VERSION);
 800784c:	210a      	movs	r1, #10
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 800784e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007852:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007856:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007858:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 800785a:	6322      	str	r2, [r4, #48]	; 0x30
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 800785c:	6362      	str	r2, [r4, #52]	; 0x34
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 800785e:	f884 e050 	strb.w	lr, [r4, #80]	; 0x50
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007862:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007864:	6423      	str	r3, [r4, #64]	; 0x40
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007866:	6463      	str	r3, [r4, #68]	; 0x44
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007868:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800786a:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 800786c:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 800786e:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007870:	60e7      	str	r7, [r4, #12]
    settings.steps_per_mm[B_AXIS] = DEFAULT_B_STEPS_PER_MM;
 8007872:	6127      	str	r7, [r4, #16]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007874:	6166      	str	r6, [r4, #20]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007876:	61a6      	str	r6, [r4, #24]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007878:	61e6      	str	r6, [r4, #28]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 800787a:	6226      	str	r6, [r4, #32]
    settings.max_rate[B_AXIS] = DEFAULT_B_MAX_RATE;
 800787c:	6266      	str	r6, [r4, #36]	; 0x24
    settings.acceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
 800787e:	63a2      	str	r2, [r4, #56]	; 0x38
    settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
 8007880:	64e3      	str	r3, [r4, #76]	; 0x4c
  eeprom_put_char(0, SETTINGS_VERSION);
 8007882:	f7fa fa57 	bl	8001d34 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007886:	4621      	mov	r1, r4
 8007888:	227c      	movs	r2, #124	; 0x7c
 800788a:	2001      	movs	r0, #1
 800788c:	f7fa fa58 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
 8007890:	e77d      	b.n	800778e <settings_restore+0xa>
 8007892:	bf00      	nop
 8007894:	2000134c 	.word	0x2000134c
 8007898:	3b03126f 	.word	0x3b03126f
 800789c:	3c23d70a 	.word	0x3c23d70a
 80078a0:	447a0000 	.word	0x447a0000
 80078a4:	42c80000 	.word	0x42c80000
 80078a8:	41200000 	.word	0x41200000
 80078ac:	44fa0000 	.word	0x44fa0000
 80078b0:	45a00000 	.word	0x45a00000
 80078b4:	4bdbba00 	.word	0x4bdbba00
 80078b8:	c38c0000 	.word	0xc38c0000

080078bc <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 80078bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80078be:	245b      	movs	r4, #91	; 0x5b
{
 80078c0:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 80078c2:	fb04 f400 	mul.w	r4, r4, r0
 80078c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 80078ca:	4621      	mov	r1, r4
 80078cc:	4630      	mov	r0, r6
 80078ce:	225a      	movs	r2, #90	; 0x5a
 80078d0:	f7fa fa88 	bl	8001de4 <memcpy_from_eeprom_with_checksum>
 80078d4:	b108      	cbz	r0, 80078da <settings_read_startup_line+0x1e>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 80078d6:	2001      	movs	r0, #1
}
 80078d8:	bd70      	pop	{r4, r5, r6, pc}
 80078da:	4605      	mov	r5, r0
    line[0] = 0; // Empty line
 80078dc:	7030      	strb	r0, [r6, #0]
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 80078de:	f7fe fca1 	bl	8006224 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 80078e2:	4620      	mov	r0, r4
 80078e4:	4631      	mov	r1, r6
 80078e6:	225a      	movs	r2, #90	; 0x5a
 80078e8:	f7fa fa2a 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    return(false);
 80078ec:	4628      	mov	r0, r5
 80078ee:	bd70      	pop	{r4, r5, r6, pc}

080078f0 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 80078f0:	b538      	push	{r3, r4, r5, lr}
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80078f2:	225a      	movs	r2, #90	; 0x5a
 80078f4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
{
 80078f8:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 80078fa:	f7fa fa73 	bl	8001de4 <memcpy_from_eeprom_with_checksum>
 80078fe:	b108      	cbz	r0, 8007904 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8007900:	2001      	movs	r0, #1
}
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	4604      	mov	r4, r0
    line[0] = 0; // Empty line
 8007906:	7028      	strb	r0, [r5, #0]
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8007908:	4629      	mov	r1, r5
 800790a:	225a      	movs	r2, #90	; 0x5a
 800790c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007910:	f7fa fa16 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    return(false);
 8007914:	4620      	mov	r0, r4
 8007916:	bd38      	pop	{r3, r4, r5, pc}

08007918 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
uint8_t settings_read_coord_data(uint8_t coord_select, float *coord_data)
{
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	460e      	mov	r6, r1
  uint32_t addr = coord_select*(sizeof(float)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 800791c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007920:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007924:	f500 7400 	add.w	r4, r0, #512	; 0x200
  if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(float)*N_AXIS))) {
 8007928:	4621      	mov	r1, r4
 800792a:	4630      	mov	r0, r6
 800792c:	2214      	movs	r2, #20
 800792e:	f7fa fa59 	bl	8001de4 <memcpy_from_eeprom_with_checksum>
 8007932:	b108      	cbz	r0, 8007938 <settings_read_coord_data+0x20>
		#endif
// ---
		settings_write_coord_data(coord_select,coord_data);
    return(false);
  }
  return(true);
 8007934:	2001      	movs	r0, #1
}
 8007936:	bd70      	pop	{r4, r5, r6, pc}
		coord_data[X_AXIS] = 0.0f;
 8007938:	2300      	movs	r3, #0
 800793a:	4605      	mov	r5, r0
 800793c:	6033      	str	r3, [r6, #0]
		coord_data[Y_AXIS] = 0.0f;
 800793e:	6073      	str	r3, [r6, #4]
		coord_data[Z_AXIS] = 0.0f;
 8007940:	60b3      	str	r3, [r6, #8]
		coord_data[A_AXIS] = 0.0f;
 8007942:	60f3      	str	r3, [r6, #12]
		coord_data[B_AXIS] = 0.0f;
 8007944:	6133      	str	r3, [r6, #16]
    protocol_buffer_synchronize();
 8007946:	f7fe fc6d 	bl	8006224 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 800794a:	4620      	mov	r0, r4
 800794c:	4631      	mov	r1, r6
 800794e:	2214      	movs	r2, #20
 8007950:	f7fa f9f6 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    return(false);
 8007954:	4628      	mov	r0, r5
 8007956:	bd70      	pop	{r4, r5, r6, pc}

08007958 <settings_store_global_setting>:
  return(true);
}


// A helper method to set settings from command line
uint8_t settings_store_global_setting(uint8_t parameter, float value) {
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	460d      	mov	r5, r1
 800795c:	4604      	mov	r4, r0
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 800795e:	2100      	movs	r1, #0
 8007960:	4628      	mov	r0, r5
 8007962:	f7f9 fb43 	bl	8000fec <__aeabi_fcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	d16c      	bne.n	8007a44 <settings_store_global_setting+0xec>
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 800796a:	2c63      	cmp	r4, #99	; 0x63
 800796c:	d91e      	bls.n	80079ac <settings_store_global_setting+0x54>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 800796e:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 8007972:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8007974:	2b04      	cmp	r3, #4
 8007976:	f240 813b 	bls.w	8007bf0 <settings_store_global_setting+0x298>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800797a:	2b09      	cmp	r3, #9
 800797c:	d914      	bls.n	80079a8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800797e:	f1a4 036e 	sub.w	r3, r4, #110	; 0x6e
 8007982:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007984:	2b04      	cmp	r3, #4
 8007986:	f240 8119 	bls.w	8007bbc <settings_store_global_setting+0x264>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800798a:	2b09      	cmp	r3, #9
 800798c:	d90c      	bls.n	80079a8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800798e:	f1a4 0378 	sub.w	r3, r4, #120	; 0x78
 8007992:	b2db      	uxtb	r3, r3
      if (parameter < N_AXIS) {
 8007994:	2b04      	cmp	r3, #4
 8007996:	f240 811a 	bls.w	8007bce <settings_store_global_setting+0x276>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800799a:	2b09      	cmp	r3, #9
 800799c:	d904      	bls.n	80079a8 <settings_store_global_setting+0x50>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800799e:	347e      	adds	r4, #126	; 0x7e
 80079a0:	b2e4      	uxtb	r4, r4
      if (parameter < N_AXIS) {
 80079a2:	2c04      	cmp	r4, #4
 80079a4:	f240 811d 	bls.w	8007be2 <settings_store_global_setting+0x28a>
        #else
				return(STATUS_SETTING_DISABLED_LASER);
        #endif
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
 80079a8:	2003      	movs	r0, #3
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t int_value = truncf(value);
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7f9 fb81 	bl	80010b4 <__aeabi_f2uiz>
 80079b2:	b2c0      	uxtb	r0, r0
    switch(parameter) {
 80079b4:	2c20      	cmp	r4, #32
 80079b6:	d8f7      	bhi.n	80079a8 <settings_store_global_setting+0x50>
 80079b8:	a301      	add	r3, pc, #4	; (adr r3, 80079c0 <settings_store_global_setting+0x68>)
 80079ba:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80079be:	bf00      	nop
 80079c0:	08007a73 	.word	0x08007a73
 80079c4:	08007a7d 	.word	0x08007a7d
 80079c8:	08007aa5 	.word	0x08007aa5
 80079cc:	08007a85 	.word	0x08007a85
 80079d0:	08007a91 	.word	0x08007a91
 80079d4:	08007ab1 	.word	0x08007ab1
 80079d8:	08007ac5 	.word	0x08007ac5
 80079dc:	080079a9 	.word	0x080079a9
 80079e0:	080079a9 	.word	0x080079a9
 80079e4:	080079a9 	.word	0x080079a9
 80079e8:	08007b2f 	.word	0x08007b2f
 80079ec:	08007b37 	.word	0x08007b37
 80079f0:	08007af3 	.word	0x08007af3
 80079f4:	08007b63 	.word	0x08007b63
 80079f8:	080079a9 	.word	0x080079a9
 80079fc:	080079a9 	.word	0x080079a9
 8007a00:	080079a9 	.word	0x080079a9
 8007a04:	080079a9 	.word	0x080079a9
 8007a08:	080079a9 	.word	0x080079a9
 8007a0c:	080079a9 	.word	0x080079a9
 8007a10:	08007b3d 	.word	0x08007b3d
 8007a14:	08007b4d 	.word	0x08007b4d
 8007a18:	08007adf 	.word	0x08007adf
 8007a1c:	08007b27 	.word	0x08007b27
 8007a20:	08007b1b 	.word	0x08007b1b
 8007a24:	08007b21 	.word	0x08007b21
 8007a28:	08007af9 	.word	0x08007af9
 8007a2c:	08007b01 	.word	0x08007b01
 8007a30:	080079a9 	.word	0x080079a9
 8007a34:	080079a9 	.word	0x080079a9
 8007a38:	08007b07 	.word	0x08007b07
 8007a3c:	08007b11 	.word	0x08007b11
 8007a40:	08007a49 	.word	0x08007a49
  if (value < 0.0f) { return(STATUS_NEGATIVE_VALUE); }
 8007a44:	2004      	movs	r0, #4
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
          if (int_value) { settings.flags |= BITFLAG_LASER_MODE; }
 8007a48:	4a6e      	ldr	r2, [pc, #440]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007a4a:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f000 8098 	beq.w	8007b84 <settings_store_global_setting+0x22c>
 8007a54:	f043 0302 	orr.w	r3, r3, #2
 8007a58:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
  eeprom_put_char(0, SETTINGS_VERSION);
 8007a5c:	210a      	movs	r1, #10
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7fa f968 	bl	8001d34 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007a64:	227c      	movs	r2, #124	; 0x7c
 8007a66:	4967      	ldr	r1, [pc, #412]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007a68:	2001      	movs	r0, #1
 8007a6a:	f7fa f969 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    }
  }
  write_global_settings();
  return(STATUS_OK);
 8007a6e:	2000      	movs	r0, #0
 8007a70:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value < 3) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8007a72:	2802      	cmp	r0, #2
 8007a74:	f200 80a7 	bhi.w	8007bc6 <settings_store_global_setting+0x26e>
 8007a78:	2006      	movs	r0, #6
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8007a7c:	4b61      	ldr	r3, [pc, #388]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007a7e:	f883 0056 	strb.w	r0, [r3, #86]	; 0x56
 8007a82:	e7eb      	b.n	8007a5c <settings_store_global_setting+0x104>
        settings.dir_invert_mask = int_value;
 8007a84:	4b5f      	ldr	r3, [pc, #380]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007a86:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007a8a:	f000 fdb5 	bl	80085f8 <st_generate_step_dir_invert_masks>
        break;
 8007a8e:	e7e5      	b.n	8007a5c <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8007a90:	4a5c      	ldr	r2, [pc, #368]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007a92:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d079      	beq.n	8007b8e <settings_store_global_setting+0x236>
 8007a9a:	f043 0304 	orr.w	r3, r3, #4
 8007a9e:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007aa2:	e7db      	b.n	8007a5c <settings_store_global_setting+0x104>
        settings.step_invert_mask = int_value;
 8007aa4:	4b57      	ldr	r3, [pc, #348]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007aa6:	f8a3 0052 	strh.w	r0, [r3, #82]	; 0x52
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8007aaa:	f000 fda5 	bl	80085f8 <st_generate_step_dir_invert_masks>
        break;
 8007aae:	e7d5      	b.n	8007a5c <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007ab0:	4a54      	ldr	r2, [pc, #336]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007ab2:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d06e      	beq.n	8007b98 <settings_store_global_setting+0x240>
 8007aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007abe:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007ac2:	e7cb      	b.n	8007a5c <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 8007ac4:	4b4f      	ldr	r3, [pc, #316]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007ac6:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d054      	beq.n	8007b78 <settings_store_global_setting+0x220>
 8007ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
        probe_configure_invert_mask(false);
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8007ad8:	f7fd fc3c 	bl	8005354 <probe_configure_invert_mask>
        break;
 8007adc:	e7be      	b.n	8007a5c <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8007ade:	4a49      	ldr	r2, [pc, #292]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007ae0:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d061      	beq.n	8007bac <settings_store_global_setting+0x254>
 8007ae8:	f043 0310 	orr.w	r3, r3, #16
 8007aec:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007af0:	e7b4      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 12: settings.arc_tolerance = value; break;
 8007af2:	4b44      	ldr	r3, [pc, #272]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007af4:	65dd      	str	r5, [r3, #92]	; 0x5c
 8007af6:	e7b1      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 26: settings.homing_debounce_delay = int_value; break;
 8007af8:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007afa:	f8a3 0074 	strh.w	r0, [r3, #116]	; 0x74
 8007afe:	e7ad      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 27: settings.homing_pulloff = value; break;
 8007b00:	4b40      	ldr	r3, [pc, #256]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b02:	679d      	str	r5, [r3, #120]	; 0x78
 8007b04:	e7aa      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007b06:	4b3f      	ldr	r3, [pc, #252]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b08:	661d      	str	r5, [r3, #96]	; 0x60
 8007b0a:	f000 f921 	bl	8007d50 <spindle_init>
 8007b0e:	e7a5      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8007b10:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b12:	665d      	str	r5, [r3, #100]	; 0x64
 8007b14:	f000 f91c 	bl	8007d50 <spindle_init>
 8007b18:	e7a0      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 24: settings.homing_feed_rate = value; break;
 8007b1a:	4b3a      	ldr	r3, [pc, #232]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b1c:	66dd      	str	r5, [r3, #108]	; 0x6c
 8007b1e:	e79d      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 25: settings.homing_seek_rate = value; break;
 8007b20:	4b38      	ldr	r3, [pc, #224]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b22:	671d      	str	r5, [r3, #112]	; 0x70
 8007b24:	e79a      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 23: settings.homing_dir_mask = int_value; break;
 8007b26:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b28:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
 8007b2c:	e796      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 10: settings.status_report_mask = int_value; break;
 8007b2e:	4b35      	ldr	r3, [pc, #212]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b30:	f883 0057 	strb.w	r0, [r3, #87]	; 0x57
 8007b34:	e792      	b.n	8007a5c <settings_store_global_setting+0x104>
      case 11: settings.junction_deviation = value; break;
 8007b36:	4b33      	ldr	r3, [pc, #204]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b38:	659d      	str	r5, [r3, #88]	; 0x58
 8007b3a:	e78f      	b.n	8007a5c <settings_store_global_setting+0x104>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007b3c:	4a31      	ldr	r2, [pc, #196]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b3e:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
        if (int_value) {
 8007b42:	b370      	cbz	r0, 8007ba2 <settings_store_global_setting+0x24a>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8007b44:	06d9      	lsls	r1, r3, #27
 8007b46:	d457      	bmi.n	8007bf8 <settings_store_global_setting+0x2a0>
 8007b48:	200a      	movs	r0, #10
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8007b4c:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b4e:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8007b52:	b380      	cbz	r0, 8007bb6 <settings_store_global_setting+0x25e>
 8007b54:	f042 0208 	orr.w	r2, r2, #8
 8007b58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8007b5c:	f7fb fb3e 	bl	80031dc <limits_init>
        break;
 8007b60:	e77c      	b.n	8007a5c <settings_store_global_setting+0x104>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8007b62:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007b64:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8007b68:	b148      	cbz	r0, 8007b7e <settings_store_global_setting+0x226>
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8007b72:	f001 fed9 	bl	8009928 <system_flag_wco_change>
        break;
 8007b76:	e771      	b.n	8007a5c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 8007b78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b7c:	e7a9      	b.n	8007ad2 <settings_store_global_setting+0x17a>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8007b7e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b82:	e7f4      	b.n	8007b6e <settings_store_global_setting+0x216>
          else { settings.flags &= ~BITFLAG_LASER_MODE; }
 8007b84:	f023 0302 	bic.w	r3, r3, #2
 8007b88:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007b8c:	e766      	b.n	8007a5c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8007b8e:	f023 0304 	bic.w	r3, r3, #4
 8007b92:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007b96:	e761      	b.n	8007a5c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 8007b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9c:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007ba0:	e75c      	b.n	8007a5c <settings_store_global_setting+0x104>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8007ba2:	f023 0320 	bic.w	r3, r3, #32
 8007ba6:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007baa:	e757      	b.n	8007a5c <settings_store_global_setting+0x104>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8007bac:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007bb0:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007bb4:	e752      	b.n	8007a5c <settings_store_global_setting+0x104>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8007bb6:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8007bba:	e7cd      	b.n	8007b58 <settings_store_global_setting+0x200>
            settings.max_rate[parameter] = value;
 8007bbc:	4a11      	ldr	r2, [pc, #68]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007bbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bc2:	615d      	str	r5, [r3, #20]
            break;
 8007bc4:	e74a      	b.n	8007a5c <settings_store_global_setting+0x104>
        settings.pulse_microseconds = int_value; break;
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007bc8:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
 8007bcc:	e746      	b.n	8007a5c <settings_store_global_setting+0x104>
          case 2: settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 8007bce:	4628      	mov	r0, r5
 8007bd0:	490d      	ldr	r1, [pc, #52]	; (8007c08 <settings_store_global_setting+0x2b0>)
 8007bd2:	f103 040a 	add.w	r4, r3, #10
 8007bd6:	f7f9 f86b 	bl	8000cb0 <__aeabi_fmul>
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007bdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007be0:	e73c      	b.n	8007a5c <settings_store_global_setting+0x104>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 8007be2:	4b08      	ldr	r3, [pc, #32]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007be4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8007be8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007bec:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007bee:	e735      	b.n	8007a5c <settings_store_global_setting+0x104>
            settings.steps_per_mm[parameter] = value;
 8007bf0:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <settings_store_global_setting+0x2ac>)
 8007bf2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
            break;
 8007bf6:	e731      	b.n	8007a5c <settings_store_global_setting+0x104>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8007bf8:	f043 0320 	orr.w	r3, r3, #32
 8007bfc:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
 8007c00:	e72c      	b.n	8007a5c <settings_store_global_setting+0x104>
 8007c02:	bf00      	nop
 8007c04:	2000134c 	.word	0x2000134c
 8007c08:	45610000 	.word	0x45610000

08007c0c <settings_init>:
}


// Initialize the config subsystem
void settings_init() {
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t version = eeprom_get_char(0);
 8007c0e:	2000      	movs	r0, #0
void settings_init() {
 8007c10:	b087      	sub	sp, #28
  uint8_t version = eeprom_get_char(0);
 8007c12:	f7fa f889 	bl	8001d28 <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 8007c16:	280a      	cmp	r0, #10
 8007c18:	d07c      	beq.n	8007d14 <settings_init+0x108>
  if(!read_global_settings()) {
    report_status_message(STATUS_SETTING_READ_FAIL);
 8007c1a:	2007      	movs	r0, #7
 8007c1c:	f7fe fdf8 	bl	8006810 <report_status_message>
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007c20:	4c41      	ldr	r4, [pc, #260]	; (8007d28 <settings_init+0x11c>)
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007c22:	4842      	ldr	r0, [pc, #264]	; (8007d2c <settings_init+0x120>)
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007c24:	2606      	movs	r6, #6
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8007c26:	65a0      	str	r0, [r4, #88]	; 0x58
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007c28:	2000      	movs	r0, #0
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007c2a:	f44f 12f8 	mov.w	r2, #2031616	; 0x1f0000
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007c2e:	271f      	movs	r7, #31
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007c30:	23fa      	movs	r3, #250	; 0xfa
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007c32:	2500      	movs	r5, #0
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8007c34:	6660      	str	r0, [r4, #100]	; 0x64
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007c36:	2144      	movs	r1, #68	; 0x44
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007c38:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8007c3c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8007c40:	f8c4 2052 	str.w	r2, [r4, #82]	; 0x52
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007c44:	4e3a      	ldr	r6, [pc, #232]	; (8007d30 <settings_init+0x124>)
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007c46:	4a3b      	ldr	r2, [pc, #236]	; (8007d34 <settings_init+0x128>)
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 8007c48:	65e6      	str	r6, [r4, #92]	; 0x5c
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8007c4a:	6622      	str	r2, [r4, #96]	; 0x60
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007c4c:	4e3a      	ldr	r6, [pc, #232]	; (8007d38 <settings_init+0x12c>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007c4e:	4a3b      	ldr	r2, [pc, #236]	; (8007d3c <settings_init+0x130>)
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8007c50:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 8007c54:	66e6      	str	r6, [r4, #108]	; 0x6c
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007c56:	4f3a      	ldr	r7, [pc, #232]	; (8007d40 <settings_init+0x134>)
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007c58:	4e3a      	ldr	r6, [pc, #232]	; (8007d44 <settings_init+0x138>)
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8007c5a:	6722      	str	r2, [r4, #112]	; 0x70
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 8007c5c:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007c60:	4a39      	ldr	r2, [pc, #228]	; (8007d48 <settings_init+0x13c>)
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007c62:	4b3a      	ldr	r3, [pc, #232]	; (8007d4c <settings_init+0x140>)
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8007c64:	67a0      	str	r0, [r4, #120]	; 0x78
    if (DEFAULT_INVERT_LIMIT_PINS) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 8007c66:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  eeprom_put_char(0, SETTINGS_VERSION);
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	210a      	movs	r1, #10
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 8007c6e:	62a2      	str	r2, [r4, #40]	; 0x28
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8007c70:	62e2      	str	r2, [r4, #44]	; 0x2c
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 8007c72:	6322      	str	r2, [r4, #48]	; 0x30
    settings.acceleration[A_AXIS] = DEFAULT_A_ACCELERATION;
 8007c74:	6362      	str	r2, [r4, #52]	; 0x34
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 8007c76:	63e3      	str	r3, [r4, #60]	; 0x3c
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 8007c78:	6423      	str	r3, [r4, #64]	; 0x40
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 8007c7a:	6463      	str	r3, [r4, #68]	; 0x44
    settings.max_travel[A_AXIS] = (-DEFAULT_A_MAX_TRAVEL);
 8007c7c:	64a3      	str	r3, [r4, #72]	; 0x48
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 8007c7e:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 8007c82:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 8007c86:	6027      	str	r7, [r4, #0]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8007c88:	6067      	str	r7, [r4, #4]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8007c8a:	60a7      	str	r7, [r4, #8]
    settings.steps_per_mm[A_AXIS] = DEFAULT_A_STEPS_PER_MM;
 8007c8c:	60e7      	str	r7, [r4, #12]
    settings.steps_per_mm[B_AXIS] = DEFAULT_B_STEPS_PER_MM;
 8007c8e:	6127      	str	r7, [r4, #16]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 8007c90:	6166      	str	r6, [r4, #20]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8007c92:	61a6      	str	r6, [r4, #24]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8007c94:	61e6      	str	r6, [r4, #28]
    settings.max_rate[A_AXIS] = DEFAULT_A_MAX_RATE;
 8007c96:	6226      	str	r6, [r4, #32]
    settings.max_rate[B_AXIS] = DEFAULT_B_MAX_RATE;
 8007c98:	6266      	str	r6, [r4, #36]	; 0x24
    settings.acceleration[B_AXIS] = DEFAULT_B_ACCELERATION;
 8007c9a:	63a2      	str	r2, [r4, #56]	; 0x38
    settings.max_travel[B_AXIS] = (-DEFAULT_B_MAX_TRAVEL);
 8007c9c:	64e3      	str	r3, [r4, #76]	; 0x4c
  eeprom_put_char(0, SETTINGS_VERSION);
 8007c9e:	f7fa f849 	bl	8001d34 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007ca2:	4621      	mov	r1, r4
    memset(&coord_data, 0, sizeof(coord_data));
 8007ca4:	f44f 7400 	mov.w	r4, #512	; 0x200
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 8007ca8:	227c      	movs	r2, #124	; 0x7c
 8007caa:	2001      	movs	r0, #1
 8007cac:	f7fa f848 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    memset(&coord_data, 0, sizeof(coord_data));
 8007cb0:	9501      	str	r5, [sp, #4]
 8007cb2:	9502      	str	r5, [sp, #8]
 8007cb4:	9503      	str	r5, [sp, #12]
 8007cb6:	9504      	str	r5, [sp, #16]
 8007cb8:	9505      	str	r5, [sp, #20]
    protocol_buffer_synchronize();
 8007cba:	f7fe fab3 	bl	8006224 <protocol_buffer_synchronize>
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(float)*N_AXIS);
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	2214      	movs	r2, #20
 8007cc2:	a901      	add	r1, sp, #4
 8007cc4:	3415      	adds	r4, #21
 8007cc6:	f7fa f83b 	bl	8001d40 <memcpy_to_eeprom_with_checksum>
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 8007cca:	f5b4 7f2a 	cmp.w	r4, #680	; 0x2a8
 8007cce:	d1f4      	bne.n	8007cba <settings_init+0xae>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007cd6:	f7fa f82d 	bl	8001d34 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 8007cda:	2100      	movs	r1, #0
 8007cdc:	f240 3001 	movw	r0, #769	; 0x301
 8007ce0:	f7fa f828 	bl	8001d34 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	f240 305b 	movw	r0, #859	; 0x35b
 8007cea:	f7fa f823 	bl	8001d34 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 8007cee:	2100      	movs	r1, #0
 8007cf0:	f44f 7057 	mov.w	r0, #860	; 0x35c
 8007cf4:	f7fa f81e 	bl	8001d34 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8007cfe:	f7fa f819 	bl	8001d34 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 8007d02:	2100      	movs	r1, #0
 8007d04:	f240 30c1 	movw	r0, #961	; 0x3c1
 8007d08:	f7fa f814 	bl	8001d34 <eeprom_put_char>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
 8007d0c:	f7fe fe18 	bl	8006940 <report_grbl_settings>
  }
}
 8007d10:	b007      	add	sp, #28
 8007d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 8007d14:	227c      	movs	r2, #124	; 0x7c
 8007d16:	2101      	movs	r1, #1
 8007d18:	4803      	ldr	r0, [pc, #12]	; (8007d28 <settings_init+0x11c>)
 8007d1a:	f7fa f863 	bl	8001de4 <memcpy_from_eeprom_with_checksum>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f43f af7b 	beq.w	8007c1a <settings_init+0xe>
}
 8007d24:	b007      	add	sp, #28
 8007d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d28:	2000134c 	.word	0x2000134c
 8007d2c:	3c23d70a 	.word	0x3c23d70a
 8007d30:	3b03126f 	.word	0x3b03126f
 8007d34:	447a0000 	.word	0x447a0000
 8007d38:	41200000 	.word	0x41200000
 8007d3c:	42c80000 	.word	0x42c80000
 8007d40:	45a00000 	.word	0x45a00000
 8007d44:	44fa0000 	.word	0x44fa0000
 8007d48:	4bdbba00 	.word	0x4bdbba00
 8007d4c:	c38c0000 	.word	0xc38c0000

08007d50 <spindle_init>:
  static float pwm_gradient; // Precalulated value to speed up rpm to PWM conversions.
#endif


void spindle_init()
{
 8007d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef VARIABLE_SPINDLE
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007d54:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <spindle_init+0xf4>)
{
 8007d56:	b088      	sub	sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007d58:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8007d5a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007d5c:	f7f8 fe9e 	bl	8000a9c <__aeabi_fsub>
 8007d60:	4601      	mov	r1, r0
 8007d62:	4839      	ldr	r0, [pc, #228]	; (8007e48 <spindle_init+0xf8>)
 8007d64:	f7f9 f858 	bl	8000e18 <__aeabi_fdiv>
#if defined (STM32F103C8)
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007d68:	2701      	movs	r7, #1
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007d6a:	f04f 0903 	mov.w	r9, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007d6e:	2510      	movs	r5, #16
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);

#ifdef USE_SPINDLE_ENABLE_PIN
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007d70:	f04f 0a02 	mov.w	sl, #2
#endif

#ifdef VARIABLE_SPINDLE
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  TIM_TimeBaseInitTypeDef timerInitStructure;
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007d74:	2400      	movs	r4, #0
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007d76:	4b35      	ldr	r3, [pc, #212]	; (8007e4c <spindle_init+0xfc>)
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007d78:	ae08      	add	r6, sp, #32
  pwm_gradient = SPINDLE_PWM_RANGE / (settings.rpm_max - settings.rpm_min);
 8007d7a:	6018      	str	r0, [r3, #0]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007d7c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007e5c <spindle_init+0x10c>
	RCC_APB2PeriphClockCmd(RCC_SPINDLE_ENABLE_PORT, ENABLE); // there is no RCC_SPINDLE_DIRECTION_PORT defined!
 8007d80:	4639      	mov	r1, r7
 8007d82:	2008      	movs	r0, #8
 8007d84:	f7f9 fda0 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_DIRECTION_BIT;
 8007d88:	f826 7d20 	strh.w	r7, [r6, #-32]!
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4640      	mov	r0, r8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007d90:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007d94:	f88d 9002 	strb.w	r9, [sp, #2]
	GPIO_Init(SPINDLE_DIRECTION_PORT, &GPIO_InitStructure);
 8007d98:	f7f9 fb32 	bl	8001400 <GPIO_Init>
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4640      	mov	r0, r8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8007da0:	f88d 5003 	strb.w	r5, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007da4:	f88d 9002 	strb.w	r9, [sp, #2]
	GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_ENABLE_BIT;
 8007da8:	f8ad a000 	strh.w	sl, [sp]
	GPIO_Init(SPINDLE_ENABLE_PORT, &GPIO_InitStructure);
 8007dac:	f7f9 fb28 	bl	8001400 <GPIO_Init>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8007db0:	4639      	mov	r1, r7
 8007db2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007db6:	f7f9 fd87 	bl	80018c8 <RCC_APB2PeriphClockCmd>
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007dba:	a801      	add	r0, sp, #4
  TIM_OCInitTypeDef outputChannelInit = { 0 };
 8007dbc:	9404      	str	r4, [sp, #16]
 8007dbe:	9405      	str	r4, [sp, #20]
 8007dc0:	9406      	str	r4, [sp, #24]
 8007dc2:	9407      	str	r4, [sp, #28]
  TIM_TimeBaseStructInit(&timerInitStructure);
 8007dc4:	f7f9 fe2a 	bl	8001a1c <TIM_TimeBaseStructInit>

  timerInitStructure.TIM_Prescaler = 14350;//F_CPU / 1000000 - 1; // 1000
 8007dc8:	f643 020e 	movw	r2, #14350	; 0x380e
 8007dcc:	2363      	movs	r3, #99	; 0x63
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = SPINDLE_PWM_MAX_VALUE - 1;
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007dce:	4d20      	ldr	r5, [pc, #128]	; (8007e50 <spindle_init+0x100>)
 8007dd0:	a901      	add	r1, sp, #4
 8007dd2:	4628      	mov	r0, r5
  timerInitStructure.TIM_Prescaler = 14350;//F_CPU / 1000000 - 1; // 1000
 8007dd4:	9201      	str	r2, [sp, #4]
 8007dd6:	9302      	str	r3, [sp, #8]
  timerInitStructure.TIM_RepetitionCounter = 0;
 8007dd8:	f88d 400c 	strb.w	r4, [sp, #12]
  TIM_TimeBaseInit(TIM1, &timerInitStructure);
 8007ddc:	f7f9 fd80 	bl	80018e0 <TIM_TimeBaseInit>

  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007de0:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <spindle_init+0x104>)
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
  outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
  outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

  TIM_OC1Init(TIM1, &outputChannelInit);
 8007de2:	a904      	add	r1, sp, #16
 8007de4:	4628      	mov	r0, r5
  outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
 8007de6:	9304      	str	r3, [sp, #16]
  outputChannelInit.TIM_Pulse = 0;     // initi speed is 0
 8007de8:	f8cd 4016 	str.w	r4, [sp, #22]
  TIM_OC1Init(TIM1, &outputChannelInit);
 8007dec:	f7f9 fdce 	bl	800198c <TIM_OC1Init>
  TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8007df0:	4628      	mov	r0, r5
 8007df2:	2108      	movs	r1, #8
 8007df4:	f7f9 fe42 	bl	8001a7c <TIM_OC1PreloadConfig>
  TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f7f9 fe24 	bl	8001a48 <TIM_CtrlPWMOutputs>
  TIM_Cmd(TIM1, ENABLE);
 8007e00:	4639      	mov	r1, r7
 8007e02:	4628      	mov	r0, r5
 8007e04:	f7f9 fe12 	bl	8001a2c <TIM_Cmd>

  RCC_APB2PeriphClockCmd(RCC_SPINDLE_PWM_PORT, ENABLE);
 8007e08:	4639      	mov	r1, r7
 8007e0a:	2004      	movs	r0, #4
 8007e0c:	f7f9 fd5c 	bl	80018c8 <RCC_APB2PeriphClockCmd>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007e10:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007e14:	2218      	movs	r2, #24
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007e16:	4631      	mov	r1, r6
 8007e18:	480f      	ldr	r0, [pc, #60]	; (8007e58 <spindle_init+0x108>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8007e1a:	f88d 2003 	strb.w	r2, [sp, #3]
  GPIO_InitStructure.GPIO_Pin = 1 << SPINDLE_PWM_BIT;
 8007e1e:	f8ad 3000 	strh.w	r3, [sp]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8007e22:	f88d 9002 	strb.w	r9, [sp, #2]
  GPIO_Init(SPINDLE_PWM_PORT, &GPIO_InitStructure);
 8007e26:	f7f9 faeb 	bl	8001400 <GPIO_Init>
#endif
#endif

#if defined (STM32F103C8)
	#ifdef VARIABLE_SPINDLE
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f7f9 fe0b 	bl	8001a48 <TIM_CtrlPWMOutputs>
	#endif
    #ifdef USE_SPINDLE_ENABLE_PIN
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        SetSpindleEnablebit();
      #else
        ResetSpindleEnablebit();
 8007e32:	4622      	mov	r2, r4
 8007e34:	4651      	mov	r1, sl
 8007e36:	4640      	mov	r0, r8
 8007e38:	f7f9 fca4 	bl	8001784 <GPIO_WriteBit>
}
 8007e3c:	b008      	add	sp, #32
 8007e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e42:	bf00      	nop
 8007e44:	2000134c 	.word	0x2000134c
 8007e48:	42c60000 	.word	0x42c60000
 8007e4c:	20000af0 	.word	0x20000af0
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	00010060 	.word	0x00010060
 8007e58:	40010800 	.word	0x40010800
 8007e5c:	40010c00 	.word	0x40010c00

08007e60 <spindle_get_state>:
{
 8007e60:	b508      	push	{r3, lr}
  pin = GPIO_ReadInputData(SPINDLE_ENABLE_PORT);
 8007e62:	4807      	ldr	r0, [pc, #28]	; (8007e80 <spindle_get_state+0x20>)
 8007e64:	f7f9 fc82 	bl	800176c <GPIO_ReadInputData>
 8007e68:	b2c0      	uxtb	r0, r0
		  if (bit_istrue(pin,(1<<SPINDLE_ENABLE_BIT)))
 8007e6a:	f010 0302 	ands.w	r3, r0, #2
 8007e6e:	d005      	beq.n	8007e7c <spindle_get_state+0x1c>
		  if (pin & (1 << SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
 8007e70:	f010 0f01 	tst.w	r0, #1
		  else { return(SPINDLE_STATE_CW); }
 8007e74:	bf14      	ite	ne
 8007e76:	2002      	movne	r0, #2
 8007e78:	2001      	moveq	r0, #1
 8007e7a:	bd08      	pop	{r3, pc}
		} else { return(SPINDLE_STATE_DISABLE); }
 8007e7c:	4618      	mov	r0, r3
}
 8007e7e:	bd08      	pop	{r3, pc}
 8007e80:	40010c00 	.word	0x40010c00

08007e84 <spindle_stop>:
{
 8007e84:	b508      	push	{r3, lr}
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007e86:	2100      	movs	r1, #0
 8007e88:	4804      	ldr	r0, [pc, #16]	; (8007e9c <spindle_stop+0x18>)
 8007e8a:	f7f9 fddd 	bl	8001a48 <TIM_CtrlPWMOutputs>
      #endif
    #endif
#endif
}
 8007e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ResetSpindleEnablebit();
 8007e92:	2200      	movs	r2, #0
 8007e94:	2102      	movs	r1, #2
 8007e96:	4802      	ldr	r0, [pc, #8]	; (8007ea0 <spindle_stop+0x1c>)
 8007e98:	f7f9 bc74 	b.w	8001784 <GPIO_WriteBit>
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40010c00 	.word	0x40010c00

08007ea4 <spindle_set_speed>:

#ifdef VARIABLE_SPINDLE
  // Sets spindle speed PWM output and enable pin, if configured. Called by spindle_set_state()
  // and stepper ISR. Keep routine small and efficient.
  void spindle_set_speed(SPINDLE_PWM_TYPE pwm_value)
  {
 8007ea4:	4601      	mov	r1, r0
#ifdef AVRTARGET
		SPINDLE_OCR_REGISTER = pwm_value; // Set PWM output level.
#endif
#if defined (STM32F103C8)
		TIM1->CCR1 = pwm_value;
 8007ea6:	4803      	ldr	r0, [pc, #12]	; (8007eb4 <spindle_set_speed+0x10>)
 8007ea8:	8681      	strh	r1, [r0, #52]	; 0x34
					SetSpindleEnablebit();
				  #endif
				#endif
		 }
		#else
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8007eaa:	b101      	cbz	r1, 8007eae <spindle_set_speed+0xa>
			} else {
			#ifdef AVRTARGET
      SPINDLE_TCCRA_REGISTER |= (1<<SPINDLE_COMB_BIT); // Ensure PWM output is enabled.
			#endif
			#if defined (STM32F103C8)
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007eac:	2101      	movs	r1, #1
 8007eae:	f7f9 bdcb 	b.w	8001a48 <TIM_CtrlPWMOutputs>
 8007eb2:	bf00      	nop
 8007eb4:	40012c00 	.word	0x40012c00

08007eb8 <spindle_compute_pwm_value>:
		return(pwm_value);
	}
  #else
	// Called by spindle_set_state() and step segment generator. Keep routine small and efficient.
	SPINDLE_PWM_TYPE spindle_compute_pwm_value(float rpm) // 328p PWM register is 8-bit.
	{
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		SPINDLE_PWM_TYPE pwm_value;
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
																					 // Calculate PWM register value based on rpm max/min settings and programmed rpm.
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007eba:	4b1e      	ldr	r3, [pc, #120]	; (8007f34 <spindle_compute_pwm_value+0x7c>)
	{
 8007ebc:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007ebe:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8007ec0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7f9 f8a5 	bl	8001014 <__aeabi_fcmpge>
 8007eca:	4d1b      	ldr	r5, [pc, #108]	; (8007f38 <spindle_compute_pwm_value+0x80>)
 8007ecc:	b110      	cbz	r0, 8007ed4 <spindle_compute_pwm_value+0x1c>
			// No PWM range possible. Set simple on/off spindle control pin state.
			sys.spindle_speed = settings.rpm_max;
 8007ece:	612c      	str	r4, [r5, #16]
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007ed0:	2064      	movs	r0, #100	; 0x64
 8007ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007ed4:	7aa8      	ldrb	r0, [r5, #10]
 8007ed6:	f7f8 fe97 	bl	8000c08 <__aeabi_i2f>
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 fee8 	bl	8000cb0 <__aeabi_fmul>
 8007ee0:	4916      	ldr	r1, [pc, #88]	; (8007f3c <spindle_compute_pwm_value+0x84>)
 8007ee2:	f7f8 fee5 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007ee6:	4621      	mov	r1, r4
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007ee8:	4607      	mov	r7, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007eea:	f7f9 f893 	bl	8001014 <__aeabi_fcmpge>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d1ed      	bne.n	8007ece <spindle_compute_pwm_value+0x16>
		}
		else if (rpm <= settings.rpm_min) {
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7f9 f883 	bl	8001000 <__aeabi_fcmple>
 8007efa:	b140      	cbz	r0, 8007f0e <spindle_compute_pwm_value+0x56>
			if (rpm == 0.0f) { // S0 disables spindle
 8007efc:	2400      	movs	r4, #0
 8007efe:	4638      	mov	r0, r7
 8007f00:	4621      	mov	r1, r4
 8007f02:	f7f9 f869 	bl	8000fd8 <__aeabi_fcmpeq>
 8007f06:	b190      	cbz	r0, 8007f2e <spindle_compute_pwm_value+0x76>
				sys.spindle_speed = 0.0f;
 8007f08:	612c      	str	r4, [r5, #16]
				pwm_value = SPINDLE_PWM_OFF_VALUE;
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else {
			// Compute intermediate PWM value with linear spindle speed model.
			// NOTE: A nonlinear model could be installed here, if required, but keep it VERY light-weight.
			sys.spindle_speed = rpm;
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f0e:	4631      	mov	r1, r6
			sys.spindle_speed = rpm;
 8007f10:	612f      	str	r7, [r5, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7f8 fdc2 	bl	8000a9c <__aeabi_fsub>
 8007f18:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <spindle_compute_pwm_value+0x88>)
 8007f1a:	6819      	ldr	r1, [r3, #0]
 8007f1c:	f7f8 fec8 	bl	8000cb0 <__aeabi_fmul>
 8007f20:	f003 f88e 	bl	800b040 <floorf>
 8007f24:	f7f9 f8c6 	bl	80010b4 <__aeabi_f2uiz>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	b280      	uxth	r0, r0
		}
		return(pwm_value);
	}
 8007f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sys.spindle_speed = settings.rpm_min;
 8007f2e:	612e      	str	r6, [r5, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8007f30:	2001      	movs	r0, #1
 8007f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f34:	2000134c 	.word	0x2000134c
 8007f38:	20001188 	.word	0x20001188
 8007f3c:	3c23d70a 	.word	0x3c23d70a
 8007f40:	20000af0 	.word	0x20000af0

08007f44 <spindle_set_state>:
#ifdef VARIABLE_SPINDLE
  void spindle_set_state(uint8_t state, float rpm)
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (sys.abort) { return; } // Block during abort.
 8007f46:	4c3e      	ldr	r4, [pc, #248]	; (8008040 <spindle_set_state+0xfc>)
 8007f48:	7862      	ldrb	r2, [r4, #1]
 8007f4a:	bb2a      	cbnz	r2, 8007f98 <spindle_set_state+0x54>
 8007f4c:	4605      	mov	r5, r0
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8007f4e:	b320      	cbz	r0, 8007f9a <spindle_set_state+0x56>
    #endif
    spindle_stop();
  
  } else {
    #if !(defined(AVRTARGET) && defined(USE_SPINDLE_DIR_AS_ENABLE_PIN))
      if (state == SPINDLE_ENABLE_CW) {
 8007f50:	2810      	cmp	r0, #16
 8007f52:	460e      	mov	r6, r1
 8007f54:	d056      	beq.n	8008004 <spindle_set_state+0xc0>
        ResetSpindleDirectionBit();
	  }
	  else {
      SetSpindleDirectionBit();
 8007f56:	2201      	movs	r2, #1
 8007f58:	483a      	ldr	r0, [pc, #232]	; (8008044 <spindle_set_state+0x100>)
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	f7f9 fc12 	bl	8001784 <GPIO_WriteBit>
      }
    #endif
  
    #ifdef VARIABLE_SPINDLE
      // NOTE: Assumes all calls to this function is when Grbl is not moving or must remain off.
      if (settings.flags & BITFLAG_LASER_MODE) {
 8007f60:	4b39      	ldr	r3, [pc, #228]	; (8008048 <spindle_set_state+0x104>)
 8007f62:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8007f66:	0792      	lsls	r2, r2, #30
 8007f68:	d425      	bmi.n	8007fb6 <spindle_set_state+0x72>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007f6a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8007f6c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8007f6e:	4638      	mov	r0, r7
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f9 f84f 	bl	8001014 <__aeabi_fcmpge>
 8007f76:	b310      	cbz	r0, 8007fbe <spindle_set_state+0x7a>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 8007f78:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 8007f7a:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007f7c:	4b33      	ldr	r3, [pc, #204]	; (800804c <spindle_set_state+0x108>)
 8007f7e:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8007f80:	2101      	movs	r1, #1
 8007f82:	4832      	ldr	r0, [pc, #200]	; (800804c <spindle_set_state+0x108>)
 8007f84:	f7f9 fd60 	bl	8001a48 <TIM_CtrlPWMOutputs>
#if (defined(USE_SPINDLE_ENABLE_PIN) && \
        !defined(SPINDLE_ENABLE_OFF_WITH_ZERO_SPEED)) || !defined(VARIABLE_SPINDLE)
	  #ifdef INVERT_SPINDLE_ENABLE_PIN
		ResetSpindleEnablebit();
	  #else
		SetSpindleEnablebit();
 8007f88:	2201      	movs	r2, #1
 8007f8a:	2102      	movs	r1, #2
 8007f8c:	482d      	ldr	r0, [pc, #180]	; (8008044 <spindle_set_state+0x100>)
 8007f8e:	f7f9 fbf9 	bl	8001784 <GPIO_WriteBit>
	  #endif
	#endif
	#endif
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007f92:	2300      	movs	r3, #0
 8007f94:	7323      	strb	r3, [r4, #12]
 8007f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 8007f9a:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	482b      	ldr	r0, [pc, #172]	; (800804c <spindle_set_state+0x108>)
      sys.spindle_speed = 0.0f;
 8007fa0:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007fa2:	f7f9 fd51 	bl	8001a48 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	2102      	movs	r1, #2
 8007faa:	4826      	ldr	r0, [pc, #152]	; (8008044 <spindle_set_state+0x100>)
 8007fac:	f7f9 fbea 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	7323      	strb	r3, [r4, #12]
 8007fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 8007fb6:	2d20      	cmp	r5, #32
 8007fb8:	bf08      	it	eq
 8007fba:	2600      	moveq	r6, #0
 8007fbc:	e7d5      	b.n	8007f6a <spindle_set_state+0x26>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007fbe:	7aa0      	ldrb	r0, [r4, #10]
 8007fc0:	f7f8 fe22 	bl	8000c08 <__aeabi_i2f>
 8007fc4:	4922      	ldr	r1, [pc, #136]	; (8008050 <spindle_set_state+0x10c>)
 8007fc6:	f7f8 fe73 	bl	8000cb0 <__aeabi_fmul>
 8007fca:	4631      	mov	r1, r6
 8007fcc:	f7f8 fe70 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007fd0:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 8007fd2:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8007fd4:	f7f9 f81e 	bl	8001014 <__aeabi_fcmpge>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d1cd      	bne.n	8007f78 <spindle_set_state+0x34>
		else if (rpm <= settings.rpm_min) {
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7f9 f80e 	bl	8001000 <__aeabi_fcmple>
 8007fe4:	b1a0      	cbz	r0, 8008010 <spindle_set_state+0xcc>
			if (rpm == 0.0f) { // S0 disables spindle
 8007fe6:	2500      	movs	r5, #0
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 fff4 	bl	8000fd8 <__aeabi_fcmpeq>
 8007ff0:	b310      	cbz	r0, 8008038 <spindle_set_state+0xf4>
		TIM1->CCR1 = pwm_value;
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4b15      	ldr	r3, [pc, #84]	; (800804c <spindle_set_state+0x108>)
				sys.spindle_speed = 0.0f;
 8007ff6:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8007ff8:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	4813      	ldr	r0, [pc, #76]	; (800804c <spindle_set_state+0x108>)
 8007ffe:	f7f9 fd23 	bl	8001a48 <TIM_CtrlPWMOutputs>
 8008002:	e7c1      	b.n	8007f88 <spindle_set_state+0x44>
        ResetSpindleDirectionBit();
 8008004:	2101      	movs	r1, #1
 8008006:	480f      	ldr	r0, [pc, #60]	; (8008044 <spindle_set_state+0x100>)
 8008008:	f7f9 fbbc 	bl	8001784 <GPIO_WriteBit>
 800800c:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <spindle_set_state+0x104>)
 800800e:	e7ac      	b.n	8007f6a <spindle_set_state+0x26>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008010:	4639      	mov	r1, r7
 8008012:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 8008014:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008016:	f7f8 fd41 	bl	8000a9c <__aeabi_fsub>
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <spindle_set_state+0x110>)
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	f7f8 fe47 	bl	8000cb0 <__aeabi_fmul>
 8008022:	f003 f80d 	bl	800b040 <floorf>
 8008026:	f7f9 f845 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 800802a:	4b08      	ldr	r3, [pc, #32]	; (800804c <spindle_set_state+0x108>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800802c:	3001      	adds	r0, #1
 800802e:	b280      	uxth	r0, r0
		TIM1->CCR1 = pwm_value;
 8008030:	8698      	strh	r0, [r3, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 8008032:	2800      	cmp	r0, #0
 8008034:	d0e1      	beq.n	8007ffa <spindle_set_state+0xb6>
 8008036:	e7a3      	b.n	8007f80 <spindle_set_state+0x3c>
				sys.spindle_speed = settings.rpm_min;
 8008038:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 800803a:	2201      	movs	r2, #1
 800803c:	e79e      	b.n	8007f7c <spindle_set_state+0x38>
 800803e:	bf00      	nop
 8008040:	20001188 	.word	0x20001188
 8008044:	40010c00 	.word	0x40010c00
 8008048:	2000134c 	.word	0x2000134c
 800804c:	40012c00 	.word	0x40012c00
 8008050:	3c23d70a 	.word	0x3c23d70a
 8008054:	20000af0 	.word	0x20000af0

08008058 <spindle_sync>:

// G-code parser entry-point for setting spindle state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
#ifdef VARIABLE_SPINDLE
  void spindle_sync(uint8_t state, float rpm)
  {
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (sys.state == STATE_CHECK_MODE) { return; }
 800805a:	4c3f      	ldr	r4, [pc, #252]	; (8008158 <spindle_sync+0x100>)
 800805c:	7823      	ldrb	r3, [r4, #0]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d005      	beq.n	800806e <spindle_sync+0x16>
 8008062:	4605      	mov	r5, r0
 8008064:	460e      	mov	r6, r1
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8008066:	f7fe f8dd 	bl	8006224 <protocol_buffer_synchronize>
  if (sys.abort) { return; } // Block during abort.
 800806a:	7862      	ldrb	r2, [r4, #1]
 800806c:	b102      	cbz	r2, 8008070 <spindle_sync+0x18>
 800806e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8008070:	b32d      	cbz	r5, 80080be <spindle_sync+0x66>
      if (state == SPINDLE_ENABLE_CW) {
 8008072:	2d10      	cmp	r5, #16
 8008074:	d052      	beq.n	800811c <spindle_sync+0xc4>
      SetSpindleDirectionBit();
 8008076:	2201      	movs	r2, #1
 8008078:	4838      	ldr	r0, [pc, #224]	; (800815c <spindle_sync+0x104>)
 800807a:	4611      	mov	r1, r2
 800807c:	f7f9 fb82 	bl	8001784 <GPIO_WriteBit>
      if (settings.flags & BITFLAG_LASER_MODE) {
 8008080:	4b37      	ldr	r3, [pc, #220]	; (8008160 <spindle_sync+0x108>)
 8008082:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8008086:	0792      	lsls	r2, r2, #30
 8008088:	d502      	bpl.n	8008090 <spindle_sync+0x38>
        if (state == SPINDLE_ENABLE_CCW) { rpm = 0.0f; } // TODO: May need to be rpm_min*(100/MAX_SPINDLE_SPEED_OVERRIDE);
 800808a:	2d20      	cmp	r5, #32
 800808c:	bf08      	it	eq
 800808e:	2600      	moveq	r6, #0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 8008090:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8008092:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8008094:	4638      	mov	r0, r7
 8008096:	4629      	mov	r1, r5
 8008098:	f7f8 ffbc 	bl	8001014 <__aeabi_fcmpge>
 800809c:	b1d8      	cbz	r0, 80080d6 <spindle_sync+0x7e>
			pwm_value = SPINDLE_PWM_MAX_VALUE;
 800809e:	2264      	movs	r2, #100	; 0x64
			sys.spindle_speed = settings.rpm_max;
 80080a0:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 80080a2:	4b30      	ldr	r3, [pc, #192]	; (8008164 <spindle_sync+0x10c>)
 80080a4:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80080a6:	2101      	movs	r1, #1
 80080a8:	482e      	ldr	r0, [pc, #184]	; (8008164 <spindle_sync+0x10c>)
 80080aa:	f7f9 fccd 	bl	8001a48 <TIM_CtrlPWMOutputs>
		SetSpindleEnablebit();
 80080ae:	2201      	movs	r2, #1
 80080b0:	2102      	movs	r1, #2
 80080b2:	482a      	ldr	r0, [pc, #168]	; (800815c <spindle_sync+0x104>)
 80080b4:	f7f9 fb66 	bl	8001784 <GPIO_WriteBit>
  sys.report_ovr_counter = 0; // Set to report change immediately
 80080b8:	2300      	movs	r3, #0
 80080ba:	7323      	strb	r3, [r4, #12]
 80080bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sys.spindle_speed = 0.0f;
 80080be:	2300      	movs	r3, #0
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80080c0:	4629      	mov	r1, r5
 80080c2:	4828      	ldr	r0, [pc, #160]	; (8008164 <spindle_sync+0x10c>)
      sys.spindle_speed = 0.0f;
 80080c4:	6123      	str	r3, [r4, #16]
    TIM_CtrlPWMOutputs(TIM1, DISABLE);
 80080c6:	f7f9 fcbf 	bl	8001a48 <TIM_CtrlPWMOutputs>
        ResetSpindleEnablebit();
 80080ca:	462a      	mov	r2, r5
 80080cc:	2102      	movs	r1, #2
 80080ce:	4823      	ldr	r0, [pc, #140]	; (800815c <spindle_sync+0x104>)
 80080d0:	f7f9 fb58 	bl	8001784 <GPIO_WriteBit>
 80080d4:	e7f0      	b.n	80080b8 <spindle_sync+0x60>
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80080d6:	7aa0      	ldrb	r0, [r4, #10]
 80080d8:	f7f8 fd96 	bl	8000c08 <__aeabi_i2f>
 80080dc:	4922      	ldr	r1, [pc, #136]	; (8008168 <spindle_sync+0x110>)
 80080de:	f7f8 fde7 	bl	8000cb0 <__aeabi_fmul>
 80080e2:	4631      	mov	r1, r6
 80080e4:	f7f8 fde4 	bl	8000cb0 <__aeabi_fmul>
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80080e8:	4629      	mov	r1, r5
		rpm *= (0.010f*sys.spindle_speed_ovr); // Scale by spindle speed override value.
 80080ea:	4606      	mov	r6, r0
		if ((settings.rpm_min >= settings.rpm_max) || (rpm >= settings.rpm_max)) {
 80080ec:	f7f8 ff92 	bl	8001014 <__aeabi_fcmpge>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1d4      	bne.n	800809e <spindle_sync+0x46>
		else if (rpm <= settings.rpm_min) {
 80080f4:	4639      	mov	r1, r7
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7f8 ff82 	bl	8001000 <__aeabi_fcmple>
 80080fc:	b1a0      	cbz	r0, 8008128 <spindle_sync+0xd0>
			if (rpm == 0.0f) { // S0 disables spindle
 80080fe:	2500      	movs	r5, #0
 8008100:	4630      	mov	r0, r6
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 ff68 	bl	8000fd8 <__aeabi_fcmpeq>
 8008108:	b310      	cbz	r0, 8008150 <spindle_sync+0xf8>
		TIM1->CCR1 = pwm_value;
 800810a:	2200      	movs	r2, #0
 800810c:	4b15      	ldr	r3, [pc, #84]	; (8008164 <spindle_sync+0x10c>)
				sys.spindle_speed = 0.0f;
 800810e:	6125      	str	r5, [r4, #16]
		TIM1->CCR1 = pwm_value;
 8008110:	869a      	strh	r2, [r3, #52]	; 0x34
				TIM_CtrlPWMOutputs(TIM1, DISABLE);
 8008112:	2100      	movs	r1, #0
 8008114:	4813      	ldr	r0, [pc, #76]	; (8008164 <spindle_sync+0x10c>)
 8008116:	f7f9 fc97 	bl	8001a48 <TIM_CtrlPWMOutputs>
 800811a:	e7c8      	b.n	80080ae <spindle_sync+0x56>
        ResetSpindleDirectionBit();
 800811c:	2101      	movs	r1, #1
 800811e:	480f      	ldr	r0, [pc, #60]	; (800815c <spindle_sync+0x104>)
 8008120:	f7f9 fb30 	bl	8001784 <GPIO_WriteBit>
 8008124:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <spindle_sync+0x108>)
 8008126:	e7b3      	b.n	8008090 <spindle_sync+0x38>
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008128:	4639      	mov	r1, r7
 800812a:	4630      	mov	r0, r6
			sys.spindle_speed = rpm;
 800812c:	6126      	str	r6, [r4, #16]
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 800812e:	f7f8 fcb5 	bl	8000a9c <__aeabi_fsub>
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <spindle_sync+0x114>)
 8008134:	6819      	ldr	r1, [r3, #0]
 8008136:	f7f8 fdbb 	bl	8000cb0 <__aeabi_fmul>
 800813a:	f002 ff81 	bl	800b040 <floorf>
 800813e:	f7f8 ffb9 	bl	80010b4 <__aeabi_f2uiz>
		TIM1->CCR1 = pwm_value;
 8008142:	4a08      	ldr	r2, [pc, #32]	; (8008164 <spindle_sync+0x10c>)
			pwm_value = (SPINDLE_PWM_TYPE)floorf((rpm - settings.rpm_min)*pwm_gradient) + SPINDLE_PWM_MIN_VALUE;
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	b29b      	uxth	r3, r3
		TIM1->CCR1 = pwm_value;
 8008148:	8693      	strh	r3, [r2, #52]	; 0x34
			if (pwm_value == SPINDLE_PWM_OFF_VALUE) {
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0e1      	beq.n	8008112 <spindle_sync+0xba>
 800814e:	e7aa      	b.n	80080a6 <spindle_sync+0x4e>
				sys.spindle_speed = settings.rpm_min;
 8008150:	6127      	str	r7, [r4, #16]
				pwm_value = SPINDLE_PWM_MIN_VALUE;
 8008152:	2201      	movs	r2, #1
 8008154:	e7a5      	b.n	80080a2 <spindle_sync+0x4a>
 8008156:	bf00      	nop
 8008158:	20001188 	.word	0x20001188
 800815c:	40010c00 	.word	0x40010c00
 8008160:	2000134c 	.word	0x2000134c
 8008164:	40012c00 	.word	0x40012c00
 8008168:	3c23d70a 	.word	0x3c23d70a
 800816c:	20000af0 	.word	0x20000af0

08008170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80081a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008174:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008176:	e003      	b.n	8008180 <LoopCopyDataInit>

08008178 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008178:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800817a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800817c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800817e:	3104      	adds	r1, #4

08008180 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008180:	480b      	ldr	r0, [pc, #44]	; (80081b0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8008184:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008186:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008188:	d3f6      	bcc.n	8008178 <CopyDataInit>
	ldr	r2, =_sbss
 800818a:	4a0b      	ldr	r2, [pc, #44]	; (80081b8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800818c:	e002      	b.n	8008194 <LoopFillZerobss>

0800818e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800818e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008190:	f842 3b04 	str.w	r3, [r2], #4

08008194 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008194:	4b09      	ldr	r3, [pc, #36]	; (80081bc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8008196:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008198:	d3f9      	bcc.n	800818e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800819a:	f001 fcdd 	bl	8009b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800819e:	f002 fe9f 	bl	800aee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80081a2:	f7fb fbb9 	bl	8003918 <main>
	bx	lr
 80081a6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80081a8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80081ac:	0800c77c 	.word	0x0800c77c
	ldr	r0, =_sdata
 80081b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80081b4:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80081b8:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80081bc:	20001448 	.word	0x20001448

080081c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80081c0:	e7fe      	b.n	80081c0 <ADC1_2_IRQHandler>
	...

080081c4 <st_wake_up>:


// Stepper state initialization. Cycle should only start if the st.cycle_start flag is
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return;
	}
#endif
  // Enable stepper drivers.
  #ifndef MANUAL_POWER
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80081c6:	4d18      	ldr	r5, [pc, #96]	; (8008228 <st_wake_up+0x64>)
  {
	  SetStepperDisableBit();
 80081c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80081cc:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
	  SetStepperDisableBit();
 80081d0:	4816      	ldr	r0, [pc, #88]	; (800822c <st_wake_up+0x68>)
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) 
 80081d2:	075b      	lsls	r3, r3, #29
 80081d4:	d425      	bmi.n	8008222 <st_wake_up+0x5e>
  }
  else 
  { 
	  ResetStepperDisableBit();
 80081d6:	f7f9 fad3 	bl	8001780 <GPIO_ResetBits>
#ifdef WIN32
  nTimer1Out = 1;
#endif
#if defined (STM32F103C8)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 80081da:	2401      	movs	r4, #1
  TIM3->SR = ~TIM_SR_UIF;
 80081dc:	f64f 77fe 	movw	r7, #65534	; 0xfffe

  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80081e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 80081e4:	4b12      	ldr	r3, [pc, #72]	; (8008230 <st_wake_up+0x6c>)
 80081e6:	4813      	ldr	r0, [pc, #76]	; (8008234 <st_wake_up+0x70>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80081ee:	fba0 0202 	umull	r0, r2, r0, r2
 80081f2:	0c92      	lsrs	r2, r2, #18
 80081f4:	fb03 f302 	mul.w	r3, r3, r2
  st.step_outbits = step_port_invert_mask;
 80081f8:	480f      	ldr	r0, [pc, #60]	; (8008238 <st_wake_up+0x74>)
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 80081fa:	4a10      	ldr	r2, [pc, #64]	; (800823c <st_wake_up+0x78>)
  st.step_outbits = step_port_invert_mask;
 80081fc:	4d10      	ldr	r5, [pc, #64]	; (8008240 <st_wake_up+0x7c>)
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 80081fe:	6b86      	ldr	r6, [r0, #56]	; 0x38
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 8008200:	b29b      	uxth	r3, r3
  st.step_outbits = step_port_invert_mask;
 8008202:	882d      	ldrh	r5, [r5, #0]
  TIM3->ARR = st.step_pulse_time; // don't subtract 1!
 8008204:	8593      	strh	r3, [r2, #44]	; 0x2c
  TIM3->EGR = TIM_PSCReloadMode_Immediate;
 8008206:	8294      	strh	r4, [r2, #20]
  TIM3->SR = ~TIM_SR_UIF;
 8008208:	8217      	strh	r7, [r2, #16]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800820a:	8872      	ldrh	r2, [r6, #2]
  	st.step_pulse_time = (settings.pulse_microseconds)*TICKS_PER_MICROSECOND;
 800820c:	82c3      	strh	r3, [r0, #22]
  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800820e:	1e53      	subs	r3, r2, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	858b      	strh	r3, [r1, #44]	; 0x2c
  /* Set the Autoreload value */
#ifndef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING        
  TIM2->PSC = st.exec_segment->prescaler;
#endif
  TIM2->EGR = TIM_PSCReloadMode_Immediate;
 8008214:	828c      	strh	r4, [r1, #20]
  TIM2->CR1 |= TIM_CR1_CEN;
 8008216:	880b      	ldrh	r3, [r1, #0]
  st.step_outbits = step_port_invert_mask;
 8008218:	8305      	strh	r5, [r0, #24]
  TIM2->CR1 |= TIM_CR1_CEN;
 800821a:	b29b      	uxth	r3, r3
 800821c:	4323      	orrs	r3, r4
 800821e:	800b      	strh	r3, [r1, #0]
 8008220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  SetStepperDisableBit();
 8008222:	f7f9 faab 	bl	800177c <GPIO_SetBits>
 8008226:	e7d8      	b.n	80081da <st_wake_up+0x16>
 8008228:	2000134c 	.word	0x2000134c
 800822c:	40010800 	.word	0x40010800
 8008230:	20000018 	.word	0x20000018
 8008234:	431bde83 	.word	0x431bde83
 8008238:	20000b88 	.word	0x20000b88
 800823c:	40000400 	.word	0x40000400
 8008240:	20000cc4 	.word	0x20000cc4

08008244 <st_go_idle>:
#endif
#ifdef WIN32
  nTimer1Out = 0;
#endif
#ifdef STM32F103C8
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008248:	2100      	movs	r1, #0
{
 800824a:	b538      	push	{r3, r4, r5, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800824c:	8813      	ldrh	r3, [r2, #0]

  busy = false;

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800824e:	4c18      	ldr	r4, [pc, #96]	; (80082b0 <st_go_idle+0x6c>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008250:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008254:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008258:	041b      	lsls	r3, r3, #16
  busy = false;
 800825a:	4d16      	ldr	r5, [pc, #88]	; (80082b4 <st_go_idle+0x70>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800825c:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800825e:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008260:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 8008262:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8008264:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008266:	d00e      	beq.n	8008286 <st_go_idle+0x42>
 8008268:	4b13      	ldr	r3, [pc, #76]	; (80082b8 <st_go_idle+0x74>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b04      	cmp	r3, #4
 800826e:	d112      	bne.n	8008296 <st_go_idle+0x52>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008270:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8008274:	075b      	lsls	r3, r3, #29
 8008276:	d414      	bmi.n	80082a2 <st_go_idle+0x5e>
  else 
  { 
	  ResetStepperDisableBit();
  }
  #endif
}
 8008278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  ResetStepperDisableBit();
 800827c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008280:	480e      	ldr	r0, [pc, #56]	; (80082bc <st_go_idle+0x78>)
 8008282:	f7f9 ba7d 	b.w	8001780 <GPIO_ResetBits>
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008286:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <st_go_idle+0x7c>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1ec      	bne.n	8008268 <st_go_idle+0x24>
 800828e:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <st_go_idle+0x74>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d1ec      	bne.n	8008270 <st_go_idle+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 8008296:	f7fb ffeb 	bl	8004270 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800829a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800829e:	075a      	lsls	r2, r3, #29
 80082a0:	d4ea      	bmi.n	8008278 <st_go_idle+0x34>
	  SetStepperDisableBit();
 80082a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 80082a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  SetStepperDisableBit();
 80082aa:	4804      	ldr	r0, [pc, #16]	; (80082bc <st_go_idle+0x78>)
 80082ac:	f7f9 ba66 	b.w	800177c <GPIO_SetBits>
 80082b0:	2000134c 	.word	0x2000134c
 80082b4:	20000af4 	.word	0x20000af4
 80082b8:	20001188 	.word	0x20001188
 80082bc:	40010800 	.word	0x40010800
 80082c0:	200011c8 	.word	0x200011c8

080082c4 <TIM2_IRQHandler>:
#ifdef WIN32
void Timer1Proc()
#endif
{
#ifdef STM32F103C8
	if ((TIM2->SR & TIM_SR_UIF) != 0)                  // check interrupt source
 80082c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082c8:	8a1a      	ldrh	r2, [r3, #16]
 80082ca:	07d2      	lsls	r2, r2, #31
 80082cc:	f140 80af 	bpl.w	800842e <TIM2_IRQHandler+0x16a>
	{
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
		TIM2->CNT = 0;
 80082d0:	2200      	movs	r2, #0
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80082d2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
{
 80082d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		return;
	}
#endif

  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80082da:	4d9c      	ldr	r5, [pc, #624]	; (800854c <TIM2_IRQHandler+0x288>)
		TIM2->SR = ~TIM_SR_UIF; // clear UIF flag
 80082dc:	8219      	strh	r1, [r3, #16]
		TIM2->CNT = 0;
 80082de:	849a      	strh	r2, [r3, #36]	; 0x24
  if (busy) {return; } // The busy-flag is used to avoid reentering this interrupt
 80082e0:	782a      	ldrb	r2, [r5, #0]
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	f040 80a1 	bne.w	800842a <TIM2_IRQHandler+0x166>
  // Set the direction pins a couple of nanoseconds before we step the steppers
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK);
#endif
#ifdef STM32F103C8
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80082e8:	f241 02f0 	movw	r2, #4336	; 0x10f0
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 80082ec:	f64f 77fc 	movw	r7, #65532	; 0xfffc
  nTimer0Out = st.step_pulse_time;
#endif
#ifdef STM32F103C8
  TIM3->CR1 |= TIM_CR1_CEN;
#endif
  busy = true;
 80082f0:	2001      	movs	r0, #1
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 80082f2:	4e97      	ldr	r6, [pc, #604]	; (8008550 <TIM2_IRQHandler+0x28c>)
 80082f4:	4c97      	ldr	r4, [pc, #604]	; (8008554 <TIM2_IRQHandler+0x290>)
 80082f6:	68f1      	ldr	r1, [r6, #12]
 80082f8:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 80082fc:	f421 5187 	bic.w	r1, r1, #4320	; 0x10e0
 8008300:	f021 0110 	bic.w	r1, r1, #16
 8008304:	ea02 020e 	and.w	r2, r2, lr
 8008308:	430a      	orrs	r2, r1
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800830a:	4993      	ldr	r1, [pc, #588]	; (8008558 <TIM2_IRQHandler+0x294>)
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (st.dir_outbits & DIRECTION_MASK));
 800830c:	60f2      	str	r2, [r6, #12]
  TIM3->SR = ~( TIM_SR_UIF | TIM_SR_CC1IF);
 800830e:	820f      	strh	r7, [r1, #16]
      STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_outbits);
 8008310:	68f2      	ldr	r2, [r6, #12]
 8008312:	8b27      	ldrh	r7, [r4, #24]
 8008314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008318:	f022 020f 	bic.w	r2, r2, #15
 800831c:	433a      	orrs	r2, r7
 800831e:	60f2      	str	r2, [r6, #12]
  TIM3->CR1 |= TIM_CR1_CEN;
 8008320:	880a      	ldrh	r2, [r1, #0]
  sei(); // Re-enable interrupts to allow Stepper Port Reset Interrupt to fire on-time.
         // NOTE: The remaining code in this ISR will finish before returning to main program.
#endif

  // If there is no step segment, attempt to pop one from the stepper buffer
  if (st.exec_segment == NULL) {
 8008322:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  TIM3->CR1 |= TIM_CR1_CEN;
 8008324:	b292      	uxth	r2, r2
 8008326:	4302      	orrs	r2, r0
 8008328:	800a      	strh	r2, [r1, #0]
  busy = true;
 800832a:	7028      	strb	r0, [r5, #0]
  if (st.exec_segment == NULL) {
 800832c:	2e00      	cmp	r6, #0
 800832e:	f000 8099 	beq.w	8008464 <TIM2_IRQHandler+0x1a0>
    }
  }


  // Check probing state.
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 8008332:	4b8a      	ldr	r3, [pc, #552]	; (800855c <TIM2_IRQHandler+0x298>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b01      	cmp	r3, #1
 8008338:	f000 80db 	beq.w	80084f2 <TIM2_IRQHandler+0x22e>

  // Reset step out bits.
  st.step_outbits = 0;
 800833c:	2300      	movs	r3, #0
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_x += st.steps[X_AXIS];
  #else
    st.counter_x += st.exec_block->steps[X_AXIS];
  #endif
  if (st.counter_x > st.exec_block->step_event_count) {
 800833e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    st.counter_x += st.steps[X_AXIS];
 8008340:	6821      	ldr	r1, [r4, #0]
 8008342:	69e6      	ldr	r6, [r4, #28]
  if (st.counter_x > st.exec_block->step_event_count) {
 8008344:	6942      	ldr	r2, [r0, #20]
    st.counter_x += st.steps[X_AXIS];
 8008346:	4431      	add	r1, r6
  if (st.counter_x > st.exec_block->step_event_count) {
 8008348:	4291      	cmp	r1, r2
    st.counter_x += st.steps[X_AXIS];
 800834a:	6021      	str	r1, [r4, #0]
  st.step_outbits = 0;
 800834c:	8323      	strh	r3, [r4, #24]
  if (st.counter_x > st.exec_block->step_event_count) {
 800834e:	d86f      	bhi.n	8008430 <TIM2_IRQHandler+0x16c>
 8008350:	2602      	movs	r6, #2
    st.counter_x -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
    else { sys_position[X_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_y += st.steps[Y_AXIS];
 8008352:	6861      	ldr	r1, [r4, #4]
 8008354:	6a27      	ldr	r7, [r4, #32]
 8008356:	4439      	add	r1, r7
  #else
    st.counter_y += st.exec_block->steps[Y_AXIS];
  #endif
  if (st.counter_y > st.exec_block->step_event_count) {
 8008358:	428a      	cmp	r2, r1
    st.counter_y += st.steps[Y_AXIS];
 800835a:	6061      	str	r1, [r4, #4]
  if (st.counter_y > st.exec_block->step_event_count) {
 800835c:	d20a      	bcs.n	8008374 <TIM2_IRQHandler+0xb0>
    st.step_outbits |= (1<<Y_STEP_BIT);
    st.counter_y -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 800835e:	8b03      	ldrh	r3, [r0, #24]
    st.counter_y -= st.exec_block->step_event_count;
 8008360:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008362:	069f      	lsls	r7, r3, #26
    st.counter_y -= st.exec_block->step_event_count;
 8008364:	6061      	str	r1, [r4, #4]
    st.step_outbits |= (1<<Y_STEP_BIT);
 8008366:	8326      	strh	r6, [r4, #24]
    if (st.exec_block->direction_bits & (1<<Y_DIRECTION_BIT)) { sys_position[Y_AXIS]--; }
 8008368:	d576      	bpl.n	8008458 <TIM2_IRQHandler+0x194>
 800836a:	4633      	mov	r3, r6
 800836c:	4f7c      	ldr	r7, [pc, #496]	; (8008560 <TIM2_IRQHandler+0x29c>)
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	3901      	subs	r1, #1
 8008372:	6079      	str	r1, [r7, #4]
    else { sys_position[Y_AXIS]++; }
  }
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_z += st.steps[Z_AXIS];
 8008374:	68a1      	ldr	r1, [r4, #8]
 8008376:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008378:	4431      	add	r1, r6
  #else
    st.counter_z += st.exec_block->steps[Z_AXIS];
  #endif
  if (st.counter_z > st.exec_block->step_event_count) {
 800837a:	428a      	cmp	r2, r1
    st.counter_z += st.steps[Z_AXIS];
 800837c:	60a1      	str	r1, [r4, #8]
  if (st.counter_z > st.exec_block->step_event_count) {
 800837e:	d20f      	bcs.n	80083a0 <TIM2_IRQHandler+0xdc>
    st.step_outbits |= (1<<Z_STEP_BIT);
    st.counter_z -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008380:	8b06      	ldrh	r6, [r0, #24]
    st.counter_z -= st.exec_block->step_event_count;
 8008382:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008384:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008388:	4e75      	ldr	r6, [pc, #468]	; (8008560 <TIM2_IRQHandler+0x29c>)
    st.counter_z -= st.exec_block->step_event_count;
 800838a:	60a1      	str	r1, [r4, #8]
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 800838c:	68b1      	ldr	r1, [r6, #8]
    st.step_outbits |= (1<<Z_STEP_BIT);
 800838e:	f043 0304 	orr.w	r3, r3, #4
 8008392:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<Z_DIRECTION_BIT)) { sys_position[Z_AXIS]--; }
 8008394:	bf14      	ite	ne
 8008396:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    else { sys_position[Z_AXIS]++; }
 800839a:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<Z_STEP_BIT);
 800839c:	8323      	strh	r3, [r4, #24]
    else { sys_position[Z_AXIS]++; }
 800839e:	60b1      	str	r1, [r6, #8]
  }
// --- YSV 22-06-2018
  #if defined(AA_AXIS) || defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_a += st.steps[A_AXIS];
 80083a0:	68e1      	ldr	r1, [r4, #12]
 80083a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083a4:	4431      	add	r1, r6
  #else
    st.counter_a += st.exec_block->steps[A_AXIS];
  #endif
  if (st.counter_a > st.exec_block->step_event_count) {
 80083a6:	428a      	cmp	r2, r1
    st.counter_a += st.steps[A_AXIS];
 80083a8:	60e1      	str	r1, [r4, #12]
  if (st.counter_a > st.exec_block->step_event_count) {
 80083aa:	d20f      	bcs.n	80083cc <TIM2_IRQHandler+0x108>
    st.step_outbits |= (1<<A_STEP_BIT);
    st.counter_a -= st.exec_block->step_event_count;
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80083ac:	8b06      	ldrh	r6, [r0, #24]
    st.counter_a -= st.exec_block->step_event_count;
 80083ae:	1a89      	subs	r1, r1, r2
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80083b0:	f016 0f80 	tst.w	r6, #128	; 0x80
 80083b4:	4e6a      	ldr	r6, [pc, #424]	; (8008560 <TIM2_IRQHandler+0x29c>)
    st.counter_a -= st.exec_block->step_event_count;
 80083b6:	60e1      	str	r1, [r4, #12]
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80083b8:	68f1      	ldr	r1, [r6, #12]
    st.step_outbits |= (1<<A_STEP_BIT);
 80083ba:	f043 0308 	orr.w	r3, r3, #8
 80083be:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<A_DIRECTION_BIT)) { sys_position[A_AXIS]--; }
 80083c0:	bf14      	ite	ne
 80083c2:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    else { sys_position[A_AXIS]++; }
 80083c6:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<A_STEP_BIT);
 80083c8:	8323      	strh	r3, [r4, #24]
    else { sys_position[A_AXIS]++; }
 80083ca:	60f1      	str	r1, [r6, #12]
  }
  #endif
  #if defined(AB_AXIS) || defined(ABC_AXIS)
  #ifdef ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    st.counter_b += st.steps[B_AXIS];
 80083cc:	6921      	ldr	r1, [r4, #16]
 80083ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083d0:	4431      	add	r1, r6
  #else
    st.counter_b += st.exec_block->steps[B_AXIS];
  #endif
  if (st.counter_b > st.exec_block->step_event_count) {
 80083d2:	428a      	cmp	r2, r1
    st.counter_b += st.steps[B_AXIS];
 80083d4:	6121      	str	r1, [r4, #16]
  if (st.counter_b > st.exec_block->step_event_count) {
 80083d6:	d20e      	bcs.n	80083f6 <TIM2_IRQHandler+0x132>
    st.step_outbits |= (1<<B_STEP_BIT);
    st.counter_b -= st.exec_block->step_event_count;
 80083d8:	1a8a      	subs	r2, r1, r2
    if (st.exec_block->direction_bits & (1<<B_DIRECTION_BIT)) { sys_position[B_AXIS]--; }
 80083da:	4961      	ldr	r1, [pc, #388]	; (8008560 <TIM2_IRQHandler+0x29c>)
 80083dc:	8b00      	ldrh	r0, [r0, #24]
    st.counter_b -= st.exec_block->step_event_count;
 80083de:	6122      	str	r2, [r4, #16]
    if (st.exec_block->direction_bits & (1<<B_DIRECTION_BIT)) { sys_position[B_AXIS]--; }
 80083e0:	690a      	ldr	r2, [r1, #16]
 80083e2:	04c0      	lsls	r0, r0, #19
    st.step_outbits |= (1<<B_STEP_BIT);
 80083e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083e8:	b29b      	uxth	r3, r3
    if (st.exec_block->direction_bits & (1<<B_DIRECTION_BIT)) { sys_position[B_AXIS]--; }
 80083ea:	bf4c      	ite	mi
 80083ec:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
    else { sys_position[B_AXIS]++; }
 80083f0:	3201      	addpl	r2, #1
    st.step_outbits |= (1<<B_STEP_BIT);
 80083f2:	8323      	strh	r3, [r4, #24]
    else { sys_position[B_AXIS]++; }
 80083f4:	610a      	str	r2, [r1, #16]
    else { sys_position[C_AXIS]++; }
  }
  #endif
// ---
  // During a homing cycle, lock out and prevent desired axes from moving.
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 80083f6:	4a5b      	ldr	r2, [pc, #364]	; (8008564 <TIM2_IRQHandler+0x2a0>)
 80083f8:	7811      	ldrb	r1, [r2, #0]
 80083fa:	2904      	cmp	r1, #4
 80083fc:	d028      	beq.n	8008450 <TIM2_IRQHandler+0x18c>

  st.step_count--; // Decrement step events count
 80083fe:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8008400:	3a01      	subs	r2, #1
 8008402:	b292      	uxth	r2, r2
 8008404:	8622      	strh	r2, [r4, #48]	; 0x30
  if (st.step_count == 0) {
 8008406:	b942      	cbnz	r2, 800841a <TIM2_IRQHandler+0x156>
    // Segment is complete. Discard current segment and advance segment indexing.
    st.exec_segment = NULL;
#ifndef WIN32
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 8008408:	4957      	ldr	r1, [pc, #348]	; (8008568 <TIM2_IRQHandler+0x2a4>)
    st.exec_segment = NULL;
 800840a:	63a2      	str	r2, [r4, #56]	; 0x38
	uint8_t segment_tail_next = segment_buffer_tail + 1;
 800840c:	780a      	ldrb	r2, [r1, #0]
 800840e:	3201      	adds	r2, #1
 8008410:	b2d2      	uxtb	r2, r2
	if (segment_tail_next == SEGMENT_BUFFER_SIZE)
		segment_tail_next = 0;
 8008412:	2a0a      	cmp	r2, #10
 8008414:	bf08      	it	eq
 8008416:	2200      	moveq	r2, #0
	segment_buffer_tail = segment_tail_next;
 8008418:	700a      	strb	r2, [r1, #0]
	}
#endif
  }

  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  busy = false;
 800841a:	2100      	movs	r1, #0
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 800841c:	4a53      	ldr	r2, [pc, #332]	; (800856c <TIM2_IRQHandler+0x2a8>)
  busy = false;
 800841e:	7029      	strb	r1, [r5, #0]
  st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
 8008420:	8812      	ldrh	r2, [r2, #0]
 8008422:	4053      	eors	r3, r2
 8008424:	8323      	strh	r3, [r4, #24]
 8008426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800842a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800842e:	4770      	bx	lr
    st.step_outbits |= (1<<X_STEP_BIT);
 8008430:	2301      	movs	r3, #1
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 8008432:	4f4b      	ldr	r7, [pc, #300]	; (8008560 <TIM2_IRQHandler+0x29c>)
 8008434:	8b06      	ldrh	r6, [r0, #24]
    st.counter_x -= st.exec_block->step_event_count;
 8008436:	1a89      	subs	r1, r1, r2
 8008438:	6021      	str	r1, [r4, #0]
    if (st.exec_block->direction_bits & (1<<X_DIRECTION_BIT)) { sys_position[X_AXIS]--; }
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	f016 0f10 	tst.w	r6, #16
 8008440:	bf14      	ite	ne
 8008442:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    else { sys_position[X_AXIS]++; }
 8008446:	3101      	addeq	r1, #1
    st.step_outbits |= (1<<X_STEP_BIT);
 8008448:	8323      	strh	r3, [r4, #24]
 800844a:	2603      	movs	r6, #3
    else { sys_position[X_AXIS]++; }
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	e780      	b.n	8008352 <TIM2_IRQHandler+0x8e>
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8008450:	88d2      	ldrh	r2, [r2, #6]
 8008452:	4013      	ands	r3, r2
 8008454:	8323      	strh	r3, [r4, #24]
 8008456:	e7d2      	b.n	80083fe <TIM2_IRQHandler+0x13a>
    else { sys_position[Y_AXIS]++; }
 8008458:	4633      	mov	r3, r6
 800845a:	4e41      	ldr	r6, [pc, #260]	; (8008560 <TIM2_IRQHandler+0x29c>)
 800845c:	6871      	ldr	r1, [r6, #4]
 800845e:	3101      	adds	r1, #1
 8008460:	6071      	str	r1, [r6, #4]
 8008462:	e787      	b.n	8008374 <TIM2_IRQHandler+0xb0>
    if (segment_buffer_head != segment_buffer_tail) {
 8008464:	4a40      	ldr	r2, [pc, #256]	; (8008568 <TIM2_IRQHandler+0x2a4>)
 8008466:	4842      	ldr	r0, [pc, #264]	; (8008570 <TIM2_IRQHandler+0x2ac>)
 8008468:	7811      	ldrb	r1, [r2, #0]
 800846a:	7800      	ldrb	r0, [r0, #0]
 800846c:	4288      	cmp	r0, r1
 800846e:	d043      	beq.n	80084f8 <TIM2_IRQHandler+0x234>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8008470:	7810      	ldrb	r0, [r2, #0]
 8008472:	4a40      	ldr	r2, [pc, #256]	; (8008574 <TIM2_IRQHandler+0x2b0>)
 8008474:	b2c0      	uxtb	r0, r0
 8008476:	00c7      	lsls	r7, r0, #3
 8008478:	19d6      	adds	r6, r2, r7
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800847a:	8871      	ldrh	r1, [r6, #2]
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 800847c:	63a6      	str	r6, [r4, #56]	; 0x38
	  TIM2->ARR = st.exec_segment->cycles_per_tick - 1;
 800847e:	3901      	subs	r1, #1
 8008480:	b289      	uxth	r1, r1
 8008482:	8599      	strh	r1, [r3, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8008484:	f832 1030 	ldrh.w	r1, [r2, r0, lsl #3]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8008488:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800848c:	7930      	ldrb	r0, [r6, #4]
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 800848e:	8621      	strh	r1, [r4, #48]	; 0x30
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8008490:	4283      	cmp	r3, r0
 8008492:	d058      	beq.n	8008546 <TIM2_IRQHandler+0x282>
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8008494:	4b38      	ldr	r3, [pc, #224]	; (8008578 <TIM2_IRQHandler+0x2b4>)
 8008496:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 800849a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
 800849e:	6959      	ldr	r1, [r3, #20]
        st.exec_block_index = st.exec_segment->st_block_index;
 80084a0:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
 80084a4:	0849      	lsrs	r1, r1, #1
        st.exec_block = &st_block_buffer[st.exec_block_index];
 80084a6:	6363      	str	r3, [r4, #52]	; 0x34
        st.counter_x = st.counter_y = st.counter_z = st.counter_a = st.counter_b = (st.exec_block->step_event_count >> 1);
 80084a8:	6121      	str	r1, [r4, #16]
 80084aa:	60e1      	str	r1, [r4, #12]
 80084ac:	60a1      	str	r1, [r4, #8]
 80084ae:	6061      	str	r1, [r4, #4]
 80084b0:	6021      	str	r1, [r4, #0]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80084b2:	443a      	add	r2, r7
 80084b4:	681e      	ldr	r6, [r3, #0]
 80084b6:	7951      	ldrb	r1, [r2, #5]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80084b8:	4830      	ldr	r0, [pc, #192]	; (800857c <TIM2_IRQHandler+0x2b8>)
 80084ba:	f8b3 8018 	ldrh.w	r8, [r3, #24]
 80084be:	f8b0 e000 	ldrh.w	lr, [r0]
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80084c2:	88d0      	ldrh	r0, [r2, #6]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80084c4:	fa26 f201 	lsr.w	r2, r6, r1
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80084c8:	685f      	ldr	r7, [r3, #4]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80084ca:	689e      	ldr	r6, [r3, #8]
        st.steps[X_AXIS] = st.exec_block->steps[X_AXIS] >> st.exec_segment->amass_level;
 80084cc:	61e2      	str	r2, [r4, #28]
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80084ce:	68da      	ldr	r2, [r3, #12]
		st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 80084d0:	691b      	ldr	r3, [r3, #16]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80084d2:	40cf      	lsrs	r7, r1
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80084d4:	40ce      	lsrs	r6, r1
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80084d6:	40ca      	lsrs	r2, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80084d8:	ea88 0e0e 	eor.w	lr, r8, lr
		st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 80084dc:	fa23 f101 	lsr.w	r1, r3, r1
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 80084e0:	f8a4 e01a 	strh.w	lr, [r4, #26]
        st.steps[Y_AXIS] = st.exec_block->steps[Y_AXIS] >> st.exec_segment->amass_level;
 80084e4:	6227      	str	r7, [r4, #32]
        st.steps[Z_AXIS] = st.exec_block->steps[Z_AXIS] >> st.exec_segment->amass_level;
 80084e6:	6266      	str	r6, [r4, #36]	; 0x24
		st.steps[A_AXIS] = st.exec_block->steps[A_AXIS] >> st.exec_segment->amass_level;
 80084e8:	62a2      	str	r2, [r4, #40]	; 0x28
		st.steps[B_AXIS] = st.exec_block->steps[B_AXIS] >> st.exec_segment->amass_level;
 80084ea:	62e1      	str	r1, [r4, #44]	; 0x2c
        spindle_set_speed(st.exec_segment->spindle_pwm);
 80084ec:	f7ff fcda 	bl	8007ea4 <spindle_set_speed>
 80084f0:	e71f      	b.n	8008332 <TIM2_IRQHandler+0x6e>
  if (sys_probe_state == PROBE_ACTIVE) { probe_state_monitor(); }
 80084f2:	f7fc ff53 	bl	800539c <probe_state_monitor>
 80084f6:	e721      	b.n	800833c <TIM2_IRQHandler+0x78>
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084f8:	881a      	ldrh	r2, [r3, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 80084fa:	4f21      	ldr	r7, [pc, #132]	; (8008580 <TIM2_IRQHandler+0x2bc>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 80084fc:	f022 0201 	bic.w	r2, r2, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008500:	f897 0056 	ldrb.w	r0, [r7, #86]	; 0x56
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008504:	0412      	lsls	r2, r2, #16
 8008506:	0c12      	lsrs	r2, r2, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008508:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800850a:	801a      	strh	r2, [r3, #0]
  TIM2->CNT = 0;
 800850c:	849e      	strh	r6, [r3, #36]	; 0x24
  busy = false;
 800850e:	702e      	strb	r6, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008510:	d038      	beq.n	8008584 <TIM2_IRQHandler+0x2c0>
 8008512:	4b14      	ldr	r3, [pc, #80]	; (8008564 <TIM2_IRQHandler+0x2a0>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	2b04      	cmp	r3, #4
 8008518:	d03c      	beq.n	8008594 <TIM2_IRQHandler+0x2d0>
    delay_ms(settings.stepper_idle_lock_time);
 800851a:	f7fb fea9 	bl	8004270 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800851e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8008522:	075b      	lsls	r3, r3, #29
 8008524:	d53a      	bpl.n	800859c <TIM2_IRQHandler+0x2d8>
	  ResetStepperDisableBit();
 8008526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800852a:	4809      	ldr	r0, [pc, #36]	; (8008550 <TIM2_IRQHandler+0x28c>)
 800852c:	f7f9 f928 	bl	8001780 <GPIO_ResetBits>
      if (st.exec_block->is_pwm_rate_adjusted) { spindle_set_speed(SPINDLE_PWM_OFF_VALUE); }
 8008530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008532:	7e9b      	ldrb	r3, [r3, #26]
 8008534:	b113      	cbz	r3, 800853c <TIM2_IRQHandler+0x278>
 8008536:	2000      	movs	r0, #0
 8008538:	f7ff fcb4 	bl	8007ea4 <spindle_set_speed>
}
 800853c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8008540:	2004      	movs	r0, #4
 8008542:	f001 bac1 	b.w	8009ac8 <system_set_exec_state_flag>
 8008546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008548:	e7b3      	b.n	80084b2 <TIM2_IRQHandler+0x1ee>
 800854a:	bf00      	nop
 800854c:	20000af4 	.word	0x20000af4
 8008550:	40010800 	.word	0x40010800
 8008554:	20000b88 	.word	0x20000b88
 8008558:	40000400 	.word	0x40000400
 800855c:	2000119e 	.word	0x2000119e
 8008560:	200011b4 	.word	0x200011b4
 8008564:	20001188 	.word	0x20001188
 8008568:	20000b85 	.word	0x20000b85
 800856c:	20000cc4 	.word	0x20000cc4
 8008570:	20000b84 	.word	0x20000b84
 8008574:	20000b34 	.word	0x20000b34
 8008578:	20000bc4 	.word	0x20000bc4
 800857c:	20000af6 	.word	0x20000af6
 8008580:	2000134c 	.word	0x2000134c
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008584:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <TIM2_IRQHandler+0x2e4>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1c2      	bne.n	8008512 <TIM2_IRQHandler+0x24e>
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <TIM2_IRQHandler+0x2e8>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b80      	cmp	r3, #128	; 0x80
 8008592:	d0c2      	beq.n	800851a <TIM2_IRQHandler+0x256>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8008594:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8008598:	075b      	lsls	r3, r3, #29
 800859a:	d5c4      	bpl.n	8008526 <TIM2_IRQHandler+0x262>
	  SetStepperDisableBit();
 800859c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085a0:	4803      	ldr	r0, [pc, #12]	; (80085b0 <TIM2_IRQHandler+0x2ec>)
 80085a2:	f7f9 f8eb 	bl	800177c <GPIO_SetBits>
 80085a6:	e7c3      	b.n	8008530 <TIM2_IRQHandler+0x26c>
 80085a8:	200011c8 	.word	0x200011c8
 80085ac:	20001188 	.word	0x20001188
 80085b0:	40010800 	.word	0x40010800

080085b4 <TIM3_IRQHandler>:
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | st.step_bits); // Begin step pulse.
		TIM3->SR = ~TIM_SR_CC1IF; // clear CC1IF flag
	} else
#endif
	{
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80085b4:	f640 030f 	movw	r3, #2063	; 0x80f
{
 80085b8:	b430      	push	{r4, r5}
		TIM3->CR1 &= ~TIM_CR1_CEN;
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
		TIM3->CNT = 0;
 80085ba:	2000      	movs	r0, #0
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80085bc:	f64f 74fc 	movw	r4, #65532	; 0xfffc
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80085c0:	490a      	ldr	r1, [pc, #40]	; (80085ec <TIM3_IRQHandler+0x38>)
 80085c2:	4d0b      	ldr	r5, [pc, #44]	; (80085f0 <TIM3_IRQHandler+0x3c>)
 80085c4:	68ca      	ldr	r2, [r1, #12]
 80085c6:	882d      	ldrh	r5, [r5, #0]
 80085c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085cc:	f022 020f 	bic.w	r2, r2, #15
 80085d0:	402b      	ands	r3, r5
 80085d2:	4313      	orrs	r3, r2
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80085d4:	4a07      	ldr	r2, [pc, #28]	; (80085f4 <TIM3_IRQHandler+0x40>)
		STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 80085d6:	60cb      	str	r3, [r1, #12]
		TIM3->CR1 &= ~TIM_CR1_CEN;
 80085d8:	8813      	ldrh	r3, [r2, #0]
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	041b      	lsls	r3, r3, #16
 80085e0:	0c1b      	lsrs	r3, r3, #16
 80085e2:	8013      	strh	r3, [r2, #0]
		TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF flag
 80085e4:	8214      	strh	r4, [r2, #16]
		TIM3->CNT = 0;
 80085e6:	8490      	strh	r0, [r2, #36]	; 0x24
  TCCR0B = 0; // Disable Timer0 to prevent re-entering this interrupt when it's not needed.
#endif
#ifdef WIN32
  nTimer0Out = 0;
#endif
}
 80085e8:	bc30      	pop	{r4, r5}
 80085ea:	4770      	bx	lr
 80085ec:	40010800 	.word	0x40010800
 80085f0:	20000cc4 	.word	0x20000cc4
 80085f4:	40000400 	.word	0x40000400

080085f8 <st_generate_step_dir_invert_masks>:



// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 80085f8:	4b1b      	ldr	r3, [pc, #108]	; (8008668 <st_generate_step_dir_invert_masks+0x70>)
 80085fa:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 80085fe:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
  uint8_t idx;
  step_port_invert_mask = 0;
  dir_port_invert_mask = 0;
  for (idx=0; idx<N_AXIS; idx++) {
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008602:	f011 0f01 	tst.w	r1, #1
 8008606:	bf14      	ite	ne
 8008608:	2310      	movne	r3, #16
 800860a:	2300      	moveq	r3, #0
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800860c:	f000 0201 	and.w	r2, r0, #1
 8008610:	f010 0f02 	tst.w	r0, #2
 8008614:	bf18      	it	ne
 8008616:	f042 0202 	orrne.w	r2, r2, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800861a:	f011 0f02 	tst.w	r1, #2
 800861e:	bf18      	it	ne
 8008620:	f043 0320 	orrne.w	r3, r3, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008624:	f010 0f04 	tst.w	r0, #4
 8008628:	bf18      	it	ne
 800862a:	f042 0204 	orrne.w	r2, r2, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800862e:	f011 0f04 	tst.w	r1, #4
 8008632:	bf18      	it	ne
 8008634:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008638:	f010 0f08 	tst.w	r0, #8
 800863c:	bf18      	it	ne
 800863e:	f042 0208 	orrne.w	r2, r2, #8
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008642:	f011 0f08 	tst.w	r1, #8
 8008646:	bf18      	it	ne
 8008648:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 800864c:	06c0      	lsls	r0, r0, #27
 800864e:	bf48      	it	mi
 8008650:	f442 6200 	orrmi.w	r2, r2, #2048	; 0x800
 8008654:	4805      	ldr	r0, [pc, #20]	; (800866c <st_generate_step_dir_invert_masks+0x74>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008656:	06c9      	lsls	r1, r1, #27
 8008658:	4905      	ldr	r1, [pc, #20]	; (8008670 <st_generate_step_dir_invert_masks+0x78>)
 800865a:	bf48      	it	mi
 800865c:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8008660:	8002      	strh	r2, [r0, #0]
 8008662:	800b      	strh	r3, [r1, #0]
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	2000134c 	.word	0x2000134c
 800866c:	20000cc4 	.word	0x20000cc4
 8008670:	20000af6 	.word	0x20000af6

08008674 <st_reset>:
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM2->CNT = 0;
 8008678:	2100      	movs	r1, #0
}


// Reset and clear stepper subsystem variables
void st_reset()
{
 800867a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800867c:	8813      	ldrh	r3, [r2, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800867e:	4c49      	ldr	r4, [pc, #292]	; (80087a4 <st_reset+0x130>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008680:	f023 0301 	bic.w	r3, r3, #1
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008684:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008688:	041b      	lsls	r3, r3, #16
  busy = false;
 800868a:	4d47      	ldr	r5, [pc, #284]	; (80087a8 <st_reset+0x134>)
  TIM2->CR1 &= ~TIM_CR1_CEN;
 800868c:	0c1b      	lsrs	r3, r3, #16
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800868e:	28ff      	cmp	r0, #255	; 0xff
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8008690:	8013      	strh	r3, [r2, #0]
  TIM2->CNT = 0;
 8008692:	8491      	strh	r1, [r2, #36]	; 0x24
  busy = false;
 8008694:	7029      	strb	r1, [r5, #0]
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8008696:	d070      	beq.n	800877a <st_reset+0x106>
 8008698:	4b44      	ldr	r3, [pc, #272]	; (80087ac <st_reset+0x138>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b04      	cmp	r3, #4
 800869e:	d174      	bne.n	800878a <st_reset+0x116>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 80086a0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80086a4:	075b      	lsls	r3, r3, #29
 80086a6:	d476      	bmi.n	8008796 <st_reset+0x122>
	  ResetStepperDisableBit();
 80086a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086ac:	4840      	ldr	r0, [pc, #256]	; (80087b0 <st_reset+0x13c>)
 80086ae:	f7f9 f867 	bl	8001780 <GPIO_ResetBits>
  // Initialize stepper driver idle state.
  st_go_idle();
  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 80086b2:	2238      	movs	r2, #56	; 0x38
 80086b4:	2100      	movs	r1, #0
 80086b6:	483f      	ldr	r0, [pc, #252]	; (80087b4 <st_reset+0x140>)
 80086b8:	f002 fc45 	bl	800af46 <memset>
  memset(&st, 0, sizeof(stepper_t));
 80086bc:	223c      	movs	r2, #60	; 0x3c
 80086be:	2100      	movs	r1, #0
 80086c0:	483d      	ldr	r0, [pc, #244]	; (80087b8 <st_reset+0x144>)
 80086c2:	f002 fc40 	bl	800af46 <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80086c6:	2100      	movs	r1, #0
 80086c8:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
  segment_buffer_tail = 0;
  segment_buffer_head = 0; // empty = tail
  segment_next_head = 1;
 80086cc:	2601      	movs	r6, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80086ce:	4f3b      	ldr	r7, [pc, #236]	; (80087bc <st_reset+0x148>)
  segment_buffer_head = 0; // empty = tail
 80086d0:	483b      	ldr	r0, [pc, #236]	; (80087c0 <st_reset+0x14c>)
  segment_buffer_tail = 0;
 80086d2:	f8df e104 	ldr.w	lr, [pc, #260]	; 80087d8 <st_reset+0x164>
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80086d6:	f013 0f01 	tst.w	r3, #1
  pl_block = NULL;  // Planner block pointer used by segment buffer
 80086da:	6039      	str	r1, [r7, #0]
  segment_buffer_tail = 0;
 80086dc:	f88e 1000 	strb.w	r1, [lr]
  segment_buffer_head = 0; // empty = tail
 80086e0:	7001      	strb	r1, [r0, #0]
  busy = false;
 80086e2:	7029      	strb	r1, [r5, #0]
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80086e4:	bf18      	it	ne
 80086e6:	2110      	movne	r1, #16
 80086e8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
  segment_next_head = 1;
 80086ec:	4c35      	ldr	r4, [pc, #212]	; (80087c4 <st_reset+0x150>)
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80086ee:	ea02 0006 	and.w	r0, r2, r6
  segment_next_head = 1;
 80086f2:	7026      	strb	r6, [r4, #0]
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 80086f4:	0794      	lsls	r4, r2, #30
 80086f6:	bf48      	it	mi
 80086f8:	f040 0002 	orrmi.w	r0, r0, #2
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 80086fc:	079f      	lsls	r7, r3, #30
 80086fe:	bf48      	it	mi
 8008700:	f041 0120 	orrmi.w	r1, r1, #32
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008704:	0756      	lsls	r6, r2, #29
 8008706:	bf48      	it	mi
 8008708:	f040 0004 	orrmi.w	r0, r0, #4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800870c:	075d      	lsls	r5, r3, #29
 800870e:	bf48      	it	mi
 8008710:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008714:	0714      	lsls	r4, r2, #28
 8008716:	bf48      	it	mi
 8008718:	f040 0008 	orrmi.w	r0, r0, #8
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800871c:	071f      	lsls	r7, r3, #28
 800871e:	bf48      	it	mi
 8008720:	f041 0180 	orrmi.w	r1, r1, #128	; 0x80
    if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= step_pin_mask[idx]; }
 8008724:	06d6      	lsls	r6, r2, #27
 8008726:	bf48      	it	mi
 8008728:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
 800872c:	4c26      	ldr	r4, [pc, #152]	; (80087c8 <st_reset+0x154>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 800872e:	06dd      	lsls	r5, r3, #27
 8008730:	4d26      	ldr	r5, [pc, #152]	; (80087cc <st_reset+0x158>)

  st_generate_step_dir_invert_masks();
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8008732:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <st_reset+0x144>)
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= direction_pin_mask[idx]; }
 8008734:	bf48      	it	mi
 8008736:	f441 5180 	orrmi.w	r1, r1, #4096	; 0x1000
#ifdef AVRTARGET
  STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
  DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
#endif
#ifdef STM32F103C8
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 800873a:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <st_reset+0x15c>)
 800873c:	8028      	strh	r0, [r5, #0]
 800873e:	8021      	strh	r1, [r4, #0]
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8008740:	8359      	strh	r1, [r3, #26]
  while(TIM3->CR1 & TIM_CR1_CEN); // wait for end of tim3 work to prevent cutoff last step pulse
 8008742:	8813      	ldrh	r3, [r2, #0]
 8008744:	07dc      	lsls	r4, r3, #31
 8008746:	d4fc      	bmi.n	8008742 <st_reset+0xce>
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER &= ~TIM_DIER_CC1IE; //compare interrupt disable
//#endif
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008748:	f64f 73fc 	movw	r3, #65532	; 0xfffc
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 800874c:	f640 060f 	movw	r6, #2063	; 0x80f
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8008750:	f241 05f0 	movw	r5, #4336	; 0x10f0
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008754:	4c16      	ldr	r4, [pc, #88]	; (80087b0 <st_reset+0x13c>)
  TIM3->SR = ~(TIM_SR_UIF | TIM_SR_CC1IF); // clear UIF and CC1IF flags
 8008756:	8213      	strh	r3, [r2, #16]
  STEP_PORT->ODR = ((STEP_PORT->ODR & ~STEP_MASK) | (step_port_invert_mask & STEP_MASK));
 8008758:	68e3      	ldr	r3, [r4, #12]
 800875a:	4030      	ands	r0, r6
 800875c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008760:	f023 030f 	bic.w	r3, r3, #15
 8008764:	4318      	orrs	r0, r3
 8008766:	60e0      	str	r0, [r4, #12]
  DIRECTION_PORT->ODR = ((DIRECTION_PORT->ODR & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
 8008768:	68e3      	ldr	r3, [r4, #12]
 800876a:	4029      	ands	r1, r5
 800876c:	f423 5387 	bic.w	r3, r3, #4320	; 0x10e0
 8008770:	f023 0310 	bic.w	r3, r3, #16
 8008774:	4319      	orrs	r1, r3
 8008776:	60e1      	str	r1, [r4, #12]
  //GPIO_Write(DIRECTION_PORT, (GPIO_ReadOutputData(DIRECTION_PORT) & ~DIRECTION_MASK) | (dir_port_invert_mask & DIRECTION_MASK));
//#ifdef STEP_PULSE_DELAY
//	TIM3->DIER |= TIM_DIER_CC1IE; //compare interrupt enable
//#endif
#endif
}
 8008778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 800877a:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <st_reset+0x160>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d18a      	bne.n	8008698 <st_reset+0x24>
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <st_reset+0x138>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d18a      	bne.n	80086a0 <st_reset+0x2c>
    delay_ms(settings.stepper_idle_lock_time);
 800878a:	f7fb fd71 	bl	8004270 <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 800878e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8008792:	075e      	lsls	r6, r3, #29
 8008794:	d488      	bmi.n	80086a8 <st_reset+0x34>
	  SetStepperDisableBit();
 8008796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800879a:	4805      	ldr	r0, [pc, #20]	; (80087b0 <st_reset+0x13c>)
 800879c:	f7f8 ffee 	bl	800177c <GPIO_SetBits>
 80087a0:	e787      	b.n	80086b2 <st_reset+0x3e>
 80087a2:	bf00      	nop
 80087a4:	2000134c 	.word	0x2000134c
 80087a8:	20000af4 	.word	0x20000af4
 80087ac:	20001188 	.word	0x20001188
 80087b0:	40010800 	.word	0x40010800
 80087b4:	20000afc 	.word	0x20000afc
 80087b8:	20000b88 	.word	0x20000b88
 80087bc:	20000af8 	.word	0x20000af8
 80087c0:	20000b84 	.word	0x20000b84
 80087c4:	20000b86 	.word	0x20000b86
 80087c8:	20000af6 	.word	0x20000af6
 80087cc:	20000cc4 	.word	0x20000cc4
 80087d0:	40000400 	.word	0x40000400
 80087d4:	200011c8 	.word	0x200011c8
 80087d8:	20000b85 	.word	0x20000b85

080087dc <stepper_init>:

#endif

// Initialize and start the stepper motor subsystem
void stepper_init()
{
 80087dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Configure step and direction interface pins
#ifdef STM32F103C8
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80087e0:	2101      	movs	r1, #1
{
 80087e2:	b086      	sub	sp, #24
	RCC_APB2PeriphClockCmd(RCC_STEPPERS_DISABLE_PORT, ENABLE);
 80087e4:	2004      	movs	r0, #4
 80087e6:	f7f9 f86f 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80087ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80087ee:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80087f0:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80087f2:	ad06      	add	r5, sp, #24
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80087f4:	4f53      	ldr	r7, [pc, #332]	; (8008944 <stepper_init+0x168>)
	GPIO_InitStructure.GPIO_Pin = STEPPERS_DISABLE_MASK;
 80087f6:	f825 2d14 	strh.w	r2, [r5, #-20]!
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 80087fa:	4629      	mov	r1, r5
 80087fc:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80087fe:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8008802:	f88d 6007 	strb.w	r6, [sp, #7]
	GPIO_Init(STEPPERS_DISABLE_PORT, &GPIO_InitStructure);
 8008806:	f7f8 fdfb 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_STEP_PORT, ENABLE);
 800880a:	2101      	movs	r1, #1
 800880c:	2004      	movs	r0, #4
 800880e:	f7f9 f85b 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 8008812:	f640 030f 	movw	r3, #2063	; 0x80f
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 8008816:	4629      	mov	r1, r5
 8008818:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = STEP_MASK;
 800881a:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(STEP_PORT, &GPIO_InitStructure);
 800881e:	f7f8 fdef 	bl	8001400 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_DIRECTION_PORT, ENABLE);
 8008822:	2101      	movs	r1, #1
 8008824:	2004      	movs	r0, #4
 8008826:	f7f9 f84f 	bl	80018c8 <RCC_APB2PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 800882a:	f241 03f0 	movw	r3, #4336	; 0x10f0
void TIM_Configuration(TIM_TypeDef* TIMER, u16 Period, u16 Prescaler, u8 PP)
{
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 800882e:	2400      	movs	r4, #0
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008830:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8008958 <stepper_init+0x17c>
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 8008834:	4629      	mov	r1, r5
 8008836:	4638      	mov	r0, r7
	GPIO_InitStructure.GPIO_Pin = DIRECTION_MASK;
 8008838:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(DIRECTION_PORT, &GPIO_InitStructure);
 800883c:	f7f8 fde0 	bl	8001400 <GPIO_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008840:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008844:	a903      	add	r1, sp, #12
	RCC->APB1ENR |= RCC_APB1Periph_TIM2;
 8008846:	f043 0301 	orr.w	r3, r3, #1
 800884a:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 800884e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 8008852:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 8008856:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800885a:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800885e:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 8008862:	f7f9 f83d 	bl	80018e0 <TIM_TimeBaseInit>

	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 8008866:	2101      	movs	r1, #1
 8008868:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800886c:	f7f9 f90e 	bl	8001a8c <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 8008870:	2201      	movs	r2, #1
 8008872:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008876:	4611      	mov	r1, r2
 8008878:	f7f9 f8f6 	bl	8001a68 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 800887c:	2101      	movs	r1, #1
 800887e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008882:	f7f9 f8d3 	bl	8001a2c <TIM_Cmd>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8008886:	f44f 7040 	mov.w	r0, #768	; 0x300
 800888a:	f7f8 fc33 	bl	80010f4 <NVIC_PriorityGroupConfig>
	if (TIMER == TIM2) { NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn; }
 800888e:	4b2e      	ldr	r3, [pc, #184]	; (8008948 <stepper_init+0x16c>)
 8008890:	af06      	add	r7, sp, #24
 8008892:	f847 3d10 	str.w	r3, [r7, #-16]!
	else if (TIMER == TIM4) { NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn; }

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = PP;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8008896:	4638      	mov	r0, r7
 8008898:	f7f8 fc36 	bl	8001108 <NVIC_Init>
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 800889c:	f8d8 301c 	ldr.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80088a0:	4d2a      	ldr	r5, [pc, #168]	; (800894c <stepper_init+0x170>)
	RCC->APB1ENR |= RCC_APB1Periph_TIM3;
 80088a2:	f043 0302 	orr.w	r3, r3, #2
 80088a6:	f8c8 301c 	str.w	r3, [r8, #28]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80088aa:	a903      	add	r1, sp, #12
 80088ac:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_Period = Period - 1;
 80088ae:	f8ad 4010 	strh.w	r4, [sp, #16]
	TIM_TimeBaseStructure.TIM_Prescaler = Prescaler - 1;
 80088b2:	f8ad 400c 	strh.w	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80088b6:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80088ba:	f8ad 400e 	strh.w	r4, [sp, #14]
	TIM_TimeBaseInit(TIMER, &TIM_TimeBaseStructure);
 80088be:	f7f9 f80f 	bl	80018e0 <TIM_TimeBaseInit>
	TIM_ClearITPendingBit(TIMER, TIM_IT_Update);
 80088c2:	4628      	mov	r0, r5
 80088c4:	2101      	movs	r1, #1
 80088c6:	f7f9 f8e1 	bl	8001a8c <TIM_ClearITPendingBit>
	TIM_ITConfig(TIMER, TIM_IT_Update, ENABLE);
 80088ca:	2201      	movs	r2, #1
 80088cc:	4628      	mov	r0, r5
 80088ce:	4611      	mov	r1, r2
 80088d0:	f7f9 f8ca 	bl	8001a68 <TIM_ITConfig>
	TIM_Cmd(TIMER, ENABLE);
 80088d4:	2101      	movs	r1, #1
 80088d6:	4628      	mov	r0, r5
 80088d8:	f7f9 f8a8 	bl	8001a2c <TIM_Cmd>
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80088dc:	f44f 7040 	mov.w	r0, #768	; 0x300
 80088e0:	f7f8 fc08 	bl	80010f4 <NVIC_PriorityGroupConfig>
	NVIC_Init(&NVIC_InitStructure);
 80088e4:	4638      	mov	r0, r7
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80088e6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
	else if (TIMER == TIM3) { NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn; }
 80088ea:	4b19      	ldr	r3, [pc, #100]	; (8008950 <stepper_init+0x174>)
 80088ec:	9302      	str	r3, [sp, #8]
	NVIC_Init(&NVIC_InitStructure);
 80088ee:	f7f8 fc0b 	bl	8001108 <NVIC_Init>
 80088f2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80088f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80088fa:	883b      	ldrh	r3, [r7, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80088fc:	4a15      	ldr	r2, [pc, #84]	; (8008954 <stepper_init+0x178>)
 80088fe:	f023 0301 	bic.w	r3, r3, #1
 8008902:	40b3      	lsls	r3, r6
 8008904:	40f3      	lsrs	r3, r6
 8008906:	803b      	strh	r3, [r7, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8008908:	8a3b      	ldrh	r3, [r7, #16]
 800890a:	f023 0301 	bic.w	r3, r3, #1
 800890e:	40b3      	lsls	r3, r6
 8008910:	40f3      	lsrs	r3, r6
 8008912:	823b      	strh	r3, [r7, #16]
	TIM2->CNT = 0;
 8008914:	84bc      	strh	r4, [r7, #36]	; 0x24
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8008916:	882b      	ldrh	r3, [r5, #0]
 8008918:	f023 0301 	bic.w	r3, r3, #1
 800891c:	40b3      	lsls	r3, r6
 800891e:	40f3      	lsrs	r3, r6
 8008920:	802b      	strh	r3, [r5, #0]
	TIM3->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF);
 8008922:	8a2b      	ldrh	r3, [r5, #16]
 8008924:	f023 0303 	bic.w	r3, r3, #3
 8008928:	40b3      	lsls	r3, r6
 800892a:	40f3      	lsrs	r3, r6
 800892c:	822b      	strh	r3, [r5, #16]
	TIM3->CNT = 0;
 800892e:	84ac      	strh	r4, [r5, #36]	; 0x24
 8008930:	f882 431d 	strb.w	r4, [r2, #797]	; 0x31d
 8008934:	f882 631c 	strb.w	r6, [r2, #796]	; 0x31c
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8008938:	6010      	str	r0, [r2, #0]
 800893a:	6011      	str	r1, [r2, #0]
}
 800893c:	b006      	add	sp, #24
 800893e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008942:	bf00      	nop
 8008944:	40010800 	.word	0x40010800
 8008948:	0101011c 	.word	0x0101011c
 800894c:	40000400 	.word	0x40000400
 8008950:	0101011d 	.word	0x0101011d
 8008954:	e000e100 	.word	0xe000e100
 8008958:	40021000 	.word	0x40021000

0800895c <st_update_plan_block_parameters>:
{
 800895c:	b538      	push	{r3, r4, r5, lr}
  if (pl_block != NULL) { // Ignore if at start of a new block.
 800895e:	4c08      	ldr	r4, [pc, #32]	; (8008980 <st_update_plan_block_parameters+0x24>)
 8008960:	6825      	ldr	r5, [r4, #0]
 8008962:	b15d      	cbz	r5, 800897c <st_update_plan_block_parameters+0x20>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 8008964:	4b07      	ldr	r3, [pc, #28]	; (8008984 <st_update_plan_block_parameters+0x28>)
 8008966:	785a      	ldrb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008968:	69d9      	ldr	r1, [r3, #28]
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008970:	4608      	mov	r0, r1
 8008972:	f7f8 f99d 	bl	8000cb0 <__aeabi_fmul>
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 8008976:	2300      	movs	r3, #0
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 8008978:	61e8      	str	r0, [r5, #28]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	bf00      	nop
 8008980:	20000af8 	.word	0x20000af8
 8008984:	20000afc 	.word	0x20000afc

08008988 <st_prep_buffer>:
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 8008988:	4b35      	ldr	r3, [pc, #212]	; (8008a60 <st_prep_buffer+0xd8>)
 800898a:	791b      	ldrb	r3, [r3, #4]
 800898c:	07da      	lsls	r2, r3, #31
 800898e:	f100 84c9 	bmi.w	8009324 <st_prep_buffer+0x99c>
{
 8008992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008996:	b091      	sub	sp, #68	; 0x44
 8008998:	4b32      	ldr	r3, [pc, #200]	; (8008a64 <st_prep_buffer+0xdc>)
 800899a:	781f      	ldrb	r7, [r3, #0]
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 800899c:	4b32      	ldr	r3, [pc, #200]	; (8008a68 <st_prep_buffer+0xe0>)
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	42bb      	cmp	r3, r7
 80089a2:	f000 8318 	beq.w	8008fd6 <st_prep_buffer+0x64e>
    if (pl_block == NULL) {
 80089a6:	4b31      	ldr	r3, [pc, #196]	; (8008a6c <st_prep_buffer+0xe4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8339 	beq.w	8009024 <st_prep_buffer+0x69c>
 80089b2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008a80 <st_prep_buffer+0xf8>
 80089b6:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
 80089ba:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	4b2b      	ldr	r3, [pc, #172]	; (8008a70 <st_prep_buffer+0xe8>)
 80089c2:	930e      	str	r3, [sp, #56]	; 0x38
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80089c4:	4b2b      	ldr	r3, [pc, #172]	; (8008a74 <st_prep_buffer+0xec>)
    prep_segment->st_block_index = prep.st_block_index;
 80089c6:	492c      	ldr	r1, [pc, #176]	; (8008a78 <st_prep_buffer+0xf0>)
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80089c8:	781b      	ldrb	r3, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 80089ca:	f89a 2000 	ldrb.w	r2, [sl]
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 80089ce:	930c      	str	r3, [sp, #48]	; 0x30
    prep_segment->st_block_index = prep.st_block_index;
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	9307      	str	r3, [sp, #28]
 80089d4:	18cb      	adds	r3, r1, r3
 80089d6:	711a      	strb	r2, [r3, #4]
    float minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 80089d8:	f8da 1010 	ldr.w	r1, [sl, #16]
 80089dc:	4658      	mov	r0, fp
 80089de:	f7f8 f85d 	bl	8000a9c <__aeabi_fsub>
 80089e2:	2100      	movs	r1, #0
 80089e4:	9004      	str	r0, [sp, #16]
 80089e6:	f7f8 fb15 	bl	8001014 <__aeabi_fcmpge>
 80089ea:	b908      	cbnz	r0, 80089f0 <st_prep_buffer+0x68>
 80089ec:	2300      	movs	r3, #0
 80089ee:	9304      	str	r3, [sp, #16]
						mm_remaining = prep.accelerate_until;
 80089f0:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80089f4:	4658      	mov	r0, fp
 80089f6:	4619      	mov	r1, r3
						mm_remaining = prep.accelerate_until;
 80089f8:	461c      	mov	r4, r3
 80089fa:	9302      	str	r3, [sp, #8]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 80089fc:	f7f8 f84e 	bl	8000a9c <__aeabi_fsub>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008a00:	f8da 3020 	ldr.w	r3, [sl, #32]
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008a04:	4601      	mov	r1, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008a06:	461d      	mov	r5, r3
 8008a08:	930d      	str	r3, [sp, #52]	; 0x34
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008a0a:	f7f8 f849 	bl	8000aa0 <__addsf3>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008a0e:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008a12:	9006      	str	r0, [sp, #24]
 8008a14:	4629      	mov	r1, r5
 8008a16:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008a1a:	461e      	mov	r6, r3
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	f7f8 f9fb 	bl	8000e18 <__aeabi_fdiv>
 8008a22:	f89a 3014 	ldrb.w	r3, [sl, #20]
 8008a26:	900a      	str	r0, [sp, #40]	; 0x28
 8008a28:	9303      	str	r3, [sp, #12]
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008a2a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4620      	mov	r0, r4
 8008a32:	f8da 701c 	ldr.w	r7, [sl, #28]
 8008a36:	f8da 8018 	ldr.w	r8, [sl, #24]
 8008a3a:	9308      	str	r3, [sp, #32]
 8008a3c:	f7f8 facc 	bl	8000fd8 <__aeabi_fcmpeq>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f000 827f 	beq.w	8008f44 <st_prep_buffer+0x5bc>
 8008a46:	f04f 0302 	mov.w	r3, #2
 8008a4a:	4d0c      	ldr	r5, [pc, #48]	; (8008a7c <st_prep_buffer+0xf4>)
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8008a52:	2400      	movs	r4, #0
 8008a54:	462e      	mov	r6, r5
 8008a56:	9309      	str	r3, [sp, #36]	; 0x24
 8008a58:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008a5c:	e01e      	b.n	8008a9c <st_prep_buffer+0x114>
 8008a5e:	bf00      	nop
 8008a60:	20001188 	.word	0x20001188
 8008a64:	20000b86 	.word	0x20000b86
 8008a68:	20000b85 	.word	0x20000b85
 8008a6c:	20000af8 	.word	0x20000af8
 8008a70:	20000cc0 	.word	0x20000cc0
 8008a74:	20000b84 	.word	0x20000b84
 8008a78:	20000b34 	.word	0x20000b34
 8008a7c:	392ec33e 	.word	0x392ec33e
 8008a80:	20000afc 	.word	0x20000afc
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008a84:	4621      	mov	r1, r4
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7f8 f808 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008a8c:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008a8e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008a90:	4658      	mov	r0, fp
 8008a92:	f7f8 fac9 	bl	8001028 <__aeabi_fcmpgt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f000 80cf 	beq.w	8008c3a <st_prep_buffer+0x2b2>
      switch (prep.ramp_type) {
 8008a9c:	9b01      	ldr	r3, [sp, #4]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d044      	beq.n	8008b2c <st_prep_buffer+0x1a4>
 8008aa2:	f0c0 81a4 	bcc.w	8008dee <st_prep_buffer+0x466>
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d17f      	bne.n	8008baa <st_prep_buffer+0x222>
          speed_var = pl_block->acceleration*time_var;
 8008aaa:	9b00      	ldr	r3, [sp, #0]
 8008aac:	4628      	mov	r0, r5
 8008aae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008ab0:	f7f8 f8fe 	bl	8000cb0 <__aeabi_fmul>
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008ab4:	4651      	mov	r1, sl
          speed_var = pl_block->acceleration*time_var;
 8008ab6:	4681      	mov	r9, r0
					if (prep.current_speed-prep.maximum_speed <= speed_var) {
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f7f7 ffef 	bl	8000a9c <__aeabi_fsub>
 8008abe:	4601      	mov	r1, r0
 8008ac0:	4648      	mov	r0, r9
 8008ac2:	f7f8 faa7 	bl	8001014 <__aeabi_fcmpge>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f000 81d0 	beq.w	8008e6c <st_prep_buffer+0x4e4>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008acc:	4639      	mov	r1, r7
 8008ace:	4650      	mov	r0, sl
 8008ad0:	f7f7 ffe6 	bl	8000aa0 <__addsf3>
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	9806      	ldr	r0, [sp, #24]
 8008ad8:	f7f8 f99e 	bl	8000e18 <__aeabi_fdiv>
      dt += time_var; // Add computed ramp time to total segment time.
 8008adc:	4601      	mov	r1, r0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7f7 ffde 	bl	8000aa0 <__addsf3>
 8008ae4:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7f8 fa9d 	bl	8001028 <__aeabi_fcmpgt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f040 8207 	bne.w	8008f02 <st_prep_buffer+0x57a>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008af4:	9f02      	ldr	r7, [sp, #8]
 8008af6:	9904      	ldr	r1, [sp, #16]
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7f8 fa95 	bl	8001028 <__aeabi_fcmpgt>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f000 83d1 	beq.w	80092a6 <st_prep_buffer+0x91e>
          dt_max += DT_SEGMENT;
 8008b04:	4630      	mov	r0, r6
 8008b06:	49a0      	ldr	r1, [pc, #640]	; (8008d88 <st_prep_buffer+0x400>)
 8008b08:	f7f7 ffca 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008b0c:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008b0e:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008b10:	f7f7 ffc4 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b14:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008b16:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7f8 fa85 	bl	8001028 <__aeabi_fcmpgt>
 8008b1e:	46bb      	mov	fp, r7
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f000 81fc 	beq.w	8008f1e <st_prep_buffer+0x596>
            prep.ramp_type = RAMP_CRUISE;
 8008b26:	2301      	movs	r3, #1
            prep.current_speed = prep.maximum_speed;
 8008b28:	4657      	mov	r7, sl
            prep.ramp_type = RAMP_CRUISE;
 8008b2a:	9303      	str	r3, [sp, #12]
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4650      	mov	r0, sl
 8008b30:	f7f8 f8be 	bl	8000cb0 <__aeabi_fmul>
 8008b34:	4601      	mov	r1, r0
 8008b36:	4658      	mov	r0, fp
 8008b38:	f7f7 ffb0 	bl	8000a9c <__aeabi_fsub>
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008b3c:	9905      	ldr	r1, [sp, #20]
            mm_remaining = mm_var;
 8008b3e:	46d9      	mov	r9, fp
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 8008b40:	4683      	mov	fp, r0
          if (mm_var < prep.decelerate_after) { // End of cruise.
 8008b42:	f7f8 fa53 	bl	8000fec <__aeabi_fcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	f000 81bd 	beq.w	8008ec6 <st_prep_buffer+0x53e>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 8008b4c:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008b50:	4648      	mov	r0, r9
 8008b52:	4659      	mov	r1, fp
 8008b54:	f7f7 ffa2 	bl	8000a9c <__aeabi_fsub>
 8008b58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b5a:	f7f8 f8a9 	bl	8000cb0 <__aeabi_fmul>
      dt += time_var; // Add computed ramp time to total segment time.
 8008b5e:	4601      	mov	r1, r0
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7f7 ff9d 	bl	8000aa0 <__addsf3>
 8008b66:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008b68:	4601      	mov	r1, r0
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f7f8 fa5c 	bl	8001028 <__aeabi_fcmpgt>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f040 81b5 	bne.w	8008ee0 <st_prep_buffer+0x558>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008b76:	9904      	ldr	r1, [sp, #16]
 8008b78:	4658      	mov	r0, fp
 8008b7a:	f7f8 fa55 	bl	8001028 <__aeabi_fcmpgt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f000 81ba 	beq.w	8008ef8 <st_prep_buffer+0x570>
          dt_max += DT_SEGMENT;
 8008b84:	4630      	mov	r0, r6
 8008b86:	4980      	ldr	r1, [pc, #512]	; (8008d88 <st_prep_buffer+0x400>)
 8008b88:	f7f7 ff8a 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008b8c:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008b8e:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008b90:	f7f7 ff84 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b94:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008b96:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008b98:	4658      	mov	r0, fp
 8008b9a:	f7f8 fa45 	bl	8001028 <__aeabi_fcmpgt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f000 81aa 	beq.w	8008ef8 <st_prep_buffer+0x570>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	9303      	str	r3, [sp, #12]
            prep.ramp_type = RAMP_DECEL;
 8008ba8:	9301      	str	r3, [sp, #4]
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008baa:	9b00      	ldr	r3, [sp, #0]
 8008bac:	4628      	mov	r0, r5
 8008bae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008bb0:	f7f8 f87e 	bl	8000cb0 <__aeabi_fmul>
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008bb4:	4639      	mov	r1, r7
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 8008bb6:	4681      	mov	r9, r0
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 8008bb8:	f7f8 fa18 	bl	8000fec <__aeabi_fcmplt>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	f000 8141 	beq.w	8008e44 <st_prep_buffer+0x4bc>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008bc2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008bc6:	4648      	mov	r0, r9
 8008bc8:	f7f8 f872 	bl	8000cb0 <__aeabi_fmul>
 8008bcc:	4639      	mov	r1, r7
 8008bce:	f7f7 ff65 	bl	8000a9c <__aeabi_fsub>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7f8 f86c 	bl	8000cb0 <__aeabi_fmul>
 8008bd8:	4659      	mov	r1, fp
 8008bda:	f7f7 ff61 	bl	8000aa0 <__addsf3>
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008bde:	4641      	mov	r1, r8
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5f*speed_var); // (mm)
 8008be0:	900b      	str	r0, [sp, #44]	; 0x2c
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 8008be2:	f7f8 fa21 	bl	8001028 <__aeabi_fcmpgt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f000 812c 	beq.w	8008e44 <st_prep_buffer+0x4bc>
              prep.current_speed -= speed_var;
 8008bec:	4638      	mov	r0, r7
 8008bee:	4649      	mov	r1, r9
 8008bf0:	f7f7 ff54 	bl	8000a9c <__aeabi_fsub>
 8008bf4:	4607      	mov	r7, r0
              mm_remaining = mm_var;
 8008bf6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
      dt += time_var; // Add computed ramp time to total segment time.
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7f7 ff4f 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c02:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008c04:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008c06:	f7f8 f9f1 	bl	8000fec <__aeabi_fcmplt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f47f af3a 	bne.w	8008a84 <st_prep_buffer+0xfc>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 8008c10:	4659      	mov	r1, fp
 8008c12:	9804      	ldr	r0, [sp, #16]
 8008c14:	f7f8 f9ea 	bl	8000fec <__aeabi_fcmplt>
 8008c18:	b178      	cbz	r0, 8008c3a <st_prep_buffer+0x2b2>
          dt_max += DT_SEGMENT;
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	495a      	ldr	r1, [pc, #360]	; (8008d88 <st_prep_buffer+0x400>)
 8008c1e:	f7f7 ff3f 	bl	8000aa0 <__addsf3>
          time_var = dt_max - dt;
 8008c22:	4621      	mov	r1, r4
          dt_max += DT_SEGMENT;
 8008c24:	4606      	mov	r6, r0
          time_var = dt_max - dt;
 8008c26:	f7f7 ff39 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c2a:	4641      	mov	r1, r8
          time_var = dt_max - dt;
 8008c2c:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008c2e:	4658      	mov	r0, fp
 8008c30:	f7f8 f9fa 	bl	8001028 <__aeabi_fcmpgt>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	f47f af31 	bne.w	8008a9c <st_prep_buffer+0x114>
 8008c3a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008c3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008c42:	f8ca 701c 	str.w	r7, [sl, #28]
 8008c46:	f88a 3014 	strb.w	r3, [sl, #20]
      if (st_prep_block->is_pwm_rate_adjusted || (sys.step_control & STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 8008c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	7e9b      	ldrb	r3, [r3, #26]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 817a 	bne.w	8008f4a <st_prep_buffer+0x5c2>
 8008c56:	4b4d      	ldr	r3, [pc, #308]	; (8008d8c <st_prep_buffer+0x404>)
 8008c58:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008c5c:	f018 0f08 	tst.w	r8, #8
 8008c60:	f040 81bc 	bne.w	8008fdc <st_prep_buffer+0x654>
 8008c64:	f8ba 0034 	ldrh.w	r0, [sl, #52]	; 0x34
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008c68:	9a07      	ldr	r2, [sp, #28]
 8008c6a:	4b49      	ldr	r3, [pc, #292]	; (8008d90 <st_prep_buffer+0x408>)
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008c6c:	f8da 100c 	ldr.w	r1, [sl, #12]
      prep_segment->spindle_pwm = prep.current_spindle_pwm; // Reload segment PWM value
 8008c70:	4413      	add	r3, r2
 8008c72:	80d8      	strh	r0, [r3, #6]
    float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 8008c74:	4658      	mov	r0, fp
 8008c76:	f7f8 f81b 	bl	8000cb0 <__aeabi_fmul>
 8008c7a:	4606      	mov	r6, r0
    float n_steps_remaining = ceilf(step_dist_remaining); // Round-up current steps remaining
 8008c7c:	f002 f96c 	bl	800af58 <ceilf>
 8008c80:	4605      	mov	r5, r0
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008c82:	f8da 0008 	ldr.w	r0, [sl, #8]
 8008c86:	f002 f967 	bl	800af58 <ceilf>
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008c8a:	4629      	mov	r1, r5
    float last_n_steps_remaining = ceilf(prep.steps_remaining); // Round-up last steps remaining
 8008c8c:	4607      	mov	r7, r0
	prep_segment->n_step = (uint16_t)(last_n_steps_remaining - n_steps_remaining); // Compute number of steps to execute.
 8008c8e:	f7f7 ff05 	bl	8000a9c <__aeabi_fsub>
 8008c92:	f7f8 fa0f 	bl	80010b4 <__aeabi_f2uiz>
 8008c96:	4b3e      	ldr	r3, [pc, #248]	; (8008d90 <st_prep_buffer+0x408>)
 8008c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c9a:	fa1f f980 	uxth.w	r9, r0
 8008c9e:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
    if (prep_segment->n_step == 0) {
 8008ca2:	f1b9 0f00 	cmp.w	r9, #0
 8008ca6:	d103      	bne.n	8008cb0 <st_prep_buffer+0x328>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 8008ca8:	f018 0f02 	tst.w	r8, #2
 8008cac:	f040 83a6 	bne.w	80093fc <st_prep_buffer+0xa74>
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008cb6:	f7f7 fef3 	bl	8000aa0 <__addsf3>
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008cba:	4631      	mov	r1, r6
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 8008cbc:	4604      	mov	r4, r0
    float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f7f7 feec 	bl	8000a9c <__aeabi_fsub>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7f8 f8a6 	bl	8000e18 <__aeabi_fdiv>
 8008ccc:	4604      	mov	r4, r0
	uint32_t cycles = (uint32_t)ceilf((TICKS_PER_MICROSECOND * 1000000) *inv_rate * 60); // (cycles/step)
 8008cce:	4a31      	ldr	r2, [pc, #196]	; (8008d94 <st_prep_buffer+0x40c>)
 8008cd0:	4b31      	ldr	r3, [pc, #196]	; (8008d98 <st_prep_buffer+0x410>)
 8008cd2:	6817      	ldr	r7, [r2, #0]
 8008cd4:	4831      	ldr	r0, [pc, #196]	; (8008d9c <st_prep_buffer+0x414>)
 8008cd6:	fba3 2307 	umull	r2, r3, r3, r7
 8008cda:	0c9b      	lsrs	r3, r3, #18
 8008cdc:	fb00 f003 	mul.w	r0, r0, r3
 8008ce0:	f7f7 ff8e 	bl	8000c00 <__aeabi_ui2f>
 8008ce4:	492e      	ldr	r1, [pc, #184]	; (8008da0 <st_prep_buffer+0x418>)
 8008ce6:	f7f7 ffe3 	bl	8000cb0 <__aeabi_fmul>
 8008cea:	4621      	mov	r1, r4
 8008cec:	f7f7 ffe0 	bl	8000cb0 <__aeabi_fmul>
 8008cf0:	f002 f932 	bl	800af58 <ceilf>
 8008cf4:	f7f8 f9de 	bl	80010b4 <__aeabi_f2uiz>
      if (cycles < AMASS_LEVEL1) { prep_segment->amass_level = 0; }
 8008cf8:	4b2a      	ldr	r3, [pc, #168]	; (8008da4 <st_prep_buffer+0x41c>)
 8008cfa:	fba3 3707 	umull	r3, r7, r3, r7
 8008cfe:	ebb0 2f57 	cmp.w	r0, r7, lsr #9
 8008d02:	f080 8137 	bcs.w	8008f74 <st_prep_buffer+0x5ec>
 8008d06:	2200      	movs	r2, #0
 8008d08:	9907      	ldr	r1, [sp, #28]
 8008d0a:	4b21      	ldr	r3, [pc, #132]	; (8008d90 <st_prep_buffer+0x408>)
 8008d0c:	440b      	add	r3, r1
 8008d0e:	715a      	strb	r2, [r3, #5]
 8008d10:	460a      	mov	r2, r1
 8008d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d16:	4298      	cmp	r0, r3
 8008d18:	bf28      	it	cs
 8008d1a:	4618      	movcs	r0, r3
    segment_buffer_head = segment_next_head;
 8008d1c:	4b22      	ldr	r3, [pc, #136]	; (8008da8 <st_prep_buffer+0x420>)
 8008d1e:	491c      	ldr	r1, [pc, #112]	; (8008d90 <st_prep_buffer+0x408>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	440a      	add	r2, r1
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d24:	1c5f      	adds	r7, r3, #1
 8008d26:	b2ff      	uxtb	r7, r7
 8008d28:	8050      	strh	r0, [r2, #2]
    segment_buffer_head = segment_next_head;
 8008d2a:	4a20      	ldr	r2, [pc, #128]	; (8008dac <st_prep_buffer+0x424>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d2c:	2f0a      	cmp	r7, #10
    segment_buffer_head = segment_next_head;
 8008d2e:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d30:	f000 8131 	beq.w	8008f96 <st_prep_buffer+0x60e>
    pl_block->millimeters = mm_remaining;
 8008d34:	4b1e      	ldr	r3, [pc, #120]	; (8008db0 <st_prep_buffer+0x428>)
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d36:	4a1c      	ldr	r2, [pc, #112]	; (8008da8 <st_prep_buffer+0x420>)
    pl_block->millimeters = mm_remaining;
 8008d38:	681b      	ldr	r3, [r3, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008d3a:	7017      	strb	r7, [r2, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d3c:	4631      	mov	r1, r6
    pl_block->millimeters = mm_remaining;
 8008d3e:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
    prep.steps_remaining = n_steps_remaining;
 8008d42:	f8ca 5008 	str.w	r5, [sl, #8]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7f7 fea8 	bl	8000a9c <__aeabi_fsub>
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	f7f7 ffaf 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008d52:	f8da 1018 	ldr.w	r1, [sl, #24]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008d56:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f7f8 f93c 	bl	8000fd8 <__aeabi_fcmpeq>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f43f ae1b 	beq.w	800899c <st_prep_buffer+0x14>
      if (mm_remaining > 0.0f) { // At end of forced-termination.
 8008d66:	4658      	mov	r0, fp
 8008d68:	2100      	movs	r1, #0
 8008d6a:	f7f8 f95d 	bl	8001028 <__aeabi_fcmpgt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f040 8344 	bne.w	80093fc <st_prep_buffer+0xa74>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 8008d74:	f018 0304 	ands.w	r3, r8, #4
 8008d78:	f040 8340 	bne.w	80093fc <st_prep_buffer+0xa74>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 8008d7c:	4a0c      	ldr	r2, [pc, #48]	; (8008db0 <st_prep_buffer+0x428>)
 8008d7e:	6013      	str	r3, [r2, #0]
        plan_discard_current_block();
 8008d80:	f7fb fc98 	bl	80046b4 <plan_discard_current_block>
 8008d84:	e608      	b.n	8008998 <st_prep_buffer+0x10>
 8008d86:	bf00      	nop
 8008d88:	392ec33e 	.word	0x392ec33e
 8008d8c:	20001188 	.word	0x20001188
 8008d90:	20000b34 	.word	0x20000b34
 8008d94:	20000018 	.word	0x20000018
 8008d98:	431bde83 	.word	0x431bde83
 8008d9c:	000f4240 	.word	0x000f4240
 8008da0:	42700000 	.word	0x42700000
 8008da4:	10624dd3 	.word	0x10624dd3
 8008da8:	20000b86 	.word	0x20000b86
 8008dac:	20000b84 	.word	0x20000b84
 8008db0:	20000af8 	.word	0x20000af8
            prep.current_speed += speed_var;
 8008db4:	4649      	mov	r1, r9
 8008db6:	4638      	mov	r0, r7
 8008db8:	f7f7 fe72 	bl	8000aa0 <__addsf3>
      dt += time_var; // Add computed ramp time to total segment time.
 8008dbc:	4629      	mov	r1, r5
            prep.current_speed += speed_var;
 8008dbe:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7f7 fe6d 	bl	8000aa0 <__addsf3>
 8008dc6:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7f8 f92c 	bl	8001028 <__aeabi_fcmpgt>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	f43f af1d 	beq.w	8008c10 <st_prep_buffer+0x288>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7f7 fe5f 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008dde:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008de0:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008de2:	4658      	mov	r0, fp
 8008de4:	f7f8 f920 	bl	8001028 <__aeabi_fcmpgt>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f43f af26 	beq.w	8008c3a <st_prep_buffer+0x2b2>
          speed_var = pl_block->acceleration*time_var;
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	4628      	mov	r0, r5
 8008df2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008df4:	f7f7 ff5c 	bl	8000cb0 <__aeabi_fmul>
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008df8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
          speed_var = pl_block->acceleration*time_var;
 8008dfc:	4681      	mov	r9, r0
          mm_remaining -= time_var*(prep.current_speed + 0.5f*speed_var);
 8008dfe:	f7f7 ff57 	bl	8000cb0 <__aeabi_fmul>
 8008e02:	4639      	mov	r1, r7
 8008e04:	f7f7 fe4c 	bl	8000aa0 <__addsf3>
 8008e08:	4629      	mov	r1, r5
 8008e0a:	f7f7 ff51 	bl	8000cb0 <__aeabi_fmul>
 8008e0e:	4601      	mov	r1, r0
 8008e10:	4658      	mov	r0, fp
 8008e12:	f7f7 fe43 	bl	8000a9c <__aeabi_fsub>
 8008e16:	4683      	mov	fp, r0
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 8008e18:	4601      	mov	r1, r0
 8008e1a:	9802      	ldr	r0, [sp, #8]
 8008e1c:	f7f8 f904 	bl	8001028 <__aeabi_fcmpgt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d0c7      	beq.n	8008db4 <st_prep_buffer+0x42c>
            time_var = 2.0f*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 8008e24:	4639      	mov	r1, r7
 8008e26:	4650      	mov	r0, sl
 8008e28:	f7f7 fe3a 	bl	8000aa0 <__addsf3>
 8008e2c:	4601      	mov	r1, r0
 8008e2e:	9806      	ldr	r0, [sp, #24]
 8008e30:	f7f7 fff2 	bl	8000e18 <__aeabi_fdiv>
 8008e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e36:	4605      	mov	r5, r0
 8008e38:	9303      	str	r3, [sp, #12]
            prep.current_speed = prep.maximum_speed;
 8008e3a:	4657      	mov	r7, sl
 8008e3c:	9301      	str	r3, [sp, #4]
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 8008e3e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008e42:	e6da      	b.n	8008bfa <st_prep_buffer+0x272>
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008e44:	4658      	mov	r0, fp
 8008e46:	4641      	mov	r1, r8
 8008e48:	f7f7 fe28 	bl	8000a9c <__aeabi_fsub>
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	f7f7 fe27 	bl	8000aa0 <__addsf3>
 8008e52:	4639      	mov	r1, r7
 8008e54:	9f08      	ldr	r7, [sp, #32]
 8008e56:	4605      	mov	r5, r0
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7f7 fe21 	bl	8000aa0 <__addsf3>
 8008e5e:	4601      	mov	r1, r0
 8008e60:	4628      	mov	r0, r5
 8008e62:	f7f7 ffd9 	bl	8000e18 <__aeabi_fdiv>
          mm_remaining = prep.mm_complete;
 8008e66:	46c3      	mov	fp, r8
          time_var = 2.0f*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 8008e68:	4605      	mov	r5, r0
 8008e6a:	e6c6      	b.n	8008bfa <st_prep_buffer+0x272>
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008e6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008e70:	4648      	mov	r0, r9
 8008e72:	f7f7 ff1d 	bl	8000cb0 <__aeabi_fmul>
 8008e76:	4639      	mov	r1, r7
 8008e78:	f7f7 fe10 	bl	8000a9c <__aeabi_fsub>
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	f7f7 ff17 	bl	8000cb0 <__aeabi_fmul>
 8008e82:	4601      	mov	r1, r0
 8008e84:	4658      	mov	r0, fp
 8008e86:	f7f7 fe0b 	bl	8000aa0 <__addsf3>
            prep.current_speed -= speed_var;
 8008e8a:	4649      	mov	r1, r9
						mm_remaining -= time_var*(prep.current_speed - 0.5f*speed_var);
 8008e8c:	4683      	mov	fp, r0
            prep.current_speed -= speed_var;
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7f7 fe04 	bl	8000a9c <__aeabi_fsub>
      dt += time_var; // Add computed ramp time to total segment time.
 8008e94:	4629      	mov	r1, r5
            prep.current_speed -= speed_var;
 8008e96:	4607      	mov	r7, r0
      dt += time_var; // Add computed ramp time to total segment time.
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f7f7 fe01 	bl	8000aa0 <__addsf3>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008e9e:	4631      	mov	r1, r6
      dt += time_var; // Add computed ramp time to total segment time.
 8008ea0:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008ea2:	f7f8 f8a3 	bl	8000fec <__aeabi_fcmplt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f43f aeb2 	beq.w	8008c10 <st_prep_buffer+0x288>
 8008eac:	4621      	mov	r1, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7f7 fdf4 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008eb4:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008eb6:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008eb8:	4658      	mov	r0, fp
 8008eba:	f7f8 f8b5 	bl	8001028 <__aeabi_fcmpgt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f47f adf3 	bne.w	8008aaa <st_prep_buffer+0x122>
 8008ec4:	e6b9      	b.n	8008c3a <st_prep_buffer+0x2b2>
      dt += time_var; // Add computed ramp time to total segment time.
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f7f7 fde9 	bl	8000aa0 <__addsf3>
 8008ece:	4604      	mov	r4, r0
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7f8 f8a8 	bl	8001028 <__aeabi_fcmpgt>
 8008ed8:	bb38      	cbnz	r0, 8008f2a <st_prep_buffer+0x5a2>
 8008eda:	2301      	movs	r3, #1
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	e697      	b.n	8008c10 <st_prep_buffer+0x288>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7f7 fdda 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008ee8:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008eea:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008eec:	4658      	mov	r0, fp
 8008eee:	f7f8 f89b 	bl	8001028 <__aeabi_fcmpgt>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f47f ae56 	bne.w	8008ba4 <st_prep_buffer+0x21c>
            prep.ramp_type = RAMP_DECEL;
 8008ef8:	2302      	movs	r3, #2
 8008efa:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	e69d      	b.n	8008c3e <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008f02:	4621      	mov	r1, r4
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7f7 fdc9 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008f0a:	f8dd b008 	ldr.w	fp, [sp, #8]
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008f0e:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008f10:	4641      	mov	r1, r8
 8008f12:	4658      	mov	r0, fp
 8008f14:	f7f8 f888 	bl	8001028 <__aeabi_fcmpgt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f47f ae04 	bne.w	8008b26 <st_prep_buffer+0x19e>
            prep.ramp_type = RAMP_CRUISE;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 8008f24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 8008f26:	9303      	str	r3, [sp, #12]
 8008f28:	e689      	b.n	8008c3e <st_prep_buffer+0x2b6>
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7f7 fdb5 	bl	8000a9c <__aeabi_fsub>
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008f32:	4641      	mov	r1, r8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 8008f34:	4605      	mov	r5, r0
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 8008f36:	4658      	mov	r0, fp
 8008f38:	f7f8 f876 	bl	8001028 <__aeabi_fcmpgt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f47f adf5 	bne.w	8008b2c <st_prep_buffer+0x1a4>
 8008f42:	e67a      	b.n	8008c3a <st_prep_buffer+0x2b2>
 8008f44:	f04f 0301 	mov.w	r3, #1
 8008f48:	e57f      	b.n	8008a4a <st_prep_buffer+0xc2>
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	7e9b      	ldrb	r3, [r3, #26]
 8008f4e:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008f52:	d15b      	bne.n	800900c <st_prep_buffer+0x684>
 8008f54:	4bb4      	ldr	r3, [pc, #720]	; (8009228 <st_prep_buffer+0x8a0>)
 8008f56:	f893 8004 	ldrb.w	r8, [r3, #4]
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008f5a:	2300      	movs	r3, #0
          sys.spindle_speed = 0.0;
 8008f5c:	2100      	movs	r1, #0
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008f5e:	4618      	mov	r0, r3
          sys.spindle_speed = 0.0;
 8008f60:	4ab1      	ldr	r2, [pc, #708]	; (8009228 <st_prep_buffer+0x8a0>)
          prep.current_spindle_pwm = SPINDLE_PWM_OFF_VALUE;
 8008f62:	f8aa 3034 	strh.w	r3, [sl, #52]	; 0x34
          sys.spindle_speed = 0.0;
 8008f66:	6111      	str	r1, [r2, #16]
        bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008f68:	4baf      	ldr	r3, [pc, #700]	; (8009228 <st_prep_buffer+0x8a0>)
 8008f6a:	f008 08f7 	and.w	r8, r8, #247	; 0xf7
 8008f6e:	f883 8004 	strb.w	r8, [r3, #4]
 8008f72:	e679      	b.n	8008c68 <st_prep_buffer+0x2e0>
        if (cycles < AMASS_LEVEL2) { prep_segment->amass_level = 1; }
 8008f74:	ebb0 2f17 	cmp.w	r0, r7, lsr #8
 8008f78:	d23f      	bcs.n	8008ffa <st_prep_buffer+0x672>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4aab      	ldr	r2, [pc, #684]	; (800922c <st_prep_buffer+0x8a4>)
 8008f7e:	9907      	ldr	r1, [sp, #28]
 8008f80:	440a      	add	r2, r1
 8008f82:	7153      	strb	r3, [r2, #5]
        prep_segment->n_step <<= prep_segment->amass_level;
 8008f84:	4aa9      	ldr	r2, [pc, #676]	; (800922c <st_prep_buffer+0x8a4>)
 8008f86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f88:	fa09 f903 	lsl.w	r9, r9, r3
 8008f8c:	f822 9031 	strh.w	r9, [r2, r1, lsl #3]
        cycles >>= prep_segment->amass_level;
 8008f90:	40d8      	lsrs	r0, r3
 8008f92:	9a07      	ldr	r2, [sp, #28]
 8008f94:	e6bd      	b.n	8008d12 <st_prep_buffer+0x38a>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008f96:	2200      	movs	r2, #0
    pl_block->millimeters = mm_remaining;
 8008f98:	4ba5      	ldr	r3, [pc, #660]	; (8009230 <st_prep_buffer+0x8a8>)
    prep.steps_remaining = n_steps_remaining;
 8008f9a:	f8ca 5008 	str.w	r5, [sl, #8]
    pl_block->millimeters = mm_remaining;
 8008f9e:	681b      	ldr	r3, [r3, #0]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008fa0:	4628      	mov	r0, r5
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008fa2:	4da4      	ldr	r5, [pc, #656]	; (8009234 <st_prep_buffer+0x8ac>)
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008fa4:	4631      	mov	r1, r6
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 8008fa6:	702a      	strb	r2, [r5, #0]
    pl_block->millimeters = mm_remaining;
 8008fa8:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008fac:	f7f7 fd76 	bl	8000a9c <__aeabi_fsub>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f7f7 fe7d 	bl	8000cb0 <__aeabi_fmul>
    if (mm_remaining == prep.mm_complete) {
 8008fb6:	4659      	mov	r1, fp
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 8008fb8:	f8ca 0004 	str.w	r0, [sl, #4]
    if (mm_remaining == prep.mm_complete) {
 8008fbc:	f8da 0018 	ldr.w	r0, [sl, #24]
 8008fc0:	f7f8 f80a 	bl	8000fd8 <__aeabi_fcmpeq>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	f47f aece 	bne.w	8008d66 <st_prep_buffer+0x3de>
 8008fca:	4607      	mov	r7, r0
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 8008fcc:	4b9a      	ldr	r3, [pc, #616]	; (8009238 <st_prep_buffer+0x8b0>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	42bb      	cmp	r3, r7
 8008fd2:	f47f ace8 	bne.w	80089a6 <st_prep_buffer+0x1e>
}
 8008fd6:	b011      	add	sp, #68	; 0x44
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (pl_block->condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)) {
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	7e9b      	ldrb	r3, [r3, #26]
 8008fe0:	f013 0f30 	tst.w	r3, #48	; 0x30
 8008fe4:	d0b9      	beq.n	8008f5a <st_prep_buffer+0x5d2>
          float rpm = pl_block->spindle_speed;
 8008fe6:	9b00      	ldr	r3, [sp, #0]
 8008fe8:	6b98      	ldr	r0, [r3, #56]	; 0x38
          prep.current_spindle_pwm = spindle_compute_pwm_value(rpm);
 8008fea:	f7fe ff65 	bl	8007eb8 <spindle_compute_pwm_value>
 8008fee:	4b8e      	ldr	r3, [pc, #568]	; (8009228 <st_prep_buffer+0x8a0>)
 8008ff0:	f8aa 0034 	strh.w	r0, [sl, #52]	; 0x34
 8008ff4:	f893 8004 	ldrb.w	r8, [r3, #4]
 8008ff8:	e7b6      	b.n	8008f68 <st_prep_buffer+0x5e0>
        else if (cycles < AMASS_LEVEL3) { prep_segment->amass_level = 2; }
 8008ffa:	ebb0 1fd7 	cmp.w	r0, r7, lsr #7
 8008ffe:	d25d      	bcs.n	80090bc <st_prep_buffer+0x734>
 8009000:	2302      	movs	r3, #2
 8009002:	4a8a      	ldr	r2, [pc, #552]	; (800922c <st_prep_buffer+0x8a4>)
 8009004:	9907      	ldr	r1, [sp, #28]
 8009006:	440a      	add	r2, r1
 8009008:	7153      	strb	r3, [r2, #5]
 800900a:	e7bb      	b.n	8008f84 <st_prep_buffer+0x5fc>
          float rpm = pl_block->spindle_speed;
 800900c:	9b00      	ldr	r3, [sp, #0]
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 800900e:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
          float rpm = pl_block->spindle_speed;
 8009012:	6b9d      	ldr	r5, [r3, #56]	; 0x38
          if (st_prep_block->is_pwm_rate_adjusted) { rpm *= (prep.current_speed * prep.inv_rate); }
 8009014:	f8da 001c 	ldr.w	r0, [sl, #28]
 8009018:	f7f7 fe4a 	bl	8000cb0 <__aeabi_fmul>
 800901c:	4629      	mov	r1, r5
 800901e:	f7f7 fe47 	bl	8000cb0 <__aeabi_fmul>
 8009022:	e7e2      	b.n	8008fea <st_prep_buffer+0x662>
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 8009024:	4b80      	ldr	r3, [pc, #512]	; (8009228 <st_prep_buffer+0x8a0>)
 8009026:	791b      	ldrb	r3, [r3, #4]
 8009028:	075b      	lsls	r3, r3, #29
 800902a:	d54e      	bpl.n	80090ca <st_prep_buffer+0x742>
 800902c:	f7fb fb5c 	bl	80046e8 <plan_get_system_motion_block>
 8009030:	4602      	mov	r2, r0
 8009032:	4b7f      	ldr	r3, [pc, #508]	; (8009230 <st_prep_buffer+0x8a8>)
 8009034:	9000      	str	r0, [sp, #0]
 8009036:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 8009038:	2a00      	cmp	r2, #0
 800903a:	d0cc      	beq.n	8008fd6 <st_prep_buffer+0x64e>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 800903c:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800924c <st_prep_buffer+0x8c4>
 8009040:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8009044:	f017 0301 	ands.w	r3, r7, #1
 8009048:	d046      	beq.n	80090d8 <st_prep_buffer+0x750>
          prep.recalculate_flag = false;
 800904a:	2300      	movs	r3, #0
 800904c:	4976      	ldr	r1, [pc, #472]	; (8009228 <st_prep_buffer+0x8a0>)
 800904e:	f88a 3001 	strb.w	r3, [sl, #1]
 8009052:	790d      	ldrb	r5, [r1, #4]
 8009054:	4b79      	ldr	r3, [pc, #484]	; (800923c <st_prep_buffer+0x8b4>)
 8009056:	f8d2 b028 	ldr.w	fp, [r2, #40]	; 0x28
 800905a:	f005 0602 	and.w	r6, r5, #2
 800905e:	930e      	str	r3, [sp, #56]	; 0x38
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8009060:	2200      	movs	r2, #0
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009062:	9b00      	ldr	r3, [sp, #0]
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 8009064:	f8ca 2018 	str.w	r2, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009068:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 800906a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 fed2 	bl	8000e18 <__aeabi_fdiv>
 8009074:	4604      	mov	r4, r0
			if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 8009076:	2e00      	cmp	r6, #0
 8009078:	f000 8093 	beq.w	80091a2 <st_prep_buffer+0x81a>
				prep.ramp_type = RAMP_DECEL;
 800907c:	f04f 0802 	mov.w	r8, #2
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8009080:	9b00      	ldr	r3, [sp, #0]
				prep.ramp_type = RAMP_DECEL;
 8009082:	f88a 8014 	strb.w	r8, [sl, #20]
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8009086:	69dc      	ldr	r4, [r3, #28]
 8009088:	4621      	mov	r1, r4
 800908a:	f7f7 fe11 	bl	8000cb0 <__aeabi_fmul>
 800908e:	4601      	mov	r1, r0
 8009090:	4658      	mov	r0, fp
 8009092:	f7f7 fd03 	bl	8000a9c <__aeabi_fsub>
				if (decel_dist < 0.0f) {
 8009096:	2100      	movs	r1, #0
				float decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 8009098:	4606      	mov	r6, r0
				if (decel_dist < 0.0f) {
 800909a:	f7f7 ffa7 	bl	8000fec <__aeabi_fcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	f040 8150 	bne.w	8009344 <st_prep_buffer+0x9bc>
					prep.exit_speed = 0.0f;
 80090a4:	2300      	movs	r3, #0
					prep.mm_complete = decel_dist; // End of feed hold.
 80090a6:	f8ca 6018 	str.w	r6, [sl, #24]
					prep.exit_speed = 0.0f;
 80090aa:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 80090ae:	f8cd 8004 	str.w	r8, [sp, #4]
        bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM); // Force update whenever updating block.
 80090b2:	4b5d      	ldr	r3, [pc, #372]	; (8009228 <st_prep_buffer+0x8a0>)
 80090b4:	f045 0508 	orr.w	r5, r5, #8
 80090b8:	711d      	strb	r5, [r3, #4]
 80090ba:	e483      	b.n	80089c4 <st_prep_buffer+0x3c>
        else { prep_segment->amass_level = 3; }
 80090bc:	2203      	movs	r2, #3
 80090be:	495b      	ldr	r1, [pc, #364]	; (800922c <st_prep_buffer+0x8a4>)
 80090c0:	9f07      	ldr	r7, [sp, #28]
 80090c2:	4613      	mov	r3, r2
 80090c4:	4439      	add	r1, r7
 80090c6:	714a      	strb	r2, [r1, #5]
 80090c8:	e75c      	b.n	8008f84 <st_prep_buffer+0x5fc>
      else { pl_block = plan_get_current_block(); }
 80090ca:	f7fb fb19 	bl	8004700 <plan_get_current_block>
 80090ce:	4b58      	ldr	r3, [pc, #352]	; (8009230 <st_prep_buffer+0x8a8>)
 80090d0:	4602      	mov	r2, r0
 80090d2:	9000      	str	r0, [sp, #0]
 80090d4:	6018      	str	r0, [r3, #0]
 80090d6:	e7af      	b.n	8009038 <st_prep_buffer+0x6b0>
  block_index++;
 80090d8:	f89a 2000 	ldrb.w	r2, [sl]
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80090dc:	4e58      	ldr	r6, [pc, #352]	; (8009240 <st_prep_buffer+0x8b8>)
  block_index++;
 80090de:	3201      	adds	r2, #1
 80090e0:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 80090e2:	2a09      	cmp	r2, #9
 80090e4:	f000 811f 	beq.w	8009326 <st_prep_buffer+0x99e>
 80090e8:	4613      	mov	r3, r2
 80090ea:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
 80090ee:	eb06 0484 	add.w	r4, r6, r4, lsl #2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80090f2:	9d00      	ldr	r5, [sp, #0]
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 80090f4:	f88a 2000 	strb.w	r2, [sl]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 80090f8:	4628      	mov	r0, r5
 80090fa:	6829      	ldr	r1, [r5, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 80090fc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8009100:	00c9      	lsls	r1, r1, #3
 8009102:	686a      	ldr	r2, [r5, #4]
 8009104:	6880      	ldr	r0, [r0, #8]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8009106:	8b2d      	ldrh	r5, [r5, #24]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8009108:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
        st_prep_block->direction_bits = pl_block->direction_bits;
 800910c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8009110:	9e00      	ldr	r6, [sp, #0]
 8009112:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
 8009116:	68f1      	ldr	r1, [r6, #12]
 8009118:	6932      	ldr	r2, [r6, #16]
 800911a:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 800911e:	6970      	ldr	r0, [r6, #20]
        st_prep_block->direction_bits = pl_block->direction_bits;
 8009120:	831d      	strh	r5, [r3, #24]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8009122:	00c9      	lsls	r1, r1, #3
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8009124:	4d45      	ldr	r5, [pc, #276]	; (800923c <st_prep_buffer+0x8b4>)
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 8009126:	60d9      	str	r1, [r3, #12]
 8009128:	00d2      	lsls	r2, r2, #3
          st_prep_block->step_event_count = pl_block->step_event_count << MAX_AMASS_LEVEL;
 800912a:	00c1      	lsls	r1, r0, #3
 800912c:	6159      	str	r1, [r3, #20]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = pl_block->steps[idx] << MAX_AMASS_LEVEL; }
 800912e:	f8c3 e004 	str.w	lr, [r3, #4]
 8009132:	f8c3 c008 	str.w	ip, [r3, #8]
 8009136:	611a      	str	r2, [r3, #16]
        st_prep_block = &st_block_buffer[prep.st_block_index];
 8009138:	602c      	str	r4, [r5, #0]
 800913a:	950e      	str	r5, [sp, #56]	; 0x38
        prep.steps_remaining = (float)pl_block->step_event_count;
 800913c:	f7f7 fd60 	bl	8000c00 <__aeabi_ui2f>
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8009140:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
        prep.steps_remaining = (float)pl_block->step_event_count;
 8009144:	f8ca 0008 	str.w	r0, [sl, #8]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8009148:	4659      	mov	r1, fp
 800914a:	f7f7 fe65 	bl	8000e18 <__aeabi_fdiv>
 800914e:	4601      	mov	r1, r0
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8009150:	483c      	ldr	r0, [pc, #240]	; (8009244 <st_prep_buffer+0x8bc>)
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 8009152:	f8ca 100c 	str.w	r1, [sl, #12]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 8009156:	f7f7 fe5f 	bl	8000e18 <__aeabi_fdiv>
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 800915a:	4b33      	ldr	r3, [pc, #204]	; (8009228 <st_prep_buffer+0x8a0>)
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 800915c:	f8ca 0010 	str.w	r0, [sl, #16]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8009160:	791d      	ldrb	r5, [r3, #4]
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8009162:	2300      	movs	r3, #0
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 8009164:	f015 0602 	ands.w	r6, r5, #2
        prep.dt_remainder = 0.0f; // Reset for new segment block
 8009168:	f8ca 3004 	str.w	r3, [sl, #4]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 800916c:	d170      	bne.n	8009250 <st_prep_buffer+0x8c8>
 800916e:	f017 0808 	ands.w	r8, r7, #8
 8009172:	d16d      	bne.n	8009250 <st_prep_buffer+0x8c8>
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	69d8      	ldr	r0, [r3, #28]
 8009178:	f002 f806 	bl	800b188 <sqrtf>
        if (settings.flags & BITFLAG_LASER_MODE) {
 800917c:	4b32      	ldr	r3, [pc, #200]	; (8009248 <st_prep_buffer+0x8c0>)
          prep.current_speed = sqrtf(pl_block->entry_speed_sqr);
 800917e:	f8ca 001c 	str.w	r0, [sl, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009182:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
        st_prep_block->is_pwm_rate_adjusted = false;
 8009186:	f884 801a 	strb.w	r8, [r4, #26]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800918a:	0798      	lsls	r0, r3, #30
 800918c:	d475      	bmi.n	800927a <st_prep_buffer+0x8f2>
			prep.mm_complete = 0.0f; // Default velocity profile complete at 0.0mm from end of block.
 800918e:	2300      	movs	r3, #0
 8009190:	f8ca 3018 	str.w	r3, [sl, #24]
			float inv_2_accel = 0.5f/pl_block->acceleration;
 8009194:	9b00      	ldr	r3, [sp, #0]
 8009196:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800919a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800919c:	f7f7 fe3c 	bl	8000e18 <__aeabi_fdiv>
 80091a0:	4604      	mov	r4, r0
				prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 80091a2:	2300      	movs	r3, #0
 80091a4:	f88a 3014 	strb.w	r3, [sl, #20]
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80091a8:	076b      	lsls	r3, r5, #29
				prep.accelerate_until = pl_block->millimeters;
 80091aa:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 80091ae:	f140 80bd 	bpl.w	800932c <st_prep_buffer+0x9a4>
          prep.exit_speed = exit_speed_sqr = 0.0f; // Enforce stop at end of system motion.
 80091b2:	2300      	movs	r3, #0
 80091b4:	4698      	mov	r8, r3
 80091b6:	9800      	ldr	r0, [sp, #0]
 80091b8:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 80091bc:	f7fb fadc 	bl	8004778 <plan_compute_profile_nominal_speed>
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 80091c0:	4601      	mov	r1, r0
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 80091c2:	4681      	mov	r9, r0
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 80091c4:	f7f7 fd74 	bl	8000cb0 <__aeabi_fmul>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80091c8:	4b19      	ldr	r3, [pc, #100]	; (8009230 <st_prep_buffer+0x8a8>)
				float nominal_speed_sqr = nominal_speed*nominal_speed;
 80091ca:	4606      	mov	r6, r0
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69dd      	ldr	r5, [r3, #28]
 80091d0:	9300      	str	r3, [sp, #0]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 80091d2:	4629      	mov	r1, r5
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80091d4:	f8d3 b028 	ldr.w	fp, [r3, #40]	; 0x28
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 80091d8:	f7f7 ff08 	bl	8000fec <__aeabi_fcmplt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d069      	beq.n	80092b4 <st_prep_buffer+0x92c>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80091e0:	4629      	mov	r1, r5
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7f7 fc5a 	bl	8000a9c <__aeabi_fsub>
 80091e8:	4621      	mov	r1, r4
 80091ea:	f7f7 fd61 	bl	8000cb0 <__aeabi_fmul>
 80091ee:	4659      	mov	r1, fp
 80091f0:	f7f7 fc56 	bl	8000aa0 <__addsf3>
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80091f4:	2100      	movs	r1, #0
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 80091f6:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
          if (prep.accelerate_until <= 0.0f) { // Deceleration-only.
 80091fa:	f7f7 ff01 	bl	8001000 <__aeabi_fcmple>
 80091fe:	2800      	cmp	r0, #0
 8009200:	f040 80c6 	bne.w	8009390 <st_prep_buffer+0xa08>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 8009204:	4641      	mov	r1, r8
 8009206:	4630      	mov	r0, r6
 8009208:	f7f7 fc48 	bl	8000a9c <__aeabi_fsub>
 800920c:	4621      	mov	r1, r4
 800920e:	f7f7 fd4f 	bl	8000cb0 <__aeabi_fmul>
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 8009212:	2303      	movs	r3, #3
 8009214:	f88a 3014 	strb.w	r3, [sl, #20]
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	4b03      	ldr	r3, [pc, #12]	; (8009228 <st_prep_buffer+0x8a0>)
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 800921c:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
						prep.maximum_speed = nominal_speed;
 8009220:	f8ca 9020 	str.w	r9, [sl, #32]
 8009224:	791d      	ldrb	r5, [r3, #4]
 8009226:	e744      	b.n	80090b2 <st_prep_buffer+0x72a>
 8009228:	20001188 	.word	0x20001188
 800922c:	20000b34 	.word	0x20000b34
 8009230:	20000af8 	.word	0x20000af8
 8009234:	20000b86 	.word	0x20000b86
 8009238:	20000b85 	.word	0x20000b85
 800923c:	20000cc0 	.word	0x20000cc0
 8009240:	20000bc4 	.word	0x20000bc4
 8009244:	3fa00000 	.word	0x3fa00000
 8009248:	2000134c 	.word	0x2000134c
 800924c:	20000afc 	.word	0x20000afc
          prep.current_speed = prep.exit_speed;
 8009250:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 8009254:	f027 0708 	bic.w	r7, r7, #8
          prep.current_speed = prep.exit_speed;
 8009258:	f8ca 101c 	str.w	r1, [sl, #28]
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 800925c:	4608      	mov	r0, r1
 800925e:	f7f7 fd27 	bl	8000cb0 <__aeabi_fmul>
        st_prep_block->is_pwm_rate_adjusted = false;
 8009262:	2200      	movs	r2, #0
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009264:	9900      	ldr	r1, [sp, #0]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009266:	4b73      	ldr	r3, [pc, #460]	; (8009434 <st_prep_buffer+0xaac>)
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 8009268:	61c8      	str	r0, [r1, #28]
        if (settings.flags & BITFLAG_LASER_MODE) {
 800926a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 800926e:	f88a 7001 	strb.w	r7, [sl, #1]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009272:	079f      	lsls	r7, r3, #30
        st_prep_block->is_pwm_rate_adjusted = false;
 8009274:	76a2      	strb	r2, [r4, #26]
        if (settings.flags & BITFLAG_LASER_MODE) {
 8009276:	f57f aef3 	bpl.w	8009060 <st_prep_buffer+0x6d8>
          if (pl_block->condition & PL_COND_FLAG_SPINDLE_CCW) {
 800927a:	9a00      	ldr	r2, [sp, #0]
 800927c:	7e93      	ldrb	r3, [r2, #26]
 800927e:	0699      	lsls	r1, r3, #26
 8009280:	f57f aeee 	bpl.w	8009060 <st_prep_buffer+0x6d8>
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 8009284:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009286:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800928a:	4616      	mov	r6, r2
 800928c:	f7f7 fdc4 	bl	8000e18 <__aeabi_fdiv>
            st_prep_block->is_pwm_rate_adjusted = true;
 8009290:	2301      	movs	r3, #1
 8009292:	76a3      	strb	r3, [r4, #26]
 8009294:	4b68      	ldr	r3, [pc, #416]	; (8009438 <st_prep_buffer+0xab0>)
 8009296:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
 800929a:	791d      	ldrb	r5, [r3, #4]
            prep.inv_rate = 1.0f / pl_block->programmed_rate;
 800929c:	f8ca 0030 	str.w	r0, [sl, #48]	; 0x30
 80092a0:	f005 0602 	and.w	r6, r5, #2
 80092a4:	e6dc      	b.n	8009060 <st_prep_buffer+0x6d8>
            prep.ramp_type = RAMP_CRUISE;
 80092a6:	2301      	movs	r3, #1
 80092a8:	46bb      	mov	fp, r7
 80092aa:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
            prep.current_speed = prep.maximum_speed;
 80092ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
            prep.ramp_type = RAMP_CRUISE;
 80092b0:	9303      	str	r3, [sp, #12]
 80092b2:	e4c4      	b.n	8008c3e <st_prep_buffer+0x2b6>
								0.5f*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 80092b4:	4641      	mov	r1, r8
 80092b6:	4628      	mov	r0, r5
 80092b8:	f7f7 fbf0 	bl	8000a9c <__aeabi_fsub>
 80092bc:	4621      	mov	r1, r4
 80092be:	f7f7 fcf7 	bl	8000cb0 <__aeabi_fmul>
 80092c2:	4659      	mov	r1, fp
 80092c4:	f7f7 fbec 	bl	8000aa0 <__addsf3>
				float intersect_distance =
 80092c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80092cc:	f7f7 fcf0 	bl	8000cb0 <__aeabi_fmul>
				} else if (intersect_distance > 0.0f) {
 80092d0:	2100      	movs	r1, #0
				float intersect_distance =
 80092d2:	4607      	mov	r7, r0
				} else if (intersect_distance > 0.0f) {
 80092d4:	f7f7 fea8 	bl	8001028 <__aeabi_fcmpgt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d04c      	beq.n	8009376 <st_prep_buffer+0x9ee>
					if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 80092dc:	4639      	mov	r1, r7
 80092de:	4658      	mov	r0, fp
 80092e0:	f7f7 fea2 	bl	8001028 <__aeabi_fcmpgt>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d03f      	beq.n	8009368 <st_prep_buffer+0x9e0>
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80092e8:	4641      	mov	r1, r8
 80092ea:	4630      	mov	r0, r6
 80092ec:	f7f7 fbd6 	bl	8000a9c <__aeabi_fsub>
 80092f0:	4621      	mov	r1, r4
 80092f2:	f7f7 fcdd 	bl	8000cb0 <__aeabi_fmul>
 80092f6:	4601      	mov	r1, r0
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80092f8:	4638      	mov	r0, r7
						prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 80092fa:	f8ca 102c 	str.w	r1, [sl, #44]	; 0x2c
						if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 80092fe:	f7f7 fe93 	bl	8001028 <__aeabi_fcmpgt>
 8009302:	2800      	cmp	r0, #0
 8009304:	d061      	beq.n	80093ca <st_prep_buffer+0xa42>
							prep.maximum_speed = nominal_speed;
 8009306:	f8ca 9020 	str.w	r9, [sl, #32]
							if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 800930a:	4629      	mov	r1, r5
 800930c:	4630      	mov	r0, r6
 800930e:	f7f7 fe63 	bl	8000fd8 <__aeabi_fcmpeq>
 8009312:	2800      	cmp	r0, #0
 8009314:	d07a      	beq.n	800940c <st_prep_buffer+0xa84>
								prep.ramp_type = RAMP_CRUISE;
 8009316:	2301      	movs	r3, #1
 8009318:	4a47      	ldr	r2, [pc, #284]	; (8009438 <st_prep_buffer+0xab0>)
 800931a:	f88a 3014 	strb.w	r3, [sl, #20]
 800931e:	7915      	ldrb	r5, [r2, #4]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	e6c6      	b.n	80090b2 <st_prep_buffer+0x72a>
 8009324:	4770      	bx	lr
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 8009326:	461a      	mov	r2, r3
 8009328:	4634      	mov	r4, r6
 800932a:	e6e2      	b.n	80090f2 <st_prep_buffer+0x76a>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 800932c:	f7fb f9fc 	bl	8004728 <plan_get_exec_block_exit_speed_sqr>
 8009330:	4680      	mov	r8, r0
          prep.exit_speed = sqrtf(exit_speed_sqr);
 8009332:	f001 ff29 	bl	800b188 <sqrtf>
 8009336:	4b41      	ldr	r3, [pc, #260]	; (800943c <st_prep_buffer+0xab4>)
 8009338:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4618      	mov	r0, r3
 8009342:	e73b      	b.n	80091bc <st_prep_buffer+0x834>
					prep.exit_speed = sqrtf(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 8009344:	4639      	mov	r1, r7
 8009346:	4638      	mov	r0, r7
 8009348:	f7f7 fbaa 	bl	8000aa0 <__addsf3>
 800934c:	4659      	mov	r1, fp
 800934e:	f7f7 fcaf 	bl	8000cb0 <__aeabi_fmul>
 8009352:	4601      	mov	r1, r0
 8009354:	4620      	mov	r0, r4
 8009356:	f7f7 fba1 	bl	8000a9c <__aeabi_fsub>
 800935a:	f001 ff15 	bl	800b188 <sqrtf>
 800935e:	f8cd 8004 	str.w	r8, [sp, #4]
 8009362:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009366:	e6a4      	b.n	80090b2 <st_prep_buffer+0x72a>
            prep.ramp_type = RAMP_DECEL;
 8009368:	2302      	movs	r3, #2
 800936a:	4a33      	ldr	r2, [pc, #204]	; (8009438 <st_prep_buffer+0xab0>)
 800936c:	f88a 3014 	strb.w	r3, [sl, #20]
 8009370:	7915      	ldrb	r5, [r2, #4]
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	e69d      	b.n	80090b2 <st_prep_buffer+0x72a>
 8009376:	4a30      	ldr	r2, [pc, #192]	; (8009438 <st_prep_buffer+0xab0>)
					prep.maximum_speed = prep.exit_speed;
 8009378:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800937c:	7915      	ldrb	r5, [r2, #4]
 800937e:	f89a 2014 	ldrb.w	r2, [sl, #20]
 8009382:	f8ca 3020 	str.w	r3, [sl, #32]
 8009386:	9201      	str	r2, [sp, #4]
					prep.accelerate_until = 0.0f;
 8009388:	2200      	movs	r2, #0
 800938a:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
 800938e:	e690      	b.n	80090b2 <st_prep_buffer+0x72a>
            prep.ramp_type = RAMP_DECEL;
 8009390:	2402      	movs	r4, #2
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009392:	9b00      	ldr	r3, [sp, #0]
            prep.ramp_type = RAMP_DECEL;
 8009394:	f88a 4014 	strb.w	r4, [sl, #20]
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 8009398:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800939a:	4658      	mov	r0, fp
 800939c:	f7f7 fc88 	bl	8000cb0 <__aeabi_fmul>
 80093a0:	4601      	mov	r1, r0
 80093a2:	f7f7 fb7d 	bl	8000aa0 <__addsf3>
 80093a6:	4601      	mov	r1, r0
 80093a8:	4628      	mov	r0, r5
 80093aa:	f7f7 fb77 	bl	8000a9c <__aeabi_fsub>
 80093ae:	f001 feeb 	bl	800b188 <sqrtf>
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 80093b2:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80093b6:	9401      	str	r4, [sp, #4]
 80093b8:	f043 0308 	orr.w	r3, r3, #8
 80093bc:	f88a 3001 	strb.w	r3, [sl, #1]
 80093c0:	4b1d      	ldr	r3, [pc, #116]	; (8009438 <st_prep_buffer+0xab0>)
            prep.exit_speed = sqrtf(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 80093c2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80093c6:	791d      	ldrb	r5, [r3, #4]
 80093c8:	e673      	b.n	80090b2 <st_prep_buffer+0x72a>
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80093ca:	9b00      	ldr	r3, [sp, #0]
 80093cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
							prep.accelerate_until = intersect_distance;
 80093ce:	f8ca 7028 	str.w	r7, [sl, #40]	; 0x28
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80093d2:	4608      	mov	r0, r1
							prep.decelerate_after = intersect_distance;
 80093d4:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
							prep.maximum_speed = sqrtf(2.0f*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 80093d8:	f7f7 fb62 	bl	8000aa0 <__addsf3>
 80093dc:	4639      	mov	r1, r7
 80093de:	f7f7 fc67 	bl	8000cb0 <__aeabi_fmul>
 80093e2:	4641      	mov	r1, r8
 80093e4:	f7f7 fb5c 	bl	8000aa0 <__addsf3>
 80093e8:	f001 fece 	bl	800b188 <sqrtf>
 80093ec:	4b12      	ldr	r3, [pc, #72]	; (8009438 <st_prep_buffer+0xab0>)
 80093ee:	f8ca 0020 	str.w	r0, [sl, #32]
 80093f2:	791d      	ldrb	r5, [r3, #4]
 80093f4:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	e65a      	b.n	80090b2 <st_prep_buffer+0x72a>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 80093fc:	4b0e      	ldr	r3, [pc, #56]	; (8009438 <st_prep_buffer+0xab0>)
 80093fe:	f048 0901 	orr.w	r9, r8, #1
 8009402:	f883 9004 	strb.w	r9, [r3, #4]
}
 8009406:	b011      	add	sp, #68	; 0x44
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	f7f7 fb44 	bl	8000a9c <__aeabi_fsub>
 8009414:	4621      	mov	r1, r4
 8009416:	f7f7 fc4b 	bl	8000cb0 <__aeabi_fmul>
 800941a:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800941e:	f7f7 fb3f 	bl	8000aa0 <__addsf3>
 8009422:	4b05      	ldr	r3, [pc, #20]	; (8009438 <st_prep_buffer+0xab0>)
 8009424:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
 8009428:	791d      	ldrb	r5, [r3, #4]
 800942a:	f89a 3014 	ldrb.w	r3, [sl, #20]
 800942e:	9301      	str	r3, [sp, #4]
 8009430:	e63f      	b.n	80090b2 <st_prep_buffer+0x72a>
 8009432:	bf00      	nop
 8009434:	2000134c 	.word	0x2000134c
 8009438:	20001188 	.word	0x20001188
 800943c:	20000af8 	.word	0x20000af8

08009440 <st_get_realtime_rate>:
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 8009440:	4b04      	ldr	r3, [pc, #16]	; (8009454 <st_get_realtime_rate+0x14>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	f013 0f7c 	tst.w	r3, #124	; 0x7c
    return prep.current_speed;
 8009448:	bf1a      	itte	ne
 800944a:	4b03      	ldrne	r3, [pc, #12]	; (8009458 <st_get_realtime_rate+0x18>)
 800944c:	69d8      	ldrne	r0, [r3, #28]
  return 0.0f;
 800944e:	2000      	moveq	r0, #0
}
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20001188 	.word	0x20001188
 8009458:	20000afc 	.word	0x20000afc

0800945c <system_init>:
#include "grbl.h"



void system_init()
{
 800945c:	b510      	push	{r4, lr}

#ifdef STM32F103C8
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 800945e:	2101      	movs	r1, #1
{
 8009460:	b084      	sub	sp, #16
  RCC_APB2PeriphClockCmd(RCC_CONTROL_PORT | RCC_APB2Periph_AFIO, ENABLE);
 8009462:	2009      	movs	r0, #9
 8009464:	f7f8 fa30 	bl	80018c8 <RCC_APB2PeriphClockCmd>
#ifdef DISABLE_CONTROL_PIN_PULL_UP
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
#else
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
#endif
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009468:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE); // to enable PA15, PB3, PB4 pins
 800946c:	2101      	movs	r1, #1
 800946e:	481a      	ldr	r0, [pc, #104]	; (80094d8 <system_init+0x7c>)
 8009470:	f7f8 f98e 	bl	8001790 <GPIO_PinRemapConfig>
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009474:	2203      	movs	r2, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009476:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStructure.GPIO_Pin = CONTROL_MASK;
 8009478:	a904      	add	r1, sp, #16
 800947a:	f821 4d10 	strh.w	r4, [r1, #-16]!
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 800947e:	4817      	ldr	r0, [pc, #92]	; (80094dc <system_init+0x80>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8009480:	f88d 2002 	strb.w	r2, [sp, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8009484:	f88d 3003 	strb.w	r3, [sp, #3]
  GPIO_Init(CONTROL_PORT, &GPIO_InitStructure);
 8009488:	f7f7 ffba 	bl	8001400 <GPIO_Init>

  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_RESET_BIT);
 800948c:	2105      	movs	r1, #5
 800948e:	2001      	movs	r0, #1
 8009490:	f7f8 f9b4 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_FEED_HOLD_BIT);
 8009494:	2106      	movs	r1, #6
 8009496:	2001      	movs	r0, #1
 8009498:	f7f8 f9b0 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_CYCLE_START_BIT);
 800949c:	2107      	movs	r1, #7
 800949e:	2001      	movs	r0, #1
 80094a0:	f7f8 f9ac 	bl	80017fc <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_CONTROL_PORT, CONTROL_SAFETY_DOOR_BIT);
 80094a4:	2108      	movs	r1, #8
 80094a6:	2001      	movs	r0, #1
 80094a8:	f7f8 f9a8 	bl	80017fc <GPIO_EXTILineConfig>

  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 80094ac:	2100      	movs	r1, #0
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 80094ae:	2210      	movs	r2, #16
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80094b0:	2301      	movs	r3, #1
  EXTI_Init(&EXTI_InitStructure);
 80094b2:	a802      	add	r0, sp, #8
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; //Interrupt mode, optional values for the interrupt EXTI_Mode_Interrupt and event EXTI_Mode_Event.
 80094b4:	f88d 100c 	strb.w	r1, [sp, #12]
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling; //Trigger mode, can be a falling edge trigger EXTI_Trigger_Falling, the rising edge triggered EXTI_Trigger_Rising, or any level (rising edge and falling edge trigger EXTI_Trigger_Rising_Falling)
 80094b8:	f88d 200d 	strb.w	r2, [sp, #13]
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80094bc:	f88d 300e 	strb.w	r3, [sp, #14]
  EXTI_InitStructure.EXTI_Line = CONTROL_MASK;    //
 80094c0:	9402      	str	r4, [sp, #8]
  EXTI_Init(&EXTI_InitStructure);
 80094c2:	f7f7 fe53 	bl	800116c <EXTI_Init>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn; //Enable keypad external interrupt channel
 80094c6:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <system_init+0x84>)
 80094c8:	a804      	add	r0, sp, #16
 80094ca:	f840 3d0c 	str.w	r3, [r0, #-12]!
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //Priority 2,
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02; //Sub priority 2
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //Enable external interrupt channel
  NVIC_Init(&NVIC_InitStructure);
 80094ce:	f7f7 fe1b 	bl	8001108 <NVIC_Init>
#endif
}
 80094d2:	b004      	add	sp, #16
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	00300200 	.word	0x00300200
 80094dc:	40010c00 	.word	0x40010c00
 80094e0:	01020217 	.word	0x01020217

080094e4 <system_control_get_state>:

// Returns control pin state as a uint8 bitfield. Each bit indicates the input pin state, where
// triggered is 1 and not triggered is 0. Invert mask is applied. Bitfield organization is
// defined by the CONTROL_PIN_INDEX in the header file.
uint8_t system_control_get_state()
{
 80094e4:	b508      	push	{r3, lr}
#endif
#ifdef WIN32
  uint8_t pin = 0;
#endif
#ifdef STM32F103C8
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 80094e6:	480a      	ldr	r0, [pc, #40]	; (8009510 <system_control_get_state+0x2c>)
 80094e8:	f7f8 f940 	bl	800176c <GPIO_ReadInputData>
#endif
  #ifdef INVERT_CONTROL_PIN_MASK
    pin ^= INVERT_CONTROL_PIN_MASK;
  #endif
  if (pin) {
 80094ec:	b168      	cbz	r0, 800950a <system_control_get_state+0x26>
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(pin,(1<<CONTROL_SAFETY_DOOR_BIT))) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 80094ee:	f080 0320 	eor.w	r3, r0, #32
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80094f2:	0641      	lsls	r1, r0, #25
  uint8_t control_state = 0;
 80094f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 80094f8:	bf58      	it	pl
 80094fa:	f043 0302 	orrpl.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 80094fe:	0602      	lsls	r2, r0, #24
 8009500:	d401      	bmi.n	8009506 <system_control_get_state+0x22>
 8009502:	f043 0304 	orr.w	r3, r3, #4
  }
  return(control_state);
}
 8009506:	4618      	mov	r0, r3
 8009508:	bd08      	pop	{r3, pc}
  uint8_t control_state = 0;
 800950a:	4603      	mov	r3, r0
}
 800950c:	4618      	mov	r0, r3
 800950e:	bd08      	pop	{r3, pc}
 8009510:	40010c00 	.word	0x40010c00

08009514 <EXTI9_5_IRQHandler>:
  }
}
#endif
#if defined (STM32F103C8)
void EXTI9_5_IRQHandler(void)
{
 8009514:	b508      	push	{r3, lr}
    EXTI_ClearITPendingBit((1 << CONTROL_RESET_BIT) | (1 << CONTROL_FEED_HOLD_BIT) | (1 << CONTROL_CYCLE_START_BIT) | (1 << CONTROL_SAFETY_DOOR_BIT));
 8009516:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800951a:	f7f7 fe73 	bl	8001204 <EXTI_ClearITPendingBit>
  uint16_t pin= GPIO_ReadInputData(CONTROL_PIN_PORT);
 800951e:	481b      	ldr	r0, [pc, #108]	; (800958c <EXTI9_5_IRQHandler+0x78>)
 8009520:	f7f8 f924 	bl	800176c <GPIO_ReadInputData>
  if (pin) {
 8009524:	b1b8      	cbz	r0, 8009556 <EXTI9_5_IRQHandler+0x42>
    if (bit_isfalse(pin,(1<<CONTROL_RESET_BIT))) { control_state |= CONTROL_PIN_INDEX_RESET; }
 8009526:	f010 0220 	ands.w	r2, r0, #32
  uint8_t control_state = 0;
 800952a:	bf0c      	ite	eq
 800952c:	2301      	moveq	r3, #1
 800952e:	2300      	movne	r3, #0
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009530:	0641      	lsls	r1, r0, #25
 8009532:	d411      	bmi.n	8009558 <EXTI9_5_IRQHandler+0x44>
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009534:	0600      	lsls	r0, r0, #24
    if (bit_isfalse(pin,(1<<CONTROL_FEED_HOLD_BIT))) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 8009536:	f043 0302 	orr.w	r3, r3, #2
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 800953a:	d419      	bmi.n	8009570 <EXTI9_5_IRQHandler+0x5c>
	uint8_t pin = system_control_get_state();
	if (pin) 
	{ 
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 800953c:	07db      	lsls	r3, r3, #31
 800953e:	d40f      	bmi.n	8009560 <EXTI9_5_IRQHandler+0x4c>
		{
			mc_reset();
		}
		else if (bit_istrue(pin, CONTROL_PIN_INDEX_CYCLE_START))
		{
			bit_true(sys_rt_exec_state, EXEC_CYCLE_START);
 8009540:	4a13      	ldr	r2, [pc, #76]	; (8009590 <EXTI9_5_IRQHandler+0x7c>)
 8009542:	7813      	ldrb	r3, [r2, #0]
 8009544:	f043 0302 	orr.w	r3, r3, #2
 8009548:	7013      	strb	r3, [r2, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 800954a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800954e:	4b11      	ldr	r3, [pc, #68]	; (8009594 <EXTI9_5_IRQHandler+0x80>)
 8009550:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
		}
#endif
		NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
}
}
 8009554:	bd08      	pop	{r3, pc}
 8009556:	bd08      	pop	{r3, pc}
    if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 8009558:	0601      	lsls	r1, r0, #24
 800955a:	d5ef      	bpl.n	800953c <EXTI9_5_IRQHandler+0x28>
	if (pin) 
 800955c:	2a00      	cmp	r2, #0
 800955e:	d1fa      	bne.n	8009556 <EXTI9_5_IRQHandler+0x42>
			mc_reset();
 8009560:	f7fa fd96 	bl	8004090 <mc_reset>
 8009564:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <EXTI9_5_IRQHandler+0x80>)
 800956a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 800956e:	bd08      	pop	{r3, pc}
		if (bit_istrue(pin,CONTROL_PIN_INDEX_RESET)) 
 8009570:	2a00      	cmp	r2, #0
 8009572:	d0f5      	beq.n	8009560 <EXTI9_5_IRQHandler+0x4c>
			bit_true(sys_rt_exec_state, EXEC_FEED_HOLD);
 8009574:	4a06      	ldr	r2, [pc, #24]	; (8009590 <EXTI9_5_IRQHandler+0x7c>)
 8009576:	7813      	ldrb	r3, [r2, #0]
 8009578:	f043 0308 	orr.w	r3, r3, #8
 800957c:	7013      	strb	r3, [r2, #0]
 800957e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009582:	4b04      	ldr	r3, [pc, #16]	; (8009594 <EXTI9_5_IRQHandler+0x80>)
 8009584:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
 8009588:	bd08      	pop	{r3, pc}
 800958a:	bf00      	nop
 800958c:	40010c00 	.word	0x40010c00
 8009590:	2000119d 	.word	0x2000119d
 8009594:	e000e100 	.word	0xe000e100

08009598 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 8009598:	2000      	movs	r0, #0
 800959a:	4770      	bx	lr

0800959c <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4605      	mov	r5, r0
 80095a0:	2400      	movs	r4, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
 80095a2:	4629      	mov	r1, r5
 80095a4:	b2e0      	uxtb	r0, r4
 80095a6:	f7fe f989 	bl	80078bc <settings_read_startup_line>
 80095aa:	b128      	cbz	r0, 80095b8 <system_execute_startup+0x1c>
      line[0] = 0;
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
    } else {
      if (line[0] != 0) {
 80095ac:	782b      	ldrb	r3, [r5, #0]
 80095ae:	b94b      	cbnz	r3, 80095c4 <system_execute_startup+0x28>
 80095b0:	3401      	adds	r4, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 80095b2:	2c02      	cmp	r4, #2
 80095b4:	d1f5      	bne.n	80095a2 <system_execute_startup+0x6>
        uint8_t status_code = gc_execute_line(line);
        report_execute_startup_message(line,status_code);
      }
    }
  }
}
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
      line[0] = 0;
 80095b8:	7028      	strb	r0, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 80095ba:	2107      	movs	r1, #7
 80095bc:	4628      	mov	r0, r5
 80095be:	f7fd fd49 	bl	8007054 <report_execute_startup_message>
 80095c2:	e7f5      	b.n	80095b0 <system_execute_startup+0x14>
        uint8_t status_code = gc_execute_line(line);
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7f8 fc4d 	bl	8001e64 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 80095ca:	4601      	mov	r1, r0
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7fd fd41 	bl	8007054 <report_execute_startup_message>
 80095d2:	e7ed      	b.n	80095b0 <system_execute_startup+0x14>

080095d4 <system_execute_line>:
// the lines that are processed afterward, not necessarily real-time during a cycle,
// since there are motions already stored in the buffer. However, this 'lag' should not
// be an issue, since these commands are not typically used during a cycle.
uint8_t system_execute_line(char *line)
{
  uint8_t char_counter = 1;
 80095d4:	2301      	movs	r3, #1
{
 80095d6:	b570      	push	{r4, r5, r6, lr}
  uint8_t helper_var = 0; // Helper variable
  float parameter, value;
  switch( line[char_counter] ) {
 80095d8:	7844      	ldrb	r4, [r0, #1]
{
 80095da:	b084      	sub	sp, #16
  switch( line[char_counter] ) {
 80095dc:	2c43      	cmp	r4, #67	; 0x43
{
 80095de:	4605      	mov	r5, r0
  uint8_t char_counter = 1;
 80095e0:	f88d 3007 	strb.w	r3, [sp, #7]
  switch( line[char_counter] ) {
 80095e4:	d034      	beq.n	8009650 <system_execute_line+0x7c>
 80095e6:	d939      	bls.n	800965c <system_execute_line+0x88>
 80095e8:	2c4a      	cmp	r4, #74	; 0x4a
 80095ea:	d108      	bne.n	80095fe <system_execute_line+0x2a>
    case 0 : report_grbl_help(); break;
    case 'J' : // Jogging
      // Execute only if in IDLE or JOG states.
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 80095ec:	4b93      	ldr	r3, [pc, #588]	; (800983c <system_execute_line+0x268>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80095f4:	d039      	beq.n	800966a <system_execute_line+0x96>
                report_startup_line(helper_var,line);
              }
            }
            break;
          } else { // Store startup line [IDLE Only] Prevents motion during ALARM.
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80095f6:	2408      	movs	r4, #8
            return(settings_store_global_setting((uint8_t)parameter, value));
          }
      }
  }
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
}
 80095f8:	4620      	mov	r0, r4
 80095fa:	b004      	add	sp, #16
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 80095fe:	2c58      	cmp	r4, #88	; 0x58
 8009600:	d026      	beq.n	8009650 <system_execute_line+0x7c>
 8009602:	2c47      	cmp	r4, #71	; 0x47
 8009604:	d024      	beq.n	8009650 <system_execute_line+0x7c>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 8009606:	4e8d      	ldr	r6, [pc, #564]	; (800983c <system_execute_line+0x268>)
 8009608:	7833      	ldrb	r3, [r6, #0]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d8f3      	bhi.n	80095f6 <system_execute_line+0x22>
      switch( line[1] ) {
 800960e:	3c23      	subs	r4, #35	; 0x23
 8009610:	2c30      	cmp	r4, #48	; 0x30
 8009612:	f200 80b6 	bhi.w	8009782 <system_execute_line+0x1ae>
 8009616:	e8df f004 	tbb	[pc, r4]
 800961a:	b4ad      	.short	0xb4ad
 800961c:	b4b4b4b4 	.word	0xb4b4b4b4
 8009620:	b4b4b4b4 	.word	0xb4b4b4b4
 8009624:	b4b4b4b4 	.word	0xb4b4b4b4
 8009628:	b4b4b4b4 	.word	0xb4b4b4b4
 800962c:	b4b4b4b4 	.word	0xb4b4b4b4
 8009630:	b4b4b4b4 	.word	0xb4b4b4b4
 8009634:	b4b4b4b4 	.word	0xb4b4b4b4
 8009638:	b4b4b4b4 	.word	0xb4b4b4b4
 800963c:	a6b4b4b4 	.word	0xa6b4b4b4
 8009640:	b4b4b48d 	.word	0xb4b4b48d
 8009644:	b4b468b4 	.word	0xb4b468b4
 8009648:	49b4      	.short	0x49b4
 800964a:	7c          	.byte	0x7c
 800964b:	00          	.byte	0x00
  switch( line[char_counter] ) {
 800964c:	2c24      	cmp	r4, #36	; 0x24
 800964e:	d1da      	bne.n	8009606 <system_execute_line+0x32>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009650:	78ad      	ldrb	r5, [r5, #2]
 8009652:	b18d      	cbz	r5, 8009678 <system_execute_line+0xa4>
            default: return(STATUS_INVALID_STATEMENT);
 8009654:	2403      	movs	r4, #3
}
 8009656:	4620      	mov	r0, r4
 8009658:	b004      	add	sp, #16
 800965a:	bd70      	pop	{r4, r5, r6, pc}
  switch( line[char_counter] ) {
 800965c:	2c00      	cmp	r4, #0
 800965e:	d1f5      	bne.n	800964c <system_execute_line+0x78>
    case 0 : report_grbl_help(); break;
 8009660:	f7fd f968 	bl	8006934 <report_grbl_help>
}
 8009664:	4620      	mov	r0, r4
 8009666:	b004      	add	sp, #16
 8009668:	bd70      	pop	{r4, r5, r6, pc}
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 800966a:	7883      	ldrb	r3, [r0, #2]
 800966c:	2b3d      	cmp	r3, #61	; 0x3d
 800966e:	d1f1      	bne.n	8009654 <system_execute_line+0x80>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 8009670:	f7f8 fbf8 	bl	8001e64 <gc_execute_line>
 8009674:	4604      	mov	r4, r0
 8009676:	e7bf      	b.n	80095f8 <system_execute_line+0x24>
      switch( line[1] ) {
 8009678:	2c43      	cmp	r4, #67	; 0x43
 800967a:	f000 80a0 	beq.w	80097be <system_execute_line+0x1ea>
 800967e:	d90b      	bls.n	8009698 <system_execute_line+0xc4>
 8009680:	2c47      	cmp	r4, #71	; 0x47
 8009682:	f000 80a9 	beq.w	80097d8 <system_execute_line+0x204>
 8009686:	2c58      	cmp	r4, #88	; 0x58
 8009688:	d104      	bne.n	8009694 <system_execute_line+0xc0>
          if (sys.state == STATE_ALARM) {
 800968a:	4e6c      	ldr	r6, [pc, #432]	; (800983c <system_execute_line+0x268>)
 800968c:	7833      	ldrb	r3, [r6, #0]
 800968e:	2b01      	cmp	r3, #1
 8009690:	f000 80a6 	beq.w	80097e0 <system_execute_line+0x20c>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009694:	2400      	movs	r4, #0
 8009696:	e7af      	b.n	80095f8 <system_execute_line+0x24>
      switch( line[1] ) {
 8009698:	2c24      	cmp	r4, #36	; 0x24
 800969a:	d1fb      	bne.n	8009694 <system_execute_line+0xc0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 800969c:	4b67      	ldr	r3, [pc, #412]	; (800983c <system_execute_line+0x268>)
 800969e:	781c      	ldrb	r4, [r3, #0]
 80096a0:	f014 0418 	ands.w	r4, r4, #24
 80096a4:	d1a7      	bne.n	80095f6 <system_execute_line+0x22>
          else { report_grbl_settings(); }
 80096a6:	f7fd f94b 	bl	8006940 <report_grbl_settings>
          break;
 80096aa:	e7a5      	b.n	80095f8 <system_execute_line+0x24>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 80096ac:	78ab      	ldrb	r3, [r5, #2]
 80096ae:	2b53      	cmp	r3, #83	; 0x53
 80096b0:	d1d0      	bne.n	8009654 <system_execute_line+0x80>
 80096b2:	78eb      	ldrb	r3, [r5, #3]
 80096b4:	2b54      	cmp	r3, #84	; 0x54
 80096b6:	d1cd      	bne.n	8009654 <system_execute_line+0x80>
 80096b8:	792b      	ldrb	r3, [r5, #4]
 80096ba:	2b3d      	cmp	r3, #61	; 0x3d
 80096bc:	d1ca      	bne.n	8009654 <system_execute_line+0x80>
 80096be:	79ab      	ldrb	r3, [r5, #6]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1c7      	bne.n	8009654 <system_execute_line+0x80>
          switch (line[5]) {
 80096c4:	796b      	ldrb	r3, [r5, #5]
 80096c6:	2b24      	cmp	r3, #36	; 0x24
 80096c8:	f000 8128 	beq.w	800991c <system_execute_line+0x348>
 80096cc:	2b2a      	cmp	r3, #42	; 0x2a
 80096ce:	f000 8121 	beq.w	8009914 <system_execute_line+0x340>
 80096d2:	2b23      	cmp	r3, #35	; 0x23
 80096d4:	d1be      	bne.n	8009654 <system_execute_line+0x80>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 80096d6:	2002      	movs	r0, #2
 80096d8:	f7fe f854 	bl	8007784 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 80096dc:	2009      	movs	r0, #9
 80096de:	f7fd f8c5 	bl	800686c <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80096e2:	2400      	movs	r4, #0
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 80096e4:	f7fa fcd4 	bl	8004090 <mc_reset>
          break;
 80096e8:	e786      	b.n	80095f8 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 80096ea:	2202      	movs	r2, #2
 80096ec:	78ac      	ldrb	r4, [r5, #2]
 80096ee:	f88d 2007 	strb.w	r2, [sp, #7]
 80096f2:	2c00      	cmp	r4, #0
 80096f4:	d047      	beq.n	8009786 <system_execute_line+0x1b2>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f47f af7d 	bne.w	80095f6 <system_execute_line+0x22>
            helper_var = true;  // Set helper_var to flag storing method.
 80096fc:	2401      	movs	r4, #1
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80096fe:	f10d 0107 	add.w	r1, sp, #7
 8009702:	aa02      	add	r2, sp, #8
 8009704:	4628      	mov	r0, r5
 8009706:	f7fa fcf3 	bl	80040f0 <read_float>
 800970a:	2800      	cmp	r0, #0
 800970c:	d16e      	bne.n	80097ec <system_execute_line+0x218>
 800970e:	2402      	movs	r4, #2
 8009710:	e772      	b.n	80095f8 <system_execute_line+0x24>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 8009712:	78ab      	ldrb	r3, [r5, #2]
 8009714:	2b4c      	cmp	r3, #76	; 0x4c
 8009716:	d19d      	bne.n	8009654 <system_execute_line+0x80>
 8009718:	78eb      	ldrb	r3, [r5, #3]
 800971a:	2b50      	cmp	r3, #80	; 0x50
 800971c:	d19a      	bne.n	8009654 <system_execute_line+0x80>
 800971e:	792c      	ldrb	r4, [r5, #4]
 8009720:	2c00      	cmp	r4, #0
 8009722:	d197      	bne.n	8009654 <system_execute_line+0x80>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 8009724:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state |= (mask);
 8009726:	4a46      	ldr	r2, [pc, #280]	; (8009840 <system_execute_line+0x26c>)
 8009728:	7813      	ldrb	r3, [r2, #0]
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i");
 8009730:	b662      	cpsie	i
 8009732:	e761      	b.n	80095f8 <system_execute_line+0x24>
          if ( line[++char_counter] == 0 ) {
 8009734:	2302      	movs	r3, #2
 8009736:	78ac      	ldrb	r4, [r5, #2]
 8009738:	f88d 3007 	strb.w	r3, [sp, #7]
 800973c:	2c00      	cmp	r4, #0
 800973e:	f000 80ab 	beq.w	8009898 <system_execute_line+0x2c4>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 8009742:	2c3d      	cmp	r4, #61	; 0x3d
 8009744:	f04f 0303 	mov.w	r3, #3
 8009748:	d184      	bne.n	8009654 <system_execute_line+0x80>
                line[char_counter-helper_var] = line[char_counter];
 800974a:	5cec      	ldrb	r4, [r5, r3]
 800974c:	18ea      	adds	r2, r5, r3
              } while (line[char_counter++] != 0);
 800974e:	3301      	adds	r3, #1
                line[char_counter-helper_var] = line[char_counter];
 8009750:	f802 4c03 	strb.w	r4, [r2, #-3]
              } while (line[char_counter++] != 0);
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2c00      	cmp	r4, #0
 8009758:	d1f7      	bne.n	800974a <system_execute_line+0x176>
              settings_store_build_info(line);
 800975a:	4628      	mov	r0, r5
 800975c:	f88d 3007 	strb.w	r3, [sp, #7]
 8009760:	f7fd fff8 	bl	8007754 <settings_store_build_info>
 8009764:	e748      	b.n	80095f8 <system_execute_line+0x24>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 8009766:	4b37      	ldr	r3, [pc, #220]	; (8009844 <system_execute_line+0x270>)
 8009768:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800976c:	06db      	lsls	r3, r3, #27
 800976e:	d46b      	bmi.n	8009848 <system_execute_line+0x274>
 8009770:	2405      	movs	r4, #5
 8009772:	e741      	b.n	80095f8 <system_execute_line+0x24>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 8009774:	78ac      	ldrb	r4, [r5, #2]
 8009776:	2c00      	cmp	r4, #0
 8009778:	f47f af6c 	bne.w	8009654 <system_execute_line+0x80>
          else { report_ngc_parameters(); }
 800977c:	f7fd faf4 	bl	8006d68 <report_ngc_parameters>
          break;
 8009780:	e73a      	b.n	80095f8 <system_execute_line+0x24>
  uint8_t helper_var = 0; // Helper variable
 8009782:	2400      	movs	r4, #0
 8009784:	e7bb      	b.n	80096fe <system_execute_line+0x12a>
 8009786:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 8009788:	4630      	mov	r0, r6
 800978a:	4629      	mov	r1, r5
 800978c:	f7fe f896 	bl	80078bc <settings_read_startup_line>
 8009790:	b968      	cbnz	r0, 80097ae <system_execute_line+0x1da>
                report_status_message(STATUS_SETTING_READ_FAIL);
 8009792:	2007      	movs	r0, #7
 8009794:	f7fd f83c 	bl	8006810 <report_status_message>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 8009798:	2c00      	cmp	r4, #0
 800979a:	f47f af7b 	bne.w	8009694 <system_execute_line+0xc0>
 800979e:	2401      	movs	r4, #1
 80097a0:	b2e6      	uxtb	r6, r4
              if (!(settings_read_startup_line(helper_var, line))) {
 80097a2:	4630      	mov	r0, r6
 80097a4:	4629      	mov	r1, r5
 80097a6:	f7fe f889 	bl	80078bc <settings_read_startup_line>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d0f1      	beq.n	8009792 <system_execute_line+0x1be>
                report_startup_line(helper_var,line);
 80097ae:	4630      	mov	r0, r6
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7fd fc37 	bl	8007024 <report_startup_line>
            for (helper_var=0; helper_var < N_STARTUP_LINE; helper_var++) {
 80097b6:	2c00      	cmp	r4, #0
 80097b8:	f47f af6c 	bne.w	8009694 <system_execute_line+0xc0>
 80097bc:	e7ef      	b.n	800979e <system_execute_line+0x1ca>
          if ( sys.state == STATE_CHECK_MODE ) {
 80097be:	4b1f      	ldr	r3, [pc, #124]	; (800983c <system_execute_line+0x268>)
 80097c0:	781c      	ldrb	r4, [r3, #0]
 80097c2:	2c02      	cmp	r4, #2
 80097c4:	d061      	beq.n	800988a <system_execute_line+0x2b6>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	f47f af15 	bne.w	80095f6 <system_execute_line+0x22>
            sys.state = STATE_CHECK_MODE;
 80097cc:	2202      	movs	r2, #2
            report_feedback_message(MESSAGE_ENABLED);
 80097ce:	2004      	movs	r0, #4
            sys.state = STATE_CHECK_MODE;
 80097d0:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 80097d2:	f7fd f84b 	bl	800686c <report_feedback_message>
 80097d6:	e70f      	b.n	80095f8 <system_execute_line+0x24>
          report_gcode_modes();
 80097d8:	f7fd fb72 	bl	8006ec0 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80097dc:	462c      	mov	r4, r5
          break;
 80097de:	e70b      	b.n	80095f8 <system_execute_line+0x24>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 80097e0:	2003      	movs	r0, #3
 80097e2:	f7fd f843 	bl	800686c <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 80097e6:	462c      	mov	r4, r5
            sys.state = STATE_IDLE;
 80097e8:	7035      	strb	r5, [r6, #0]
 80097ea:	e705      	b.n	80095f8 <system_execute_line+0x24>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 80097ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80097f0:	1c53      	adds	r3, r2, #1
 80097f2:	5caa      	ldrb	r2, [r5, r2]
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2a3d      	cmp	r2, #61	; 0x3d
 80097f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80097fc:	f47f af2a 	bne.w	8009654 <system_execute_line+0x80>
          if (helper_var) { // Store startup line
 8009800:	2c00      	cmp	r4, #0
 8009802:	d063      	beq.n	80098cc <system_execute_line+0x2f8>
 8009804:	4618      	mov	r0, r3
              line[char_counter-helper_var] = line[char_counter];
 8009806:	5ce9      	ldrb	r1, [r5, r3]
 8009808:	1a1a      	subs	r2, r3, r0
 800980a:	54a9      	strb	r1, [r5, r2]
 800980c:	18ea      	adds	r2, r5, r3
            } while (line[char_counter++] != 0);
 800980e:	7812      	ldrb	r2, [r2, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2a00      	cmp	r2, #0
 8009816:	d1f6      	bne.n	8009806 <system_execute_line+0x232>
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 8009818:	4628      	mov	r0, r5
 800981a:	f88d 3007 	strb.w	r3, [sp, #7]
 800981e:	f7f8 fb21 	bl	8001e64 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 8009822:	4604      	mov	r4, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	f47f aee7 	bne.w	80095f8 <system_execute_line+0x24>
              helper_var = truncf(parameter); // Set helper_var to int value of parameter
 800982a:	9802      	ldr	r0, [sp, #8]
 800982c:	f7f7 fc42 	bl	80010b4 <__aeabi_f2uiz>
              settings_store_startup_line(helper_var,line);
 8009830:	4629      	mov	r1, r5
 8009832:	b2c0      	uxtb	r0, r0
 8009834:	f7fd ff7e 	bl	8007734 <settings_store_startup_line>
 8009838:	e6de      	b.n	80095f8 <system_execute_line+0x24>
 800983a:	bf00      	nop
 800983c:	20001188 	.word	0x20001188
 8009840:	2000119d 	.word	0x2000119d
 8009844:	2000134c 	.word	0x2000134c
          sys.state = STATE_HOMING; // Set system state variable
 8009848:	2004      	movs	r0, #4
          if (line[2] == 0) {
 800984a:	78ab      	ldrb	r3, [r5, #2]
          sys.state = STATE_HOMING; // Set system state variable
 800984c:	7030      	strb	r0, [r6, #0]
          if (line[2] == 0) {
 800984e:	b353      	cbz	r3, 80098a6 <system_execute_line+0x2d2>
            } else if (line[3] == 0) {
 8009850:	78ea      	ldrb	r2, [r5, #3]
 8009852:	2a00      	cmp	r2, #0
 8009854:	f47f aefe 	bne.w	8009654 <system_execute_line+0x80>
              switch (line[2]) {
 8009858:	2b58      	cmp	r3, #88	; 0x58
 800985a:	d057      	beq.n	800990c <system_execute_line+0x338>
 800985c:	d927      	bls.n	80098ae <system_execute_line+0x2da>
 800985e:	2b59      	cmp	r3, #89	; 0x59
 8009860:	d02c      	beq.n	80098bc <system_execute_line+0x2e8>
 8009862:	2b5a      	cmp	r3, #90	; 0x5a
 8009864:	f47f aef6 	bne.w	8009654 <system_execute_line+0x80>
					case 'B': mc_homing_cycle(HOMING_CYCLE_B); break;
 8009868:	f7fa fb5a 	bl	8003f20 <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 800986c:	7874      	ldrb	r4, [r6, #1]
 800986e:	2c00      	cmp	r4, #0
 8009870:	f47f af10 	bne.w	8009694 <system_execute_line+0xc0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 8009874:	7034      	strb	r4, [r6, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 8009876:	f7fe fce5 	bl	8008244 <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 800987a:	78ab      	ldrb	r3, [r5, #2]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f47f af09 	bne.w	8009694 <system_execute_line+0xc0>
 8009882:	4628      	mov	r0, r5
 8009884:	f7ff fe8a 	bl	800959c <system_execute_startup>
 8009888:	e6b6      	b.n	80095f8 <system_execute_line+0x24>
            mc_reset();
 800988a:	f7fa fc01 	bl	8004090 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 800988e:	2005      	movs	r0, #5
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 8009890:	462c      	mov	r4, r5
            report_feedback_message(MESSAGE_DISABLED);
 8009892:	f7fc ffeb 	bl	800686c <report_feedback_message>
 8009896:	e6af      	b.n	80095f8 <system_execute_line+0x24>
            settings_read_build_info(line);
 8009898:	4628      	mov	r0, r5
 800989a:	f7fe f829 	bl	80078f0 <settings_read_build_info>
            report_build_info(line);
 800989e:	4628      	mov	r0, r5
 80098a0:	f7fd fbfc 	bl	800709c <report_build_info>
 80098a4:	e6a8      	b.n	80095f8 <system_execute_line+0x24>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fb3a 	bl	8003f20 <mc_homing_cycle>
 80098ac:	e7de      	b.n	800986c <system_execute_line+0x298>
              switch (line[2]) {
 80098ae:	2b41      	cmp	r3, #65	; 0x41
 80098b0:	d008      	beq.n	80098c4 <system_execute_line+0x2f0>
 80098b2:	2b42      	cmp	r3, #66	; 0x42
 80098b4:	f47f aece 	bne.w	8009654 <system_execute_line+0x80>
					case 'B': mc_homing_cycle(HOMING_CYCLE_B); break;
 80098b8:	2010      	movs	r0, #16
 80098ba:	e7d5      	b.n	8009868 <system_execute_line+0x294>
                case 'Y': mc_homing_cycle(HOMING_CYCLE_Y); break;
 80098bc:	2002      	movs	r0, #2
 80098be:	f7fa fb2f 	bl	8003f20 <mc_homing_cycle>
 80098c2:	e7d3      	b.n	800986c <system_execute_line+0x298>
				case 'A': mc_homing_cycle(HOMING_CYCLE_A); break;
 80098c4:	2008      	movs	r0, #8
 80098c6:	f7fa fb2b 	bl	8003f20 <mc_homing_cycle>
 80098ca:	e7cf      	b.n	800986c <system_execute_line+0x298>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 80098cc:	f10d 0107 	add.w	r1, sp, #7
 80098d0:	aa03      	add	r2, sp, #12
 80098d2:	4628      	mov	r0, r5
 80098d4:	f7fa fc0c 	bl	80040f0 <read_float>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f43f af18 	beq.w	800970e <system_execute_line+0x13a>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 80098de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80098e2:	5ceb      	ldrb	r3, [r5, r3]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f47f aeb5 	bne.w	8009654 <system_execute_line+0x80>
 80098ea:	9c02      	ldr	r4, [sp, #8]
 80098ec:	490d      	ldr	r1, [pc, #52]	; (8009924 <system_execute_line+0x350>)
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7f7 fb9a 	bl	8001028 <__aeabi_fcmpgt>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f47f aead 	bne.w	8009654 <system_execute_line+0x80>
            return(settings_store_global_setting((uint8_t)parameter, value));
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7f7 fbda 	bl	80010b4 <__aeabi_f2uiz>
 8009900:	9903      	ldr	r1, [sp, #12]
 8009902:	b2c0      	uxtb	r0, r0
 8009904:	f7fe f828 	bl	8007958 <settings_store_global_setting>
 8009908:	4604      	mov	r4, r0
 800990a:	e675      	b.n	80095f8 <system_execute_line+0x24>
                case 'X': mc_homing_cycle(HOMING_CYCLE_X); break;
 800990c:	2001      	movs	r0, #1
 800990e:	f7fa fb07 	bl	8003f20 <mc_homing_cycle>
 8009912:	e7ab      	b.n	800986c <system_execute_line+0x298>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 8009914:	20ff      	movs	r0, #255	; 0xff
 8009916:	f7fd ff35 	bl	8007784 <settings_restore>
 800991a:	e6df      	b.n	80096dc <system_execute_line+0x108>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800991c:	2001      	movs	r0, #1
 800991e:	f7fd ff31 	bl	8007784 <settings_restore>
 8009922:	e6db      	b.n	80096dc <system_execute_line+0x108>
 8009924:	437f0000 	.word	0x437f0000

08009928 <system_flag_wco_change>:
{
 8009928:	b508      	push	{r3, lr}
    protocol_buffer_synchronize();
 800992a:	f7fc fc7b 	bl	8006224 <protocol_buffer_synchronize>
  sys.report_wco_counter = 0;
 800992e:	2200      	movs	r2, #0
 8009930:	4b01      	ldr	r3, [pc, #4]	; (8009938 <system_flag_wco_change+0x10>)
 8009932:	735a      	strb	r2, [r3, #13]
 8009934:	bd08      	pop	{r3, pc}
 8009936:	bf00      	nop
 8009938:	20001188 	.word	0x20001188

0800993c <system_convert_array_steps_to_mpos>:
{
 800993c:	b570      	push	{r4, r5, r6, lr}
    pos = steps[idx]/settings.steps_per_mm[idx];
 800993e:	4d13      	ldr	r5, [pc, #76]	; (800998c <system_convert_array_steps_to_mpos+0x50>)
{
 8009940:	4604      	mov	r4, r0
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009942:	6808      	ldr	r0, [r1, #0]
{
 8009944:	460e      	mov	r6, r1
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009946:	f7f7 f95f 	bl	8000c08 <__aeabi_i2f>
 800994a:	6829      	ldr	r1, [r5, #0]
 800994c:	f7f7 fa64 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009950:	6020      	str	r0, [r4, #0]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009952:	6870      	ldr	r0, [r6, #4]
 8009954:	f7f7 f958 	bl	8000c08 <__aeabi_i2f>
 8009958:	6869      	ldr	r1, [r5, #4]
 800995a:	f7f7 fa5d 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800995e:	6060      	str	r0, [r4, #4]
    pos = steps[idx]/settings.steps_per_mm[idx];
 8009960:	68b0      	ldr	r0, [r6, #8]
 8009962:	f7f7 f951 	bl	8000c08 <__aeabi_i2f>
 8009966:	68a9      	ldr	r1, [r5, #8]
 8009968:	f7f7 fa56 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800996c:	60a0      	str	r0, [r4, #8]
    pos = steps[idx]/settings.steps_per_mm[idx];
 800996e:	68f0      	ldr	r0, [r6, #12]
 8009970:	f7f7 f94a 	bl	8000c08 <__aeabi_i2f>
 8009974:	68e9      	ldr	r1, [r5, #12]
 8009976:	f7f7 fa4f 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800997a:	60e0      	str	r0, [r4, #12]
    pos = steps[idx]/settings.steps_per_mm[idx];
 800997c:	6930      	ldr	r0, [r6, #16]
 800997e:	f7f7 f943 	bl	8000c08 <__aeabi_i2f>
 8009982:	6929      	ldr	r1, [r5, #16]
 8009984:	f7f7 fa48 	bl	8000e18 <__aeabi_fdiv>
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 8009988:	6120      	str	r0, [r4, #16]
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	2000134c 	.word	0x2000134c

08009990 <system_check_travel_limits>:
{
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	4c4c      	ldr	r4, [pc, #304]	; (8009ac4 <system_check_travel_limits+0x134>)
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009994:	6807      	ldr	r7, [r0, #0]
 8009996:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
{
 800999a:	4606      	mov	r6, r0
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 800999c:	07ea      	lsls	r2, r5, #31
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 800999e:	f04f 0100 	mov.w	r1, #0
 80099a2:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80099a4:	d409      	bmi.n	80099ba <system_check_travel_limits+0x2a>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80099a6:	f7f7 fb3f 	bl	8001028 <__aeabi_fcmpgt>
 80099aa:	b920      	cbnz	r0, 80099b6 <system_check_travel_limits+0x26>
 80099ac:	4639      	mov	r1, r7
 80099ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80099b0:	f7f7 fb3a 	bl	8001028 <__aeabi_fcmpgt>
 80099b4:	b168      	cbz	r0, 80099d2 <system_check_travel_limits+0x42>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80099b6:	2001      	movs	r0, #1
}
 80099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80099ba:	f7f7 fb17 	bl	8000fec <__aeabi_fcmplt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d1f9      	bne.n	80099b6 <system_check_travel_limits+0x26>
 80099c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80099c4:	4639      	mov	r1, r7
 80099c6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80099ca:	f7f7 fb0f 	bl	8000fec <__aeabi_fcmplt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d1f1      	bne.n	80099b6 <system_check_travel_limits+0x26>
 80099d2:	6877      	ldr	r7, [r6, #4]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80099d4:	07ab      	lsls	r3, r5, #30
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80099d6:	f04f 0100 	mov.w	r1, #0
 80099da:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80099dc:	d43e      	bmi.n	8009a5c <system_check_travel_limits+0xcc>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80099de:	f7f7 fb23 	bl	8001028 <__aeabi_fcmpgt>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d1e7      	bne.n	80099b6 <system_check_travel_limits+0x26>
 80099e6:	4638      	mov	r0, r7
 80099e8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80099ea:	f7f7 faff 	bl	8000fec <__aeabi_fcmplt>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d1e1      	bne.n	80099b6 <system_check_travel_limits+0x26>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80099f2:	68b7      	ldr	r7, [r6, #8]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80099f4:	076a      	lsls	r2, r5, #29
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 80099f6:	f04f 0100 	mov.w	r1, #0
 80099fa:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 80099fc:	d43b      	bmi.n	8009a76 <system_check_travel_limits+0xe6>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 80099fe:	f7f7 fb13 	bl	8001028 <__aeabi_fcmpgt>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d1d7      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009a06:	4638      	mov	r0, r7
 8009a08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a0a:	f7f7 faef 	bl	8000fec <__aeabi_fcmplt>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d1d1      	bne.n	80099b6 <system_check_travel_limits+0x26>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009a12:	68f7      	ldr	r7, [r6, #12]
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009a14:	072b      	lsls	r3, r5, #28
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009a16:	f04f 0100 	mov.w	r1, #0
 8009a1a:	4638      	mov	r0, r7
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009a1c:	d438      	bmi.n	8009a90 <system_check_travel_limits+0x100>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009a1e:	f7f7 fb03 	bl	8001028 <__aeabi_fcmpgt>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d1c7      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009a26:	4638      	mov	r0, r7
 8009a28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a2a:	f7f7 fadf 	bl	8000fec <__aeabi_fcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d1c1      	bne.n	80099b6 <system_check_travel_limits+0x26>
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009a32:	f015 0f10 	tst.w	r5, #16
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009a36:	6935      	ldr	r5, [r6, #16]
 8009a38:	f04f 0100 	mov.w	r1, #0
 8009a3c:	4628      	mov	r0, r5
      if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8009a3e:	d034      	beq.n	8009aaa <system_check_travel_limits+0x11a>
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009a40:	f7f7 fad4 	bl	8000fec <__aeabi_fcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d1b6      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009a48:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009a50:	f7f7 faea 	bl	8001028 <__aeabi_fcmpgt>
  return(false);
 8009a54:	3000      	adds	r0, #0
 8009a56:	bf18      	it	ne
 8009a58:	2001      	movne	r0, #1
 8009a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (target[idx] < 0 || target[idx] > -settings.max_travel[idx]) { return(true); }
 8009a5c:	f7f7 fac6 	bl	8000fec <__aeabi_fcmplt>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d1a8      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009a64:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a66:	4638      	mov	r0, r7
 8009a68:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009a6c:	f7f7 fadc 	bl	8001028 <__aeabi_fcmpgt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d0be      	beq.n	80099f2 <system_check_travel_limits+0x62>
 8009a74:	e79f      	b.n	80099b6 <system_check_travel_limits+0x26>
 8009a76:	f7f7 fab9 	bl	8000fec <__aeabi_fcmplt>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d19b      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009a7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009a80:	4638      	mov	r0, r7
 8009a82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009a86:	f7f7 facf 	bl	8001028 <__aeabi_fcmpgt>
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d0c1      	beq.n	8009a12 <system_check_travel_limits+0x82>
 8009a8e:	e792      	b.n	80099b6 <system_check_travel_limits+0x26>
 8009a90:	f7f7 faac 	bl	8000fec <__aeabi_fcmplt>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d18e      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009a98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009aa0:	f7f7 fac2 	bl	8001028 <__aeabi_fcmpgt>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d0c4      	beq.n	8009a32 <system_check_travel_limits+0xa2>
 8009aa8:	e785      	b.n	80099b6 <system_check_travel_limits+0x26>
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 8009aaa:	f7f7 fabd 	bl	8001028 <__aeabi_fcmpgt>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d181      	bne.n	80099b6 <system_check_travel_limits+0x26>
 8009ab2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f7f7 fa99 	bl	8000fec <__aeabi_fcmplt>
  return(false);
 8009aba:	3000      	adds	r0, #0
 8009abc:	bf18      	it	ne
 8009abe:	2001      	movne	r0, #1
 8009ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	2000134c 	.word	0x2000134c

08009ac8 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009ac8:	b672      	cpsid	i
  sys_rt_exec_state |= (mask);
 8009aca:	4a03      	ldr	r2, [pc, #12]	; (8009ad8 <system_set_exec_state_flag+0x10>)
 8009acc:	7813      	ldrb	r3, [r2, #0]
 8009ace:	4318      	orrs	r0, r3
 8009ad0:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009ad2:	b662      	cpsie	i
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	2000119d 	.word	0x2000119d

08009adc <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i");
 8009adc:	b672      	cpsid	i
  sys_rt_exec_state &= ~(mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_state &= ~(mask);
 8009ade:	4a03      	ldr	r2, [pc, #12]	; (8009aec <system_clear_exec_state_flag+0x10>)
 8009ae0:	7813      	ldrb	r3, [r2, #0]
 8009ae2:	ea23 0000 	bic.w	r0, r3, r0
 8009ae6:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009ae8:	b662      	cpsie	i
 8009aea:	4770      	bx	lr
 8009aec:	2000119d 	.word	0x2000119d

08009af0 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009af0:	b672      	cpsid	i
  sys_rt_exec_alarm = (code);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = (code);
 8009af2:	4b02      	ldr	r3, [pc, #8]	; (8009afc <system_set_exec_alarm+0xc>)
 8009af4:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i");
 8009af6:	b662      	cpsie	i
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	200011c8 	.word	0x200011c8

08009b00 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i");
 8009b00:	b672      	cpsid	i
  sys_rt_exec_alarm = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_alarm = 0;
 8009b02:	2200      	movs	r2, #0
 8009b04:	4b01      	ldr	r3, [pc, #4]	; (8009b0c <system_clear_exec_alarm+0xc>)
 8009b06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009b08:	b662      	cpsie	i
 8009b0a:	4770      	bx	lr
 8009b0c:	200011c8 	.word	0x200011c8

08009b10 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i");
 8009b10:	b672      	cpsid	i
  sys_rt_exec_motion_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override |= (mask);
 8009b12:	4a03      	ldr	r2, [pc, #12]	; (8009b20 <system_set_exec_motion_override_flag+0x10>)
 8009b14:	7813      	ldrb	r3, [r2, #0]
 8009b16:	4318      	orrs	r0, r3
 8009b18:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009b1a:	b662      	cpsie	i
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20001184 	.word	0x20001184

08009b24 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i");
 8009b24:	b672      	cpsid	i
  sys_rt_exec_accessory_override |= (mask);
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override |= (mask);
 8009b26:	4a03      	ldr	r2, [pc, #12]	; (8009b34 <system_set_exec_accessory_override_flag+0x10>)
 8009b28:	7813      	ldrb	r3, [r2, #0]
 8009b2a:	4318      	orrs	r0, r3
 8009b2c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i");
 8009b2e:	b662      	cpsie	i
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	2000119c 	.word	0x2000119c

08009b38 <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i");
 8009b38:	b672      	cpsid	i
  sys_rt_exec_motion_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_motion_override = 0;
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4b01      	ldr	r3, [pc, #4]	; (8009b44 <system_clear_exec_motion_overrides+0xc>)
 8009b3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009b40:	b662      	cpsie	i
 8009b42:	4770      	bx	lr
 8009b44:	20001184 	.word	0x20001184

08009b48 <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i");
 8009b48:	b672      	cpsid	i
  sys_rt_exec_accessory_override = 0;
  LeaveCriticalSection(&CriticalSection);
#endif
#ifdef STM32F103C8
  __disable_irq();
  sys_rt_exec_accessory_override = 0;
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	4b01      	ldr	r3, [pc, #4]	; (8009b54 <system_clear_exec_accessory_overrides+0xc>)
 8009b4e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i");
 8009b50:	b662      	cpsie	i
 8009b52:	4770      	bx	lr
 8009b54:	2000119c 	.word	0x2000119c

08009b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009b58:	b430      	push	{r4, r5}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009b5a:	2400      	movs	r4, #0
  RCC->CIR = 0x009F0000;
 8009b5c:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8009b60:	4b3a      	ldr	r3, [pc, #232]	; (8009c4c <SystemInit+0xf4>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009b62:	493b      	ldr	r1, [pc, #236]	; (8009c50 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8009b64:	6818      	ldr	r0, [r3, #0]
{
 8009b66:	b082      	sub	sp, #8
  RCC->CR |= (uint32_t)0x00000001;
 8009b68:	f040 0001 	orr.w	r0, r0, #1
 8009b6c:	6018      	str	r0, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009b6e:	6858      	ldr	r0, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009b70:	461a      	mov	r2, r3
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8009b72:	4001      	ands	r1, r0
 8009b74:	6059      	str	r1, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009b76:	6819      	ldr	r1, [r3, #0]
 8009b78:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8009b7c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009b80:	6019      	str	r1, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009b82:	6819      	ldr	r1, [r3, #0]
 8009b84:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009b88:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8009b8a:	6859      	ldr	r1, [r3, #4]
 8009b8c:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8009b90:	6059      	str	r1, [r3, #4]
  RCC->CIR = 0x009F0000;
 8009b92:	609d      	str	r5, [r3, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009b94:	9400      	str	r4, [sp, #0]
 8009b96:	9401      	str	r4, [sp, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009b98:	6819      	ldr	r1, [r3, #0]
 8009b9a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009b9e:	6019      	str	r1, [r3, #0]
 8009ba0:	e003      	b.n	8009baa <SystemInit+0x52>
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009ba2:	9b00      	ldr	r3, [sp, #0]
 8009ba4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009ba8:	d009      	beq.n	8009bbe <SystemInit+0x66>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009baa:	6813      	ldr	r3, [r2, #0]
 8009bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb0:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f1      	beq.n	8009ba2 <SystemInit+0x4a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009bbe:	4b23      	ldr	r3, [pc, #140]	; (8009c4c <SystemInit+0xf4>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8009bc6:	bf18      	it	ne
 8009bc8:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009bca:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8009bcc:	9b01      	ldr	r3, [sp, #4]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d006      	beq.n	8009be0 <SystemInit+0x88>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8009bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009bd6:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <SystemInit+0xfc>)
 8009bd8:	609a      	str	r2, [r3, #8]
}
 8009bda:	b002      	add	sp, #8
 8009bdc:	bc30      	pop	{r4, r5}
 8009bde:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009be0:	491d      	ldr	r1, [pc, #116]	; (8009c58 <SystemInit+0x100>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009be2:	4b1a      	ldr	r3, [pc, #104]	; (8009c4c <SystemInit+0xf4>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009be4:	6808      	ldr	r0, [r1, #0]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009be6:	461a      	mov	r2, r3
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8009be8:	f040 0010 	orr.w	r0, r0, #16
 8009bec:	6008      	str	r0, [r1, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8009bee:	6808      	ldr	r0, [r1, #0]
 8009bf0:	f020 0003 	bic.w	r0, r0, #3
 8009bf4:	6008      	str	r0, [r1, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8009bf6:	6808      	ldr	r0, [r1, #0]
 8009bf8:	f040 0002 	orr.w	r0, r0, #2
 8009bfc:	6008      	str	r0, [r1, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8009bfe:	6859      	ldr	r1, [r3, #4]
 8009c00:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8009c02:	6859      	ldr	r1, [r3, #4]
 8009c04:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8009c06:	6859      	ldr	r1, [r3, #4]
 8009c08:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009c0c:	6059      	str	r1, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8009c0e:	6859      	ldr	r1, [r3, #4]
 8009c10:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8009c14:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8009c16:	6859      	ldr	r1, [r3, #4]
 8009c18:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 8009c1c:	6059      	str	r1, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8009c1e:	6819      	ldr	r1, [r3, #0]
 8009c20:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8009c24:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	019b      	lsls	r3, r3, #6
 8009c2a:	d5fc      	bpl.n	8009c26 <SystemInit+0xce>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009c2c:	6853      	ldr	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009c2e:	4907      	ldr	r1, [pc, #28]	; (8009c4c <SystemInit+0xf4>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8009c30:	f023 0303 	bic.w	r3, r3, #3
 8009c34:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8009c36:	6853      	ldr	r3, [r2, #4]
 8009c38:	f043 0302 	orr.w	r3, r3, #2
 8009c3c:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8009c3e:	684b      	ldr	r3, [r1, #4]
 8009c40:	f003 030c 	and.w	r3, r3, #12
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	d1fa      	bne.n	8009c3e <SystemInit+0xe6>
 8009c48:	e7c3      	b.n	8009bd2 <SystemInit+0x7a>
 8009c4a:	bf00      	nop
 8009c4c:	40021000 	.word	0x40021000
 8009c50:	f8ff0000 	.word	0xf8ff0000
 8009c54:	e000ed00 	.word	0xe000ed00
 8009c58:	40022000 	.word	0x40022000

08009c5c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 8009c5c:	b508      	push	{r3, lr}
  if (Length == 0)
 8009c5e:	b138      	cbz	r0, 8009c70 <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <Standard_GetConfiguration+0x20>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <Standard_GetConfiguration+0x24>)
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	300a      	adds	r0, #10
}
 8009c6e:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009c70:	2201      	movs	r2, #1
 8009c72:	4b03      	ldr	r3, [pc, #12]	; (8009c80 <Standard_GetConfiguration+0x24>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	821a      	strh	r2, [r3, #16]
    return 0;
 8009c78:	bd08      	pop	{r3, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200013f4 	.word	0x200013f4
 8009c80:	200013f8 	.word	0x200013f8

08009c84 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8009c84:	b508      	push	{r3, lr}
  if (Length == 0)
 8009c86:	b138      	cbz	r0, 8009c98 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <Standard_GetInterface+0x20>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <Standard_GetInterface+0x24>)
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	300c      	adds	r0, #12
}
 8009c96:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength =
 8009c98:	2201      	movs	r2, #1
 8009c9a:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <Standard_GetInterface+0x24>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	821a      	strh	r2, [r3, #16]
    return 0;
 8009ca0:	bd08      	pop	{r3, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200013f4 	.word	0x200013f4
 8009ca8:	200013f8 	.word	0x200013f8

08009cac <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8009cac:	b508      	push	{r3, lr}
  if (Length == 0)
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d033      	beq.n	8009d1a <Standard_GetStatus+0x6e>
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8009cb2:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009cb4:	4b1e      	ldr	r3, [pc, #120]	; (8009d30 <Standard_GetStatus+0x84>)
  StatusInfo.w = 0;
 8009cb6:	481f      	ldr	r0, [pc, #124]	; (8009d34 <Standard_GetStatus+0x88>)
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009cb8:	681a      	ldr	r2, [r3, #0]
  StatusInfo.w = 0;
 8009cba:	8001      	strh	r1, [r0, #0]
 8009cbc:	7813      	ldrb	r3, [r2, #0]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009cbe:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8009cc2:	d016      	beq.n	8009cf2 <Standard_GetStatus+0x46>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d027      	beq.n	8009d18 <Standard_GetStatus+0x6c>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d124      	bne.n	8009d16 <Standard_GetStatus+0x6a>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8009ccc:	7952      	ldrb	r2, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 8009cce:	f002 030f 	and.w	r3, r2, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cd8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
    if (ValBit(wIndex0, 7))
 8009cdc:	0612      	lsls	r2, r2, #24
      if (_GetTxStallStatus(Related_Endpoint))
 8009cde:	681b      	ldr	r3, [r3, #0]
    if (ValBit(wIndex0, 7))
 8009ce0:	d420      	bmi.n	8009d24 <Standard_GetStatus+0x78>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8009ce2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cea:	d10e      	bne.n	8009d0a <Standard_GetStatus+0x5e>
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8009cec:	2301      	movs	r3, #1
 8009cee:	7003      	strb	r3, [r0, #0]
 8009cf0:	e00b      	b.n	8009d0a <Standard_GetStatus+0x5e>
    uint8_t Feature = pInformation->Current_Feature;
 8009cf2:	7a52      	ldrb	r2, [r2, #9]
    if (ValBit(Feature, 5))
 8009cf4:	0693      	lsls	r3, r2, #26
 8009cf6:	bf4c      	ite	mi
 8009cf8:	2302      	movmi	r3, #2
 8009cfa:	7803      	ldrbpl	r3, [r0, #0]
    if (ValBit(Feature, 6))
 8009cfc:	0651      	lsls	r1, r2, #25
      SetBit(StatusInfo0, 0);
 8009cfe:	bf4c      	ite	mi
 8009d00:	f043 0301 	orrmi.w	r3, r3, #1
      ClrBit(StatusInfo0, 0);
 8009d04:	f023 0301 	bicpl.w	r3, r3, #1
 8009d08:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8009d0a:	4b0b      	ldr	r3, [pc, #44]	; (8009d38 <Standard_GetStatus+0x8c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 8009d12:	4808      	ldr	r0, [pc, #32]	; (8009d34 <Standard_GetStatus+0x88>)
 8009d14:	bd08      	pop	{r3, pc}
    return NULL;
 8009d16:	4608      	mov	r0, r1
}
 8009d18:	bd08      	pop	{r3, pc}
    pInformation->Ctrl_Info.Usb_wLength = 2;
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <Standard_GetStatus+0x84>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	821a      	strh	r2, [r3, #16]
    return 0;
 8009d22:	bd08      	pop	{r3, pc}
      if (_GetTxStallStatus(Related_Endpoint))
 8009d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d28:	2b10      	cmp	r3, #16
 8009d2a:	d1ee      	bne.n	8009d0a <Standard_GetStatus+0x5e>
 8009d2c:	e7de      	b.n	8009cec <Standard_GetStatus+0x40>
 8009d2e:	bf00      	nop
 8009d30:	200013f8 	.word	0x200013f8
 8009d34:	200013c8 	.word	0x200013c8
 8009d38:	200013f4 	.word	0x200013f4

08009d3c <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8009d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8009d40:	4f24      	ldr	r7, [pc, #144]	; (8009dd4 <DataStageIn+0x98>)
 8009d42:	683d      	ldr	r5, [r7, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 8009d44:	8a2c      	ldrh	r4, [r5, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009d46:	b92c      	cbnz	r4, 8009d54 <DataStageIn+0x18>
  uint32_t ControlState = pInformation->ControlState;
 8009d48:	7a2e      	ldrb	r6, [r5, #8]
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8009d4a:	2e04      	cmp	r6, #4
 8009d4c:	d02b      	beq.n	8009da6 <DataStageIn+0x6a>
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8009d4e:	8aab      	ldrh	r3, [r5, #20]
 8009d50:	2604      	movs	r6, #4
 8009d52:	e004      	b.n	8009d5e <DataStageIn+0x22>
 8009d54:	8aab      	ldrh	r3, [r5, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8009d56:	429c      	cmp	r4, r3
 8009d58:	bf8c      	ite	hi
 8009d5a:	2602      	movhi	r6, #2
 8009d5c:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8009d5e:	429c      	cmp	r4, r3
 8009d60:	bf28      	it	cs
 8009d62:	461c      	movcs	r4, r3
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	4620      	mov	r0, r4
 8009d68:	4798      	blx	r3
 8009d6a:	4680      	mov	r8, r0

#ifdef STM32F10X_CL
  PCD_EP_Write (ENDP0, DataBuffer, Length);
#else   
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f000 fdb7 	bl	800a8e0 <GetEPTxAddr>
 8009d72:	4622      	mov	r2, r4
 8009d74:	4601      	mov	r1, r0
 8009d76:	4640      	mov	r0, r8
 8009d78:	f000 fcc8 	bl	800a70c <UserToPMABufferCopy>
#endif /* STM32F10X_CL */ 

  SetEPTxCount(ENDP0, Length);
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f000 fdca 	bl	800a918 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 8009d84:	2030      	movs	r0, #48	; 0x30

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009d86:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  pEPinfo->Usb_wLength -= Length;
 8009d8a:	8a2b      	ldrh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009d8c:	8a69      	ldrh	r1, [r5, #18]
  pEPinfo->Usb_wLength -= Length;
 8009d8e:	1b1b      	subs	r3, r3, r4
 8009d90:	822b      	strh	r3, [r5, #16]
  pEPinfo->Usb_wOffset += Length;
 8009d92:	440c      	add	r4, r1
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009d94:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <DataStageIn+0x9c>)
  vSetEPTxStatus(EP_TX_VALID);
 8009d96:	4911      	ldr	r1, [pc, #68]	; (8009ddc <DataStageIn+0xa0>)
  pEPinfo->Usb_wOffset += Length;
 8009d98:	826c      	strh	r4, [r5, #18]
  vSetEPTxStatus(EP_TX_VALID);
 8009d9a:	8008      	strh	r0, [r1, #0]
 8009d9c:	683d      	ldr	r5, [r7, #0]
  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8009d9e:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8009da0:	722e      	strb	r6, [r5, #8]
}
 8009da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Data_Mul_MaxPacketSize == TRUE)
 8009da6:	4b0e      	ldr	r3, [pc, #56]	; (8009de0 <DataStageIn+0xa4>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	2a01      	cmp	r2, #1
 8009dac:	d006      	beq.n	8009dbc <DataStageIn+0x80>
      vSetEPTxStatus(EP_TX_STALL);
 8009dae:	2210      	movs	r2, #16
 8009db0:	2607      	movs	r6, #7
 8009db2:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <DataStageIn+0xa0>)
 8009db4:	801a      	strh	r2, [r3, #0]
  pInformation->ControlState = ControlState;
 8009db6:	722e      	strb	r6, [r5, #8]
}
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Send0LengthData();
 8009dbc:	2730      	movs	r7, #48	; 0x30
 8009dbe:	4909      	ldr	r1, [pc, #36]	; (8009de4 <DataStageIn+0xa8>)
 8009dc0:	4a09      	ldr	r2, [pc, #36]	; (8009de8 <DataStageIn+0xac>)
 8009dc2:	6809      	ldr	r1, [r1, #0]
 8009dc4:	4805      	ldr	r0, [pc, #20]	; (8009ddc <DataStageIn+0xa0>)
 8009dc6:	b289      	uxth	r1, r1
 8009dc8:	440a      	add	r2, r1
 8009dca:	0052      	lsls	r2, r2, #1
 8009dcc:	6014      	str	r4, [r2, #0]
      Data_Mul_MaxPacketSize = FALSE;
 8009dce:	601c      	str	r4, [r3, #0]
      Send0LengthData();
 8009dd0:	8007      	strh	r7, [r0, #0]
 8009dd2:	e7e5      	b.n	8009da0 <DataStageIn+0x64>
 8009dd4:	200013f8 	.word	0x200013f8
 8009dd8:	200013fe 	.word	0x200013fe
 8009ddc:	20001400 	.word	0x20001400
 8009de0:	20000cc8 	.word	0x20000cc8
 8009de4:	40005c50 	.word	0x40005c50
 8009de8:	20003002 	.word	0x20003002

08009dec <Standard_ClearFeature>:
{
 8009dec:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 8009dee:	4b30      	ldr	r3, [pc, #192]	; (8009eb0 <Standard_ClearFeature+0xc4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	7818      	ldrb	r0, [r3, #0]
  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8009df4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8009df8:	d003      	beq.n	8009e02 <Standard_ClearFeature+0x16>
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8009dfa:	2802      	cmp	r0, #2
 8009dfc:	d006      	beq.n	8009e0c <Standard_ClearFeature+0x20>
  return USB_UNSUPPORT;
 8009dfe:	2002      	movs	r0, #2
}
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
    ClrBit(pInformation->Current_Feature, 5);
 8009e02:	7a5a      	ldrb	r2, [r3, #9]
 8009e04:	f022 0220 	bic.w	r2, r2, #32
 8009e08:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8009e0c:	885a      	ldrh	r2, [r3, #2]
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	d1f6      	bne.n	8009e00 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8009e12:	791a      	ldrb	r2, [r3, #4]
 8009e14:	2a00      	cmp	r2, #0
 8009e16:	d1f3      	bne.n	8009e00 <Standard_ClearFeature+0x14>
    wIndex0 = pInformation->USBwIndex0;
 8009e18:	7958      	ldrb	r0, [r3, #5]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009e1a:	4d26      	ldr	r5, [pc, #152]	; (8009eb4 <Standard_ClearFeature+0xc8>)
    if (ValBit(pInformation->USBwIndex0, 7))
 8009e1c:	b241      	sxtb	r1, r0
    rEP = wIndex0 & ~0x80;
 8009e1e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
      Status = _GetEPTxStatus(Related_Endpoint);
 8009e22:	0084      	lsls	r4, r0, #2
 8009e24:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009e28:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8009e2c:	6822      	ldr	r2, [r4, #0]
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009e2e:	782d      	ldrb	r5, [r5, #0]
    if (ValBit(pInformation->USBwIndex0, 7))
 8009e30:	2900      	cmp	r1, #0
      Status = _GetEPTxStatus(Related_Endpoint);
 8009e32:	bfb4      	ite	lt
 8009e34:	f002 0230 	andlt.w	r2, r2, #48	; 0x30
      Status = _GetEPRxStatus(Related_Endpoint);
 8009e38:	f402 5240 	andge.w	r2, r2, #12288	; 0x3000
    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8009e3c:	42a8      	cmp	r0, r5
 8009e3e:	d2de      	bcs.n	8009dfe <Standard_ClearFeature+0x12>
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	d0dc      	beq.n	8009dfe <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8009e44:	7a9b      	ldrb	r3, [r3, #10]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0d9      	beq.n	8009dfe <Standard_ClearFeature+0x12>
    if (wIndex0 & 0x80)
 8009e4a:	2900      	cmp	r1, #0
      if (_GetTxStallStatus(Related_Endpoint ))
 8009e4c:	6823      	ldr	r3, [r4, #0]
    if (wIndex0 & 0x80)
 8009e4e:	db0a      	blt.n	8009e66 <Standard_ClearFeature+0x7a>
      if (_GetRxStallStatus(Related_Endpoint))
 8009e50:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e58:	d012      	beq.n	8009e80 <Standard_ClearFeature+0x94>
    pUser_Standard_Requests->User_ClearFeature();
 8009e5a:	4b17      	ldr	r3, [pc, #92]	; (8009eb8 <Standard_ClearFeature+0xcc>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	4798      	blx	r3
    return USB_SUCCESS;
 8009e62:	2000      	movs	r0, #0
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
      if (_GetTxStallStatus(Related_Endpoint ))
 8009e66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d1f5      	bne.n	8009e5a <Standard_ClearFeature+0x6e>
        ClearDTOG_TX(Related_Endpoint);
 8009e6e:	b2c4      	uxtb	r4, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	f000 fd03 	bl	800a87c <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8009e76:	4620      	mov	r0, r4
 8009e78:	2130      	movs	r1, #48	; 0x30
 8009e7a:	f000 fc81 	bl	800a780 <SetEPTxStatus>
 8009e7e:	e7ec      	b.n	8009e5a <Standard_ClearFeature+0x6e>
        if (Related_Endpoint == ENDP0)
 8009e80:	b990      	cbnz	r0, 8009ea8 <Standard_ClearFeature+0xbc>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8009e82:	4b0e      	ldr	r3, [pc, #56]	; (8009ebc <Standard_ClearFeature+0xd0>)
 8009e84:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8009e88:	f000 fd54 	bl	800a934 <SetEPRxCount>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	e7d8      	b.n	8009e5a <Standard_ClearFeature+0x6e>
          ClearDTOG_RX(Related_Endpoint);
 8009ea8:	f000 fcd6 	bl	800a858 <ClearDTOG_RX>
 8009eac:	e7ee      	b.n	8009e8c <Standard_ClearFeature+0xa0>
 8009eae:	bf00      	nop
 8009eb0:	200013f8 	.word	0x200013f8
 8009eb4:	200000b0 	.word	0x200000b0
 8009eb8:	200013f4 	.word	0x200013f4
 8009ebc:	20000080 	.word	0x20000080

08009ec0 <Standard_SetEndPointFeature>:
{
 8009ec0:	b538      	push	{r3, r4, r5, lr}
  wIndex0 = pInformation->USBwIndex0;
 8009ec2:	4b21      	ldr	r3, [pc, #132]	; (8009f48 <Standard_SetEndPointFeature+0x88>)
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009ec4:	4d21      	ldr	r5, [pc, #132]	; (8009f4c <Standard_SetEndPointFeature+0x8c>)
  wIndex0 = pInformation->USBwIndex0;
 8009ec6:	6818      	ldr	r0, [r3, #0]
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009ec8:	782d      	ldrb	r5, [r5, #0]
  wIndex0 = pInformation->USBwIndex0;
 8009eca:	7942      	ldrb	r2, [r0, #5]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009ecc:	b254      	sxtb	r4, r2
  rEP = wIndex0 & ~0x80;
 8009ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    Status = _GetEPTxStatus(Related_Endpoint);
 8009ed2:	0093      	lsls	r3, r2, #2
 8009ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ed8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8009edc:	6819      	ldr	r1, [r3, #0]
  if (ValBit(pInformation->USBwIndex0, 7))
 8009ede:	2c00      	cmp	r4, #0
    Status = _GetEPTxStatus(Related_Endpoint);
 8009ee0:	bfb4      	ite	lt
 8009ee2:	f001 0130 	andlt.w	r1, r1, #48	; 0x30
    Status = _GetEPRxStatus(Related_Endpoint);
 8009ee6:	f401 5140 	andge.w	r1, r1, #12288	; 0x3000
  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8009eea:	42aa      	cmp	r2, r5
 8009eec:	d301      	bcc.n	8009ef2 <Standard_SetEndPointFeature+0x32>
    return USB_UNSUPPORT;
 8009eee:	2002      	movs	r0, #2
}
 8009ef0:	bd38      	pop	{r3, r4, r5, pc}
      || pInformation->USBwValue != 0 || Status == 0
 8009ef2:	8842      	ldrh	r2, [r0, #2]
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	d1fa      	bne.n	8009eee <Standard_SetEndPointFeature+0x2e>
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	d0f8      	beq.n	8009eee <Standard_SetEndPointFeature+0x2e>
      || pInformation->Current_Configuration == 0)
 8009efc:	7a82      	ldrb	r2, [r0, #10]
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	d0f5      	beq.n	8009eee <Standard_SetEndPointFeature+0x2e>
    if (wIndex0 & 0x80)
 8009f02:	2c00      	cmp	r4, #0
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009f04:	681a      	ldr	r2, [r3, #0]
    if (wIndex0 & 0x80)
 8009f06:	db11      	blt.n	8009f2c <Standard_SetEndPointFeature+0x6c>
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8009f08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f10:	b292      	uxth	r2, r2
 8009f12:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8009f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f1e:	601a      	str	r2, [r3, #0]
  pUser_Standard_Requests->User_SetEndPointFeature();
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <Standard_SetEndPointFeature+0x90>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	4798      	blx	r3
  return USB_SUCCESS;
 8009f28:	2000      	movs	r0, #0
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8009f2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f34:	b292      	uxth	r2, r2
 8009f36:	f082 0210 	eor.w	r2, r2, #16
 8009f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	e7ec      	b.n	8009f20 <Standard_SetEndPointFeature+0x60>
 8009f46:	bf00      	nop
 8009f48:	200013f8 	.word	0x200013f8
 8009f4c:	200000b0 	.word	0x200000b0
 8009f50:	200013f4 	.word	0x200013f4

08009f54 <Standard_GetDescriptorData>:
  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <Standard_GetDescriptorData+0x18>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8009f5a:	b110      	cbz	r0, 8009f62 <Standard_GetDescriptorData+0xe>
  return pDesc->Descriptor + wOffset;
 8009f5c:	6808      	ldr	r0, [r1, #0]
 8009f5e:	4410      	add	r0, r2
}
 8009f60:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8009f62:	8889      	ldrh	r1, [r1, #4]
 8009f64:	1a8a      	subs	r2, r1, r2
 8009f66:	821a      	strh	r2, [r3, #16]
    return 0;
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	200013f8 	.word	0x200013f8

08009f70 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8009f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
#endif /* STM32F10X_CL */

  if (pInformation->ControlState != PAUSE)
 8009f72:	4ea7      	ldr	r6, [pc, #668]	; (800a210 <Setup0_Process+0x2a0>)
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009f74:	4ba7      	ldr	r3, [pc, #668]	; (800a214 <Setup0_Process+0x2a4>)
  if (pInformation->ControlState != PAUSE)
 8009f76:	6834      	ldr	r4, [r6, #0]
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009f78:	681a      	ldr	r2, [r3, #0]
  if (pInformation->ControlState != PAUSE)
 8009f7a:	7a23      	ldrb	r3, [r4, #8]
{
 8009f7c:	b083      	sub	sp, #12
  if (pInformation->ControlState != PAUSE)
 8009f7e:	2b09      	cmp	r3, #9
 8009f80:	d039      	beq.n	8009ff6 <Setup0_Process+0x86>
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8009f82:	4ba5      	ldr	r3, [pc, #660]	; (800a218 <Setup0_Process+0x2a8>)
 8009f84:	b292      	uxth	r2, r2
 8009f86:	4413      	add	r3, r2
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	881d      	ldrh	r5, [r3, #0]
 8009f8c:	006d      	lsls	r5, r5, #1
 8009f8e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8009f92:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8009f96:	782b      	ldrb	r3, [r5, #0]
 8009f98:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8009f9a:	786b      	ldrb	r3, [r5, #1]
 8009f9c:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8009f9e:	88a8      	ldrh	r0, [r5, #4]
 8009fa0:	f000 fcfa 	bl	800a998 <ByteSwap>
 8009fa4:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009fa6:	8928      	ldrh	r0, [r5, #8]
 8009fa8:	6834      	ldr	r4, [r6, #0]
 8009faa:	f000 fcf5 	bl	800a998 <ByteSwap>
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8009fae:	2201      	movs	r2, #1
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8009fb0:	80a0      	strh	r0, [r4, #4]
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8009fb2:	89ab      	ldrh	r3, [r5, #12]
 8009fb4:	6834      	ldr	r4, [r6, #0]
 8009fb6:	80e3      	strh	r3, [r4, #6]
  pInformation->ControlState = SETTING_UP;
 8009fb8:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009fba:	b30b      	cbz	r3, 800a000 <Setup0_Process+0x90>
  uint32_t Request_No = pInformation->USBbRequest;
 8009fbc:	7860      	ldrb	r0, [r4, #1]
  if (Request_No == GET_DESCRIPTOR)
 8009fbe:	2806      	cmp	r0, #6
 8009fc0:	f000 8091 	beq.w	800a0e6 <Setup0_Process+0x176>
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d14b      	bne.n	800a060 <Setup0_Process+0xf0>
 8009fc8:	8861      	ldrh	r1, [r4, #2]
 8009fca:	2900      	cmp	r1, #0
 8009fcc:	f000 80a3 	beq.w	800a116 <Setup0_Process+0x1a6>
 8009fd0:	4d92      	ldr	r5, [pc, #584]	; (800a21c <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8009fd2:	682b      	ldr	r3, [r5, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8009fd8:	2803      	cmp	r0, #3
 8009fda:	f000 8112 	beq.w	800a202 <Setup0_Process+0x292>
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8009fde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fe2:	6833      	ldr	r3, [r6, #0]
 8009fe4:	8a1a      	ldrh	r2, [r3, #16]
 8009fe6:	428a      	cmp	r2, r1
 8009fe8:	f000 8092 	beq.w	800a110 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8009fec:	2802      	cmp	r0, #2
 8009fee:	d147      	bne.n	800a080 <Setup0_Process+0x110>
    pInformation->ControlState = STALLED;
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	721a      	strb	r2, [r3, #8]
 8009ff4:	e01c      	b.n	800a030 <Setup0_Process+0xc0>
  pInformation->ControlState = SETTING_UP;
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	88e3      	ldrh	r3, [r4, #6]
 8009ffa:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1dd      	bne.n	8009fbc <Setup0_Process+0x4c>
 800a000:	7823      	ldrb	r3, [r4, #0]
  uint32_t RequestNo = pInformation->USBbRequest;
 800a002:	7867      	ldrb	r7, [r4, #1]
  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a004:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800a008:	d047      	beq.n	800a09a <Setup0_Process+0x12a>
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	f000 80cf 	beq.w	800a1ae <Setup0_Process+0x23e>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a010:	2b02      	cmp	r3, #2
 800a012:	f000 8129 	beq.w	800a268 <Setup0_Process+0x2f8>
 800a016:	4d81      	ldr	r5, [pc, #516]	; (800a21c <Setup0_Process+0x2ac>)
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	4638      	mov	r0, r7
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 800a020:	2803      	cmp	r0, #3
 800a022:	f000 8157 	beq.w	800a2d4 <Setup0_Process+0x364>
 800a026:	6834      	ldr	r4, [r6, #0]
  if (Result != USB_SUCCESS)
 800a028:	2800      	cmp	r0, #0
 800a02a:	d04f      	beq.n	800a0cc <Setup0_Process+0x15c>
          || (pInformation->Current_Configuration != 0))
 800a02c:	2308      	movs	r3, #8
  pInformation->ControlState = ControlState;
 800a02e:	7223      	strb	r3, [r4, #8]
{
#ifdef STM32F10X_CL  
  USB_OTG_EP *ep;
#endif /* STM32F10X_CL */
      
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a030:	4b7b      	ldr	r3, [pc, #492]	; (800a220 <Setup0_Process+0x2b0>)
 800a032:	2000      	movs	r0, #0
 800a034:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800a038:	f000 fc7c 	bl	800a934 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800a03c:	6833      	ldr	r3, [r6, #0]
 800a03e:	7a18      	ldrb	r0, [r3, #8]
 800a040:	2808      	cmp	r0, #8
 800a042:	d106      	bne.n	800a052 <Setup0_Process+0xe2>
  {
    vSetEPRxStatus(EP_RX_STALL);
 800a044:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a048:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a04a:	4976      	ldr	r1, [pc, #472]	; (800a224 <Setup0_Process+0x2b4>)
    vSetEPTxStatus(EP_TX_STALL);
 800a04c:	4b76      	ldr	r3, [pc, #472]	; (800a228 <Setup0_Process+0x2b8>)
    vSetEPRxStatus(EP_RX_STALL);
 800a04e:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a050:	801a      	strh	r2, [r3, #0]
}
 800a052:	f1a0 0009 	sub.w	r0, r0, #9
 800a056:	fab0 f080 	clz	r0, r0
 800a05a:	0940      	lsrs	r0, r0, #5
 800a05c:	b003      	add	sp, #12
 800a05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (Request_No == GET_CONFIGURATION)
 800a060:	2808      	cmp	r0, #8
 800a062:	d16a      	bne.n	800a13a <Setup0_Process+0x1ca>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a064:	7823      	ldrb	r3, [r4, #0]
 800a066:	065b      	lsls	r3, r3, #25
 800a068:	d1b2      	bne.n	8009fd0 <Setup0_Process+0x60>
      CopyRoutine = Standard_GetConfiguration;
 800a06a:	4b70      	ldr	r3, [pc, #448]	; (800a22c <Setup0_Process+0x2bc>)
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800a06c:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800a06e:	61a3      	str	r3, [r4, #24]
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 800a070:	8260      	strh	r0, [r4, #18]
    (*CopyRoutine)(0);
 800a072:	4798      	blx	r3
  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800a074:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a078:	6833      	ldr	r3, [r6, #0]
 800a07a:	8a1a      	ldrh	r2, [r3, #16]
 800a07c:	428a      	cmp	r2, r1
 800a07e:	d047      	beq.n	800a110 <Setup0_Process+0x1a0>
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800a080:	2a00      	cmp	r2, #0
 800a082:	d0b5      	beq.n	8009ff0 <Setup0_Process+0x80>
  if (ValBit(pInformation->USBbmRequestType, 7))
 800a084:	f993 1000 	ldrsb.w	r1, [r3]
 800a088:	2900      	cmp	r1, #0
 800a08a:	db79      	blt.n	800a180 <Setup0_Process+0x210>
    pInformation->ControlState = OUT_DATA;
 800a08c:	2003      	movs	r0, #3
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800a08e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800a092:	4a64      	ldr	r2, [pc, #400]	; (800a224 <Setup0_Process+0x2b4>)
    pInformation->ControlState = OUT_DATA;
 800a094:	7218      	strb	r0, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 800a096:	8011      	strh	r1, [r2, #0]
 800a098:	e7ca      	b.n	800a030 <Setup0_Process+0xc0>
    if (RequestNo == SET_CONFIGURATION)
 800a09a:	2f09      	cmp	r7, #9
 800a09c:	f000 8102 	beq.w	800a2a4 <Setup0_Process+0x334>
    else if (RequestNo == SET_ADDRESS)
 800a0a0:	2f05      	cmp	r7, #5
 800a0a2:	f000 80cf 	beq.w	800a244 <Setup0_Process+0x2d4>
    else if (RequestNo == SET_FEATURE)
 800a0a6:	2f03      	cmp	r7, #3
 800a0a8:	f000 80e7 	beq.w	800a27a <Setup0_Process+0x30a>
    else if (RequestNo == CLEAR_FEATURE)
 800a0ac:	2f01      	cmp	r7, #1
 800a0ae:	d1b2      	bne.n	800a016 <Setup0_Process+0xa6>
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800a0b0:	78e3      	ldrb	r3, [r4, #3]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d1af      	bne.n	800a016 <Setup0_Process+0xa6>
          && pInformation->USBwIndex == 0
 800a0b6:	88a3      	ldrh	r3, [r4, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1ac      	bne.n	800a016 <Setup0_Process+0xa6>
          && ValBit(pInformation->Current_Feature, 5))
 800a0bc:	7a63      	ldrb	r3, [r4, #9]
 800a0be:	069b      	lsls	r3, r3, #26
 800a0c0:	d5a9      	bpl.n	800a016 <Setup0_Process+0xa6>
        Result = Standard_ClearFeature();
 800a0c2:	f7ff fe93 	bl	8009dec <Standard_ClearFeature>
  if (Result != USB_SUCCESS)
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d1a5      	bne.n	800a016 <Setup0_Process+0xa6>
 800a0ca:	6834      	ldr	r4, [r6, #0]
  USB_StatusIn();
 800a0cc:	2500      	movs	r5, #0
 800a0ce:	2030      	movs	r0, #48	; 0x30
 800a0d0:	4a50      	ldr	r2, [pc, #320]	; (800a214 <Setup0_Process+0x2a4>)
 800a0d2:	4b57      	ldr	r3, [pc, #348]	; (800a230 <Setup0_Process+0x2c0>)
 800a0d4:	6812      	ldr	r2, [r2, #0]
 800a0d6:	4954      	ldr	r1, [pc, #336]	; (800a228 <Setup0_Process+0x2b8>)
 800a0d8:	b292      	uxth	r2, r2
 800a0da:	4413      	add	r3, r2
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	601d      	str	r5, [r3, #0]
 800a0e0:	2306      	movs	r3, #6
 800a0e2:	8008      	strh	r0, [r1, #0]
 800a0e4:	e7a3      	b.n	800a02e <Setup0_Process+0xbe>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a0e6:	7823      	ldrb	r3, [r4, #0]
 800a0e8:	065d      	lsls	r5, r3, #25
 800a0ea:	f47f af71 	bne.w	8009fd0 <Setup0_Process+0x60>
      uint8_t wValue1 = pInformation->USBwValue1;
 800a0ee:	78a3      	ldrb	r3, [r4, #2]
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a0f0:	4d4a      	ldr	r5, [pc, #296]	; (800a21c <Setup0_Process+0x2ac>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	f000 80eb 	beq.w	800a2ce <Setup0_Process+0x35e>
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	f000 8086 	beq.w	800a20a <Setup0_Process+0x29a>
      else if (wValue1 == STRING_DESCRIPTOR)
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	f47f af67 	bne.w	8009fd2 <Setup0_Process+0x62>
        CopyRoutine = pProperty->GetStringDescriptor;
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (CopyRoutine)
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1af      	bne.n	800a06c <Setup0_Process+0xfc>
 800a10c:	2006      	movs	r0, #6
 800a10e:	e760      	b.n	8009fd2 <Setup0_Process+0x62>
    pInformation->ControlState = PAUSE;
 800a110:	2209      	movs	r2, #9
 800a112:	721a      	strb	r2, [r3, #8]
 800a114:	e78c      	b.n	800a030 <Setup0_Process+0xc0>
           && (pInformation->USBwIndex1 == 0))
 800a116:	6863      	ldr	r3, [r4, #4]
 800a118:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a11c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a120:	f47f af56 	bne.w	8009fd0 <Setup0_Process+0x60>
 800a124:	7820      	ldrb	r0, [r4, #0]
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800a126:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 800a12a:	f040 80d6 	bne.w	800a2da <Setup0_Process+0x36a>
        && (pInformation->USBwIndex == 0))
 800a12e:	88a3      	ldrh	r3, [r4, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f47f af4d 	bne.w	8009fd0 <Setup0_Process+0x60>
        CopyRoutine = Standard_GetStatus;
 800a136:	4b3f      	ldr	r3, [pc, #252]	; (800a234 <Setup0_Process+0x2c4>)
 800a138:	e798      	b.n	800a06c <Setup0_Process+0xfc>
  else if (Request_No == GET_INTERFACE)
 800a13a:	280a      	cmp	r0, #10
 800a13c:	f47f af48 	bne.w	8009fd0 <Setup0_Process+0x60>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a140:	7823      	ldrb	r3, [r4, #0]
 800a142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a146:	2b01      	cmp	r3, #1
 800a148:	f47f af42 	bne.w	8009fd0 <Setup0_Process+0x60>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 800a14c:	7aa3      	ldrb	r3, [r4, #10]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f43f af3e 	beq.w	8009fd0 <Setup0_Process+0x60>
 800a154:	8861      	ldrh	r1, [r4, #2]
 800a156:	2900      	cmp	r1, #0
 800a158:	f47f af3a 	bne.w	8009fd0 <Setup0_Process+0x60>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800a15c:	6863      	ldr	r3, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800a15e:	4d2f      	ldr	r5, [pc, #188]	; (800a21c <Setup0_Process+0x2ac>)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 800a160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a168:	f47f af33 	bne.w	8009fd2 <Setup0_Process+0x62>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	7960      	ldrb	r0, [r4, #5]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	4798      	blx	r3
 800a174:	2800      	cmp	r0, #0
 800a176:	f040 80ed 	bne.w	800a354 <Setup0_Process+0x3e4>
 800a17a:	6834      	ldr	r4, [r6, #0]
      CopyRoutine = Standard_GetInterface;
 800a17c:	4b2e      	ldr	r3, [pc, #184]	; (800a238 <Setup0_Process+0x2c8>)
 800a17e:	e775      	b.n	800a06c <Setup0_Process+0xfc>
    __IO uint32_t wLength = pInformation->USBwLength;
 800a180:	88d9      	ldrh	r1, [r3, #6]
 800a182:	9101      	str	r1, [sp, #4]
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 800a184:	9801      	ldr	r0, [sp, #4]
 800a186:	4282      	cmp	r2, r0
 800a188:	d834      	bhi.n	800a1f4 <Setup0_Process+0x284>
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 800a18a:	4291      	cmp	r1, r2
 800a18c:	f240 80ab 	bls.w	800a2e6 <Setup0_Process+0x376>
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 800a190:	4922      	ldr	r1, [pc, #136]	; (800a21c <Setup0_Process+0x2ac>)
 800a192:	6809      	ldr	r1, [r1, #0]
 800a194:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 800a198:	b281      	uxth	r1, r0
 800a19a:	4291      	cmp	r1, r2
 800a19c:	f240 80a8 	bls.w	800a2f0 <Setup0_Process+0x380>
        Data_Mul_MaxPacketSize = FALSE;
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4a26      	ldr	r2, [pc, #152]	; (800a23c <Setup0_Process+0x2cc>)
 800a1a4:	6010      	str	r0, [r2, #0]
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 800a1a6:	8299      	strh	r1, [r3, #20]
    DataStageIn();
 800a1a8:	f7ff fdc8 	bl	8009d3c <DataStageIn>
 800a1ac:	e740      	b.n	800a030 <Setup0_Process+0xc0>
    if (RequestNo == SET_INTERFACE)
 800a1ae:	2f0b      	cmp	r7, #11
 800a1b0:	f47f af31 	bne.w	800a016 <Setup0_Process+0xa6>
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800a1b4:	4d19      	ldr	r5, [pc, #100]	; (800a21c <Setup0_Process+0x2ac>)
 800a1b6:	78e1      	ldrb	r1, [r4, #3]
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	7960      	ldrb	r0, [r4, #5]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	4798      	blx	r3
  if (pInformation->Current_Configuration != 0)
 800a1c0:	6833      	ldr	r3, [r6, #0]
 800a1c2:	7a9a      	ldrb	r2, [r3, #10]
 800a1c4:	2a00      	cmp	r2, #0
 800a1c6:	f43f af27 	beq.w	800a018 <Setup0_Process+0xa8>
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	f47f af24 	bne.w	800a018 <Setup0_Process+0xa8>
 800a1d0:	791a      	ldrb	r2, [r3, #4]
 800a1d2:	2a00      	cmp	r2, #0
 800a1d4:	f47f af20 	bne.w	800a018 <Setup0_Process+0xa8>
        || (pInformation->USBwValue1 != 0))
 800a1d8:	789b      	ldrb	r3, [r3, #2]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f47f af1c 	bne.w	800a018 <Setup0_Process+0xa8>
      pUser_Standard_Requests->User_SetInterface();
 800a1e0:	4b17      	ldr	r3, [pc, #92]	; (800a240 <Setup0_Process+0x2d0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800a1e8:	6834      	ldr	r4, [r6, #0]
 800a1ea:	7962      	ldrb	r2, [r4, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800a1ec:	78e3      	ldrb	r3, [r4, #3]
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800a1ee:	72e2      	strb	r2, [r4, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800a1f0:	7323      	strb	r3, [r4, #12]
 800a1f2:	e76b      	b.n	800a0cc <Setup0_Process+0x15c>
 800a1f4:	4a09      	ldr	r2, [pc, #36]	; (800a21c <Setup0_Process+0x2ac>)
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800a1f6:	9901      	ldr	r1, [sp, #4]
 800a1f8:	6812      	ldr	r2, [r2, #0]
 800a1fa:	8219      	strh	r1, [r3, #16]
 800a1fc:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a200:	e7d1      	b.n	800a1a6 <Setup0_Process+0x236>
      pInformation->ControlState = PAUSE;
 800a202:	2209      	movs	r2, #9
 800a204:	6833      	ldr	r3, [r6, #0]
 800a206:	721a      	strb	r2, [r3, #8]
 800a208:	e712      	b.n	800a030 <Setup0_Process+0xc0>
        CopyRoutine = pProperty->GetConfigDescriptor;
 800a20a:	682b      	ldr	r3, [r5, #0]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	e77b      	b.n	800a108 <Setup0_Process+0x198>
 800a210:	200013f8 	.word	0x200013f8
 800a214:	40005c50 	.word	0x40005c50
 800a218:	20003004 	.word	0x20003004
 800a21c:	200013d0 	.word	0x200013d0
 800a220:	20000080 	.word	0x20000080
 800a224:	200013fe 	.word	0x200013fe
 800a228:	20001400 	.word	0x20001400
 800a22c:	08009c5d 	.word	0x08009c5d
 800a230:	20003002 	.word	0x20003002
 800a234:	08009cad 	.word	0x08009cad
 800a238:	08009c85 	.word	0x08009c85
 800a23c:	20000cc8 	.word	0x20000cc8
 800a240:	200013f4 	.word	0x200013f4
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 800a244:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f6ff aeef 	blt.w	800a02c <Setup0_Process+0xbc>
 800a24e:	78a3      	ldrb	r3, [r4, #2]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f47f aeeb 	bne.w	800a02c <Setup0_Process+0xbc>
          || (pInformation->USBwIndex != 0)
 800a256:	88a3      	ldrh	r3, [r4, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f47f aee7 	bne.w	800a02c <Setup0_Process+0xbc>
          || (pInformation->Current_Configuration != 0))
 800a25e:	7aa3      	ldrb	r3, [r4, #10]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f43f af33 	beq.w	800a0cc <Setup0_Process+0x15c>
 800a266:	e6e1      	b.n	800a02c <Setup0_Process+0xbc>
    if (RequestNo == CLEAR_FEATURE)
 800a268:	2f01      	cmp	r7, #1
 800a26a:	f43f af2a 	beq.w	800a0c2 <Setup0_Process+0x152>
    else if (RequestNo == SET_FEATURE)
 800a26e:	2f03      	cmp	r7, #3
 800a270:	f47f aed1 	bne.w	800a016 <Setup0_Process+0xa6>
      Result = Standard_SetEndPointFeature();
 800a274:	f7ff fe24 	bl	8009ec0 <Standard_SetEndPointFeature>
 800a278:	e725      	b.n	800a0c6 <Setup0_Process+0x156>
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 800a27a:	78e3      	ldrb	r3, [r4, #3]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	f47f aeca 	bne.w	800a016 <Setup0_Process+0xa6>
          && (pInformation->USBwIndex == 0)
 800a282:	88a3      	ldrh	r3, [r4, #4]
 800a284:	2b00      	cmp	r3, #0
 800a286:	f47f aec6 	bne.w	800a016 <Setup0_Process+0xa6>
          && (ValBit(pInformation->Current_Feature, 5)))
 800a28a:	7a63      	ldrb	r3, [r4, #9]
 800a28c:	069a      	lsls	r2, r3, #26
 800a28e:	f57f aec2 	bpl.w	800a016 <Setup0_Process+0xa6>
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a292:	4a32      	ldr	r2, [pc, #200]	; (800a35c <Setup0_Process+0x3ec>)
  SetBit(pInformation->Current_Feature, 5);
 800a294:	f043 0320 	orr.w	r3, r3, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a298:	6812      	ldr	r2, [r2, #0]
  SetBit(pInformation->Current_Feature, 5);
 800a29a:	7263      	strb	r3, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 800a29c:	69d3      	ldr	r3, [r2, #28]
 800a29e:	4798      	blx	r3
 800a2a0:	6834      	ldr	r4, [r6, #0]
 800a2a2:	e713      	b.n	800a0cc <Setup0_Process+0x15c>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800a2a4:	4a2e      	ldr	r2, [pc, #184]	; (800a360 <Setup0_Process+0x3f0>)
  if ((pInformation->USBwValue0 <=
 800a2a6:	78e3      	ldrb	r3, [r4, #3]
 800a2a8:	7852      	ldrb	r2, [r2, #1]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	f4ff aeb3 	bcc.w	800a016 <Setup0_Process+0xa6>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800a2b0:	78a2      	ldrb	r2, [r4, #2]
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	f47f aeaf 	bne.w	800a016 <Setup0_Process+0xa6>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 800a2b8:	88a2      	ldrh	r2, [r4, #4]
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	f47f aeab 	bne.w	800a016 <Setup0_Process+0xa6>
    pUser_Standard_Requests->User_SetConfiguration();
 800a2c0:	4a26      	ldr	r2, [pc, #152]	; (800a35c <Setup0_Process+0x3ec>)
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800a2c2:	72a3      	strb	r3, [r4, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800a2c4:	6813      	ldr	r3, [r2, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4798      	blx	r3
 800a2ca:	6834      	ldr	r4, [r6, #0]
 800a2cc:	e6fe      	b.n	800a0cc <Setup0_Process+0x15c>
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800a2ce:	682b      	ldr	r3, [r5, #0]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	e719      	b.n	800a108 <Setup0_Process+0x198>
 800a2d4:	6834      	ldr	r4, [r6, #0]
    if (Result == USB_NOT_READY)
 800a2d6:	2309      	movs	r3, #9
 800a2d8:	e6a9      	b.n	800a02e <Setup0_Process+0xbe>
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800a2da:	2801      	cmp	r0, #1
 800a2dc:	d02d      	beq.n	800a33a <Setup0_Process+0x3ca>
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800a2de:	2802      	cmp	r0, #2
 800a2e0:	d011      	beq.n	800a306 <Setup0_Process+0x396>
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	e674      	b.n	8009fd0 <Setup0_Process+0x60>
 800a2e6:	4a1f      	ldr	r2, [pc, #124]	; (800a364 <Setup0_Process+0x3f4>)
 800a2e8:	6812      	ldr	r2, [r2, #0]
 800a2ea:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a2ee:	e75a      	b.n	800a1a6 <Setup0_Process+0x236>
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 800a2f0:	fb92 f4f0 	sdiv	r4, r2, r0
 800a2f4:	fb00 2214 	mls	r2, r0, r4, r2
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	f47f af54 	bne.w	800a1a6 <Setup0_Process+0x236>
        Data_Mul_MaxPacketSize = TRUE;
 800a2fe:	2001      	movs	r0, #1
 800a300:	4a19      	ldr	r2, [pc, #100]	; (800a368 <Setup0_Process+0x3f8>)
 800a302:	6010      	str	r0, [r2, #0]
 800a304:	e74f      	b.n	800a1a6 <Setup0_Process+0x236>
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 800a306:	7960      	ldrb	r0, [r4, #5]
 800a308:	f000 020f 	and.w	r2, r0, #15
        Status = _GetEPTxStatus(Related_Endpoint);
 800a30c:	0093      	lsls	r3, r2, #2
      if (ValBit(pInformation->USBwIndex0, 7))
 800a30e:	0601      	lsls	r1, r0, #24
        Status = _GetEPTxStatus(Related_Endpoint);
 800a310:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a314:	4912      	ldr	r1, [pc, #72]	; (800a360 <Setup0_Process+0x3f0>)
        Status = _GetEPTxStatus(Related_Endpoint);
 800a316:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a31a:	681b      	ldr	r3, [r3, #0]
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a31c:	7809      	ldrb	r1, [r1, #0]
        Status = _GetEPTxStatus(Related_Endpoint);
 800a31e:	bf4c      	ite	mi
 800a320:	f003 0330 	andmi.w	r3, r3, #48	; 0x30
        Status = _GetEPRxStatus(Related_Endpoint);
 800a324:	f403 5340 	andpl.w	r3, r3, #12288	; 0x3000
      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 800a328:	428a      	cmp	r2, r1
 800a32a:	d2da      	bcs.n	800a2e2 <Setup0_Process+0x372>
 800a32c:	f010 0070 	ands.w	r0, r0, #112	; 0x70
 800a330:	d1d7      	bne.n	800a2e2 <Setup0_Process+0x372>
          && (Status != 0))
 800a332:	2b00      	cmp	r3, #0
 800a334:	f47f aeff 	bne.w	800a136 <Setup0_Process+0x1c6>
 800a338:	e64a      	b.n	8009fd0 <Setup0_Process+0x60>
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 800a33a:	4d0a      	ldr	r5, [pc, #40]	; (800a364 <Setup0_Process+0x3f4>)
 800a33c:	7960      	ldrb	r0, [r4, #5]
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	4798      	blx	r3
 800a344:	b930      	cbnz	r0, 800a354 <Setup0_Process+0x3e4>
          && (pInformation->Current_Configuration != 0))
 800a346:	6834      	ldr	r4, [r6, #0]
 800a348:	7aa3      	ldrb	r3, [r4, #10]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f47f aef3 	bne.w	800a136 <Setup0_Process+0x1c6>
 800a350:	7860      	ldrb	r0, [r4, #1]
 800a352:	e63e      	b.n	8009fd2 <Setup0_Process+0x62>
 800a354:	6833      	ldr	r3, [r6, #0]
 800a356:	7858      	ldrb	r0, [r3, #1]
 800a358:	e63b      	b.n	8009fd2 <Setup0_Process+0x62>
 800a35a:	bf00      	nop
 800a35c:	200013f4 	.word	0x200013f4
 800a360:	200000b0 	.word	0x200000b0
 800a364:	200013d0 	.word	0x200013d0
 800a368:	20000cc8 	.word	0x20000cc8

0800a36c <In0_Process>:
{
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a36e:	4c29      	ldr	r4, [pc, #164]	; (800a414 <In0_Process+0xa8>)
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	7a1a      	ldrb	r2, [r3, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a374:	2a02      	cmp	r2, #2
 800a376:	d026      	beq.n	800a3c6 <In0_Process+0x5a>
 800a378:	2a04      	cmp	r2, #4
 800a37a:	d024      	beq.n	800a3c6 <In0_Process+0x5a>
  else if (ControlState == WAIT_STATUS_IN)
 800a37c:	2a06      	cmp	r2, #6
 800a37e:	d018      	beq.n	800a3b2 <In0_Process+0x46>
 800a380:	2108      	movs	r1, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a382:	4a25      	ldr	r2, [pc, #148]	; (800a418 <In0_Process+0xac>)
  pInformation->ControlState = ControlState;
 800a384:	7219      	strb	r1, [r3, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a386:	2000      	movs	r0, #0
 800a388:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a38c:	f000 fad2 	bl	800a934 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	7a18      	ldrb	r0, [r3, #8]
 800a394:	2808      	cmp	r0, #8
 800a396:	d106      	bne.n	800a3a6 <In0_Process+0x3a>
    vSetEPRxStatus(EP_RX_STALL);
 800a398:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a39c:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a39e:	491f      	ldr	r1, [pc, #124]	; (800a41c <In0_Process+0xb0>)
    vSetEPTxStatus(EP_TX_STALL);
 800a3a0:	4b1f      	ldr	r3, [pc, #124]	; (800a420 <In0_Process+0xb4>)
    vSetEPRxStatus(EP_RX_STALL);
 800a3a2:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a3a4:	801a      	strh	r2, [r3, #0]
}
 800a3a6:	f1a0 0009 	sub.w	r0, r0, #9
 800a3aa:	fab0 f080 	clz	r0, r0
 800a3ae:	0940      	lsrs	r0, r0, #5
 800a3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a3b2:	785a      	ldrb	r2, [r3, #1]
 800a3b4:	2a05      	cmp	r2, #5
 800a3b6:	d00b      	beq.n	800a3d0 <In0_Process+0x64>
    (*pProperty->Process_Status_IN)();
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <In0_Process+0xb8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	4798      	blx	r3
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	2108      	movs	r1, #8
 800a3c4:	e7dd      	b.n	800a382 <In0_Process+0x16>
    DataStageIn();
 800a3c6:	f7ff fcb9 	bl	8009d3c <DataStageIn>
    ControlState = pInformation->ControlState;
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	7a19      	ldrb	r1, [r3, #8]
 800a3ce:	e7d8      	b.n	800a382 <In0_Process+0x16>
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800a3d0:	781a      	ldrb	r2, [r3, #0]
 800a3d2:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 800a3d6:	d1ef      	bne.n	800a3b8 <In0_Process+0x4c>
{
#ifdef STM32F10X_CL 
  PCD_EP_SetAddress ((uint8_t)Val);
#else 
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a3d8:	4913      	ldr	r1, [pc, #76]	; (800a428 <In0_Process+0xbc>)
      SetDeviceAddress(pInformation->USBwValue0);
 800a3da:	f893 e003 	ldrb.w	lr, [r3, #3]
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a3de:	780d      	ldrb	r5, [r1, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800a3e0:	b175      	cbz	r5, 800a400 <In0_Process+0x94>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a3e2:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a3e6:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a3ea:	4910      	ldr	r1, [pc, #64]	; (800a42c <In0_Process+0xc0>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a3ec:	680b      	ldr	r3, [r1, #0]
 800a3ee:	ea42 0006 	orr.w	r0, r2, r6
 800a3f2:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a3f4:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a3f6:	4303      	orrs	r3, r0
  for (i = 0; i < nEP; i++)
 800a3f8:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a3fa:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a3fe:	d1f5      	bne.n	800a3ec <In0_Process+0x80>
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a400:	490b      	ldr	r1, [pc, #44]	; (800a430 <In0_Process+0xc4>)
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a402:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <In0_Process+0xc8>)
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a404:	f04e 0380 	orr.w	r3, lr, #128	; 0x80
 800a408:	600b      	str	r3, [r1, #0]
      pUser_Standard_Requests->User_SetDeviceAddress();
 800a40a:	6813      	ldr	r3, [r2, #0]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	4798      	blx	r3
 800a410:	e7d2      	b.n	800a3b8 <In0_Process+0x4c>
 800a412:	bf00      	nop
 800a414:	200013f8 	.word	0x200013f8
 800a418:	20000080 	.word	0x20000080
 800a41c:	200013fe 	.word	0x200013fe
 800a420:	20001400 	.word	0x20001400
 800a424:	200013d0 	.word	0x200013d0
 800a428:	200000b0 	.word	0x200000b0
 800a42c:	40005c00 	.word	0x40005c00
 800a430:	40005c4c 	.word	0x40005c4c
 800a434:	200013f4 	.word	0x200013f4

0800a438 <Out0_Process>:
{
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t ControlState = pInformation->ControlState;
 800a43a:	4d3c      	ldr	r5, [pc, #240]	; (800a52c <Out0_Process+0xf4>)
 800a43c:	682c      	ldr	r4, [r5, #0]
 800a43e:	7a23      	ldrb	r3, [r4, #8]
  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800a440:	2b02      	cmp	r3, #2
 800a442:	d007      	beq.n	800a454 <Out0_Process+0x1c>
 800a444:	2b04      	cmp	r3, #4
 800a446:	d005      	beq.n	800a454 <Out0_Process+0x1c>
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d01c      	beq.n	800a486 <Out0_Process+0x4e>
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d01a      	beq.n	800a486 <Out0_Process+0x4e>
  else if (ControlState == WAIT_STATUS_OUT)
 800a450:	2b07      	cmp	r3, #7
 800a452:	d049      	beq.n	800a4e8 <Out0_Process+0xb0>
 800a454:	2308      	movs	r3, #8
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a456:	4a36      	ldr	r2, [pc, #216]	; (800a530 <Out0_Process+0xf8>)
  pInformation->ControlState = ControlState;
 800a458:	7223      	strb	r3, [r4, #8]
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800a45a:	2000      	movs	r0, #0
 800a45c:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800a460:	f000 fa68 	bl	800a934 <SetEPRxCount>
  if (pInformation->ControlState == STALLED)
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	7a18      	ldrb	r0, [r3, #8]
 800a468:	2808      	cmp	r0, #8
 800a46a:	d106      	bne.n	800a47a <Out0_Process+0x42>
    vSetEPRxStatus(EP_RX_STALL);
 800a46c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    vSetEPTxStatus(EP_TX_STALL);
 800a470:	2210      	movs	r2, #16
    vSetEPRxStatus(EP_RX_STALL);
 800a472:	4930      	ldr	r1, [pc, #192]	; (800a534 <Out0_Process+0xfc>)
    vSetEPTxStatus(EP_TX_STALL);
 800a474:	4b30      	ldr	r3, [pc, #192]	; (800a538 <Out0_Process+0x100>)
    vSetEPRxStatus(EP_RX_STALL);
 800a476:	800c      	strh	r4, [r1, #0]
    vSetEPTxStatus(EP_TX_STALL);
 800a478:	801a      	strh	r2, [r3, #0]
  return Post0_Process();
 800a47a:	f1a0 0009 	sub.w	r0, r0, #9
 800a47e:	fab0 f080 	clz	r0, r0
 800a482:	0940      	lsrs	r0, r0, #5
}
 800a484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pEPinfo->CopyData && save_rLength)
 800a486:	69a3      	ldr	r3, [r4, #24]
  save_rLength = pEPinfo->Usb_rLength;
 800a488:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->CopyData && save_rLength)
 800a48a:	b1bb      	cbz	r3, 800a4bc <Out0_Process+0x84>
 800a48c:	2a00      	cmp	r2, #0
 800a48e:	d032      	beq.n	800a4f6 <Out0_Process+0xbe>
    Length = pEPinfo->PacketSize;
 800a490:	8aa6      	ldrh	r6, [r4, #20]
    Buffer = (*pEPinfo->CopyData)(Length);
 800a492:	4296      	cmp	r6, r2
 800a494:	bf28      	it	cs
 800a496:	4616      	movcs	r6, r2
 800a498:	4630      	mov	r0, r6
 800a49a:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 800a49c:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a49e:	8a63      	ldrh	r3, [r4, #18]
    pEPinfo->Usb_rLength -= Length;
 800a4a0:	1b92      	subs	r2, r2, r6
    pEPinfo->Usb_rOffset += Length;
 800a4a2:	4433      	add	r3, r6
    Buffer = (*pEPinfo->CopyData)(Length);
 800a4a4:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800a4a6:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 800a4a8:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	f000 fa26 	bl	800a8fc <GetEPRxAddr>
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f000 f93d 	bl	800a734 <PMAToUserBufferCopy>
 800a4ba:	8a22      	ldrh	r2, [r4, #16]
  if (pEPinfo->Usb_rLength != 0)
 800a4bc:	b302      	cbz	r2, 800a500 <Out0_Process+0xc8>
    SetEPTxCount(ENDP0, 0);
 800a4be:	2100      	movs	r1, #0
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a4c0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	; (800a534 <Out0_Process+0xfc>)
    SetEPTxCount(ENDP0, 0);
 800a4c6:	4608      	mov	r0, r1
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800a4c8:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 800a4ca:	f000 fa25 	bl	800a918 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a4ce:	2230      	movs	r2, #48	; 0x30
 800a4d0:	8a23      	ldrh	r3, [r4, #16]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a4d2:	8aa1      	ldrh	r1, [r4, #20]
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a4d4:	4818      	ldr	r0, [pc, #96]	; (800a538 <Out0_Process+0x100>)
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a4d6:	4299      	cmp	r1, r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800a4d8:	8002      	strh	r2, [r0, #0]
 800a4da:	682a      	ldr	r2, [r5, #0]
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a4dc:	d922      	bls.n	800a524 <Out0_Process+0xec>
    if (pEPinfo->Usb_rLength > 0)
 800a4de:	b31b      	cbz	r3, 800a528 <Out0_Process+0xf0>
      pInformation->ControlState = LAST_OUT_DATA;
 800a4e0:	2305      	movs	r3, #5
 800a4e2:	4614      	mov	r4, r2
 800a4e4:	7213      	strb	r3, [r2, #8]
 800a4e6:	e7b6      	b.n	800a456 <Out0_Process+0x1e>
    (*pProperty->Process_Status_OUT)();
 800a4e8:	4b14      	ldr	r3, [pc, #80]	; (800a53c <Out0_Process+0x104>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	4798      	blx	r3
 800a4f0:	682c      	ldr	r4, [r5, #0]
 800a4f2:	2308      	movs	r3, #8
 800a4f4:	e7af      	b.n	800a456 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a4f6:	8aa3      	ldrh	r3, [r4, #20]
 800a4f8:	b933      	cbnz	r3, 800a508 <Out0_Process+0xd0>
    pInformation->ControlState = OUT_DATA;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	7223      	strb	r3, [r4, #8]
 800a4fe:	e7aa      	b.n	800a456 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a500:	8aa3      	ldrh	r3, [r4, #20]
 800a502:	682c      	ldr	r4, [r5, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0f8      	beq.n	800a4fa <Out0_Process+0xc2>
 800a508:	480b      	ldr	r0, [pc, #44]	; (800a538 <Out0_Process+0x100>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a50a:	2306      	movs	r3, #6
      USB_StatusIn();
 800a50c:	2700      	movs	r7, #0
 800a50e:	2630      	movs	r6, #48	; 0x30
 800a510:	4a0b      	ldr	r2, [pc, #44]	; (800a540 <Out0_Process+0x108>)
      pInformation->ControlState = WAIT_STATUS_IN;
 800a512:	7223      	strb	r3, [r4, #8]
      USB_StatusIn();
 800a514:	6811      	ldr	r1, [r2, #0]
 800a516:	4a0b      	ldr	r2, [pc, #44]	; (800a544 <Out0_Process+0x10c>)
 800a518:	b289      	uxth	r1, r1
 800a51a:	440a      	add	r2, r1
 800a51c:	0052      	lsls	r2, r2, #1
 800a51e:	6017      	str	r7, [r2, #0]
 800a520:	8006      	strh	r6, [r0, #0]
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 800a522:	e798      	b.n	800a456 <Out0_Process+0x1e>
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 800a524:	4614      	mov	r4, r2
 800a526:	e7e8      	b.n	800a4fa <Out0_Process+0xc2>
    if (pEPinfo->Usb_rLength > 0)
 800a528:	4614      	mov	r4, r2
 800a52a:	e7ee      	b.n	800a50a <Out0_Process+0xd2>
 800a52c:	200013f8 	.word	0x200013f8
 800a530:	20000080 	.word	0x20000080
 800a534:	200013fe 	.word	0x200013fe
 800a538:	20001400 	.word	0x20001400
 800a53c:	200013d0 	.word	0x200013d0
 800a540:	40005c50 	.word	0x40005c50
 800a544:	20003002 	.word	0x20003002

0800a548 <SetDeviceAddress>:
{
 800a548:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t nEP = Device_Table.Total_Endpoint;
 800a54a:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <SetDeviceAddress+0x34>)
 800a54c:	781d      	ldrb	r5, [r3, #0]
  for (i = 0; i < nEP; i++)
 800a54e:	b17d      	cbz	r5, 800a570 <SetDeviceAddress+0x28>
 800a550:	2200      	movs	r2, #0
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a552:	f640 770f 	movw	r7, #3855	; 0xf0f
 800a556:	f248 0680 	movw	r6, #32896	; 0x8080
  for (i = 0; i < nEP; i++)
 800a55a:	4909      	ldr	r1, [pc, #36]	; (800a580 <SetDeviceAddress+0x38>)
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a55c:	680b      	ldr	r3, [r1, #0]
 800a55e:	ea42 0406 	orr.w	r4, r2, r6
 800a562:	403b      	ands	r3, r7
  for (i = 0; i < nEP; i++)
 800a564:	3201      	adds	r2, #1
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a566:	4323      	orrs	r3, r4
  for (i = 0; i < nEP; i++)
 800a568:	4295      	cmp	r5, r2
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 800a56a:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0; i < nEP; i++)
 800a56e:	d1f5      	bne.n	800a55c <SetDeviceAddress+0x14>
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 800a570:	4b04      	ldr	r3, [pc, #16]	; (800a584 <SetDeviceAddress+0x3c>)
 800a572:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800a576:	6018      	str	r0, [r3, #0]
#endif  /* STM32F10X_CL */  
}
 800a578:	bcf0      	pop	{r4, r5, r6, r7}
 800a57a:	4770      	bx	lr
 800a57c:	200000b0 	.word	0x200000b0
 800a580:	40005c00 	.word	0x40005c00
 800a584:	40005c4c 	.word	0x40005c4c

0800a588 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop

0800a58c <CTR_LP>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 800a58c:	2300      	movs	r3, #0
{
 800a58e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a592:	4e56      	ldr	r6, [pc, #344]	; (800a6ec <CTR_LP+0x160>)
 800a594:	b084      	sub	sp, #16
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a596:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800a704 <CTR_LP+0x178>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a59a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a708 <CTR_LP+0x17c>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800a59e:	4f54      	ldr	r7, [pc, #336]	; (800a6f0 <CTR_LP+0x164>)
  __IO uint16_t wEPVal = 0;
 800a5a0:	f8ad 300e 	strh.w	r3, [sp, #14]
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a5a4:	f8d9 3000 	ldr.w	r3, [r9]
	    SaveRState = _GetENDPOINT(ENDP0);
 800a5a8:	4c52      	ldr	r4, [pc, #328]	; (800a6f4 <CTR_LP+0x168>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a5aa:	b299      	uxth	r1, r3
 800a5ac:	041b      	lsls	r3, r3, #16
	    SaveRState = _GetENDPOINT(ENDP0);
 800a5ae:	4d52      	ldr	r5, [pc, #328]	; (800a6f8 <CTR_LP+0x16c>)
	    SaveTState = SaveRState & EPTX_STAT;
 800a5b0:	4a52      	ldr	r2, [pc, #328]	; (800a6fc <CTR_LP+0x170>)
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800a5b2:	8031      	strh	r1, [r6, #0]
 800a5b4:	f140 808e 	bpl.w	800a6d4 <CTR_LP+0x148>
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a5b8:	8833      	ldrh	r3, [r6, #0]
 800a5ba:	f003 030f 	and.w	r3, r3, #15
      wEPVal = _GetENDPOINT(EPindex);
 800a5be:	0099      	lsls	r1, r3, #2
 800a5c0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800a5c4:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800a5c8:	f888 3000 	strb.w	r3, [r8]
    if (EPindex == 0)
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d130      	bne.n	800a632 <CTR_LP+0xa6>
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a5d0:	f64b 7abf 	movw	sl, #49087	; 0xbfbf
	    SaveRState = _GetENDPOINT(ENDP0);
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 800a5da:	882b      	ldrh	r3, [r5, #0]
 800a5dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5e0:	8013      	strh	r3, [r2, #0]
	    SaveRState &=  EPRX_STAT;	
 800a5e2:	882b      	ldrh	r3, [r5, #0]
 800a5e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a5e8:	802b      	strh	r3, [r5, #0]
	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	ea03 030a 	and.w	r3, r3, sl
 800a5f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5f4:	f083 0320 	eor.w	r3, r3, #32
 800a5f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a600:	6023      	str	r3, [r4, #0]
      if ((wIstr & ISTR_DIR) == 0)
 800a602:	8833      	ldrh	r3, [r6, #0]
 800a604:	06d8      	lsls	r0, r3, #27
 800a606:	d53c      	bpl.n	800a682 <CTR_LP+0xf6>
        wEPVal = _GetENDPOINT(ENDP0);
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if ((wEPVal &EP_SETUP) != 0)
 800a610:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a614:	0519      	lsls	r1, r3, #20
 800a616:	d460      	bmi.n	800a6da <CTR_LP+0x14e>
        else if ((wEPVal & EP_CTR_RX) != 0)
 800a618:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a61c:	041b      	lsls	r3, r3, #16
 800a61e:	d5c1      	bpl.n	800a5a4 <CTR_LP+0x18>
          _ClearEP_CTR_RX(ENDP0);
 800a620:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	9201      	str	r2, [sp, #4]
 800a628:	400b      	ands	r3, r1
 800a62a:	6023      	str	r3, [r4, #0]
          Out0_Process();
 800a62c:	f7ff ff04 	bl	800a438 <Out0_Process>
 800a630:	e02f      	b.n	800a692 <CTR_LP+0x106>
      wEPVal = _GetENDPOINT(EPindex);
 800a632:	680a      	ldr	r2, [r1, #0]
 800a634:	b292      	uxth	r2, r2
 800a636:	f8ad 200e 	strh.w	r2, [sp, #14]
      if ((wEPVal & EP_CTR_RX) != 0)
 800a63a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a63e:	0410      	lsls	r0, r2, #16
 800a640:	d414      	bmi.n	800a66c <CTR_LP+0xe0>
      if ((wEPVal & EP_CTR_TX) != 0)
 800a642:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a646:	061a      	lsls	r2, r3, #24
 800a648:	d5ac      	bpl.n	800a5a4 <CTR_LP+0x18>
        _ClearEP_CTR_TX(EPindex);
 800a64a:	f648 700f 	movw	r0, #36623	; 0x8f0f
 800a64e:	f898 2000 	ldrb.w	r2, [r8]
 800a652:	0093      	lsls	r3, r2, #2
 800a654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a658:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800a65c:	6819      	ldr	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a65e:	3a01      	subs	r2, #1
        _ClearEP_CTR_TX(EPindex);
 800a660:	4001      	ands	r1, r0
        (*pEpInt_IN[EPindex-1])();
 800a662:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
        _ClearEP_CTR_TX(EPindex);
 800a666:	6019      	str	r1, [r3, #0]
        (*pEpInt_IN[EPindex-1])();
 800a668:	4790      	blx	r2
 800a66a:	e79b      	b.n	800a5a4 <CTR_LP+0x18>
        _ClearEP_CTR_RX(EPindex);
 800a66c:	f640 748f 	movw	r4, #3983	; 0xf8f
 800a670:	680a      	ldr	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a672:	4823      	ldr	r0, [pc, #140]	; (800a700 <CTR_LP+0x174>)
        _ClearEP_CTR_RX(EPindex);
 800a674:	4022      	ands	r2, r4
        (*pEpInt_OUT[EPindex-1])();
 800a676:	3b01      	subs	r3, #1
 800a678:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        _ClearEP_CTR_RX(EPindex);
 800a67c:	600a      	str	r2, [r1, #0]
        (*pEpInt_OUT[EPindex-1])();
 800a67e:	4798      	blx	r3
 800a680:	e7df      	b.n	800a642 <CTR_LP+0xb6>
        _ClearEP_CTR_TX(ENDP0);
 800a682:	f648 710f 	movw	r1, #36623	; 0x8f0f
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	9201      	str	r2, [sp, #4]
 800a68a:	400b      	ands	r3, r1
 800a68c:	6023      	str	r3, [r4, #0]
        In0_Process();
 800a68e:	f7ff fe6d 	bl	800a36c <In0_Process>
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	8829      	ldrh	r1, [r5, #0]
 800a696:	ea03 0a0a 	and.w	sl, r3, sl
 800a69a:	9a01      	ldr	r2, [sp, #4]
 800a69c:	882b      	ldrh	r3, [r5, #0]
 800a69e:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800a6a2:	bf18      	it	ne
 800a6a4:	f48a 5a80 	eorne.w	sl, sl, #4096	; 0x1000
 800a6a8:	049e      	lsls	r6, r3, #18
 800a6aa:	8813      	ldrh	r3, [r2, #0]
 800a6ac:	bf48      	it	mi
 800a6ae:	f48a 5a00 	eormi.w	sl, sl, #8192	; 0x2000
 800a6b2:	06dd      	lsls	r5, r3, #27
 800a6b4:	8813      	ldrh	r3, [r2, #0]
 800a6b6:	bf48      	it	mi
 800a6b8:	f08a 0a10 	eormi.w	sl, sl, #16
 800a6bc:	069c      	lsls	r4, r3, #26
 800a6be:	bf48      	it	mi
 800a6c0:	f08a 0a20 	eormi.w	sl, sl, #32
 800a6c4:	f44a 4a00 	orr.w	sl, sl, #32768	; 0x8000
 800a6c8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800a6cc:	4a09      	ldr	r2, [pc, #36]	; (800a6f4 <CTR_LP+0x168>)
 800a6ce:	fa1f f38a 	uxth.w	r3, sl
 800a6d2:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800a6d4:	b004      	add	sp, #16
 800a6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 800a6da:	f640 718f 	movw	r1, #3983	; 0xf8f
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	9201      	str	r2, [sp, #4]
 800a6e2:	400b      	ands	r3, r1
 800a6e4:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800a6e6:	f7ff fc43 	bl	8009f70 <Setup0_Process>
 800a6ea:	e7d2      	b.n	800a692 <CTR_LP+0x106>
 800a6ec:	20001444 	.word	0x20001444
 800a6f0:	20000038 	.word	0x20000038
 800a6f4:	40005c00 	.word	0x40005c00
 800a6f8:	200013fe 	.word	0x200013fe
 800a6fc:	20001400 	.word	0x20001400
 800a700:	20000054 	.word	0x20000054
 800a704:	40005c44 	.word	0x40005c44
 800a708:	200013d4 	.word	0x200013d4

0800a70c <UserToPMABufferCopy>:
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a70c:	3201      	adds	r2, #1
  uint32_t i, temp1;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800a70e:	1052      	asrs	r2, r2, #1
 800a710:	d00e      	beq.n	800a730 <UserToPMABufferCopy+0x24>
 800a712:	2300      	movs	r3, #0
{
 800a714:	b410      	push	{r4}
 800a716:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 800a71a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
 800a71e:	0049      	lsls	r1, r1, #1
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    *pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a720:	f830 4b02 	ldrh.w	r4, [r0], #2
 800a724:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 800a728:	3301      	adds	r3, #1
  for (i = n; i != 0; i--)
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d1f8      	bne.n	800a720 <UserToPMABufferCopy+0x14>
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a72e:	bc10      	pop	{r4}
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop

0800a734 <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a734:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a738:	3201      	adds	r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a73a:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
  for (i = n; i != 0; i--)
 800a73e:	1052      	asrs	r2, r2, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 800a740:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = n; i != 0; i--)
 800a744:	d005      	beq.n	800a752 <PMAToUserBufferCopy+0x1e>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a746:	f851 3b04 	ldr.w	r3, [r1], #4
  for (i = n; i != 0; i--)
 800a74a:	3a01      	subs	r2, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a74c:	f820 3b02 	strh.w	r3, [r0], #2
  for (i = n; i != 0; i--)
 800a750:	d1f9      	bne.n	800a746 <PMAToUserBufferCopy+0x12>
 800a752:	4770      	bx	lr

0800a754 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 800a754:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800a758:	4a01      	ldr	r2, [pc, #4]	; (800a760 <SetBTABLE+0xc>)
 800a75a:	4003      	ands	r3, r0
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	4770      	bx	lr
 800a760:	40005c50 	.word	0x40005c50

0800a764 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 800a764:	0080      	lsls	r0, r0, #2
 800a766:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a76a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a76e:	6803      	ldr	r3, [r0, #0]
 800a770:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a778:	4319      	orrs	r1, r3
 800a77a:	b289      	uxth	r1, r1
 800a77c:	6001      	str	r1, [r0, #0]
 800a77e:	4770      	bx	lr

0800a780 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800a780:	0080      	lsls	r0, r0, #2
 800a782:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a786:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a78a:	6803      	ldr	r3, [r0, #0]
 800a78c:	06ca      	lsls	r2, r1, #27
 800a78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a796:	b29b      	uxth	r3, r3
 800a798:	bf48      	it	mi
 800a79a:	f083 0310 	eormi.w	r3, r3, #16
 800a79e:	068a      	lsls	r2, r1, #26
 800a7a0:	bf48      	it	mi
 800a7a2:	f083 0320 	eormi.w	r3, r3, #32
 800a7a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ae:	6003      	str	r3, [r0, #0]
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop

0800a7b4 <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800a7b4:	0080      	lsls	r0, r0, #2
 800a7b6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a7ba:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a7be:	6803      	ldr	r3, [r0, #0]
 800a7c0:	04ca      	lsls	r2, r1, #19
 800a7c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	bf48      	it	mi
 800a7ce:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 800a7d2:	048a      	lsls	r2, r1, #18
 800a7d4:	bf48      	it	mi
 800a7d6:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 800a7da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e2:	6003      	str	r3, [r0, #0]
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop

0800a7e8 <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 800a7e8:	0080      	lsls	r0, r0, #2
 800a7ea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a7ee:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a7f2:	6803      	ldr	r3, [r0, #0]
 800a7f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80a:	6003      	str	r3, [r0, #0]
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 800a810:	0080      	lsls	r0, r0, #2
 800a812:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a816:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a81a:	6803      	ldr	r3, [r0, #0]
 800a81c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a824:	b29b      	uxth	r3, r3
 800a826:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a82a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a832:	6003      	str	r3, [r0, #0]
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop

0800a838 <Clear_Status_Out>:
 800a838:	f640 630f 	movw	r3, #3599	; 0xe0f
 800a83c:	0080      	lsls	r0, r0, #2
 800a83e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a842:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a846:	6802      	ldr	r2, [r0, #0]
 800a848:	4013      	ands	r3, r2
 800a84a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a84e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a852:	6003      	str	r3, [r0, #0]
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop

0800a858 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800a858:	0080      	lsls	r0, r0, #2
 800a85a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a85e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a862:	6803      	ldr	r3, [r0, #0]
 800a864:	045b      	lsls	r3, r3, #17
 800a866:	d508      	bpl.n	800a87a <ClearDTOG_RX+0x22>
 800a868:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a86c:	6803      	ldr	r3, [r0, #0]
 800a86e:	4013      	ands	r3, r2
 800a870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a878:	6003      	str	r3, [r0, #0]
 800a87a:	4770      	bx	lr

0800a87c <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800a87c:	0080      	lsls	r0, r0, #2
 800a87e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800a882:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800a886:	6803      	ldr	r3, [r0, #0]
 800a888:	065b      	lsls	r3, r3, #25
 800a88a:	d508      	bpl.n	800a89e <ClearDTOG_TX+0x22>
 800a88c:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a890:	6803      	ldr	r3, [r0, #0]
 800a892:	4013      	ands	r3, r2
 800a894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	4770      	bx	lr

0800a8a0 <SetEPTxAddr>:
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <SetEPTxAddr+0x1c>)
 800a8a2:	0849      	lsrs	r1, r1, #1
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	0049      	lsls	r1, r1, #1
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a8ae:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a8b2:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a8b6:	0040      	lsls	r0, r0, #1
 800a8b8:	6001      	str	r1, [r0, #0]
 800a8ba:	4770      	bx	lr
 800a8bc:	40005c50 	.word	0x40005c50

0800a8c0 <SetEPRxAddr>:
 800a8c0:	4a05      	ldr	r2, [pc, #20]	; (800a8d8 <SetEPRxAddr+0x18>)
 800a8c2:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <SetEPRxAddr+0x1c>)
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	0849      	lsrs	r1, r1, #1
 800a8c8:	b292      	uxth	r2, r2
 800a8ca:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a8ce:	4413      	add	r3, r2
 800a8d0:	0049      	lsls	r1, r1, #1
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	6019      	str	r1, [r3, #0]
 800a8d6:	4770      	bx	lr
 800a8d8:	40005c50 	.word	0x40005c50
 800a8dc:	20003004 	.word	0x20003004

0800a8e0 <GetEPTxAddr>:
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <GetEPTxAddr+0x18>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800a8ea:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800a8ee:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800a8f2:	0040      	lsls	r0, r0, #1
 800a8f4:	8800      	ldrh	r0, [r0, #0]
 800a8f6:	4770      	bx	lr
 800a8f8:	40005c50 	.word	0x40005c50

0800a8fc <GetEPRxAddr>:
 800a8fc:	4a04      	ldr	r2, [pc, #16]	; (800a910 <GetEPRxAddr+0x14>)
 800a8fe:	4b05      	ldr	r3, [pc, #20]	; (800a914 <GetEPRxAddr+0x18>)
 800a900:	6812      	ldr	r2, [r2, #0]
 800a902:	b292      	uxth	r2, r2
 800a904:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a908:	4403      	add	r3, r0
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	8818      	ldrh	r0, [r3, #0]
 800a90e:	4770      	bx	lr
 800a910:	40005c50 	.word	0x40005c50
 800a914:	20003004 	.word	0x20003004

0800a918 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 800a918:	4a04      	ldr	r2, [pc, #16]	; (800a92c <SetEPTxCount+0x14>)
 800a91a:	4b05      	ldr	r3, [pc, #20]	; (800a930 <SetEPTxCount+0x18>)
 800a91c:	6812      	ldr	r2, [r2, #0]
 800a91e:	b292      	uxth	r2, r2
 800a920:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a924:	4403      	add	r3, r0
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	6019      	str	r1, [r3, #0]
 800a92a:	4770      	bx	lr
 800a92c:	40005c50 	.word	0x40005c50
 800a930:	20003002 	.word	0x20003002

0800a934 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 800a934:	4a0e      	ldr	r2, [pc, #56]	; (800a970 <SetEPRxCount+0x3c>)
 800a936:	4b0f      	ldr	r3, [pc, #60]	; (800a974 <SetEPRxCount+0x40>)
 800a938:	6812      	ldr	r2, [r2, #0]
 800a93a:	293e      	cmp	r1, #62	; 0x3e
 800a93c:	b292      	uxth	r2, r2
 800a93e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a942:	4403      	add	r3, r0
 800a944:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a948:	d90a      	bls.n	800a960 <SetEPRxCount+0x2c>
 800a94a:	094a      	lsrs	r2, r1, #5
 800a94c:	06c8      	lsls	r0, r1, #27
 800a94e:	bf04      	itt	eq
 800a950:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 800a954:	b292      	uxtheq	r2, r2
 800a956:	0292      	lsls	r2, r2, #10
 800a958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	4770      	bx	lr
 800a960:	084a      	lsrs	r2, r1, #1
 800a962:	07c9      	lsls	r1, r1, #31
 800a964:	bf48      	it	mi
 800a966:	3201      	addmi	r2, #1
 800a968:	0292      	lsls	r2, r2, #10
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	40005c50 	.word	0x40005c50
 800a974:	20003006 	.word	0x20003006

0800a978 <GetEPRxCount>:
 800a978:	4a05      	ldr	r2, [pc, #20]	; (800a990 <GetEPRxCount+0x18>)
 800a97a:	4b06      	ldr	r3, [pc, #24]	; (800a994 <GetEPRxCount+0x1c>)
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	b292      	uxth	r2, r2
 800a980:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a984:	4403      	add	r3, r0
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a98e:	4770      	bx	lr
 800a990:	40005c50 	.word	0x40005c50
 800a994:	20003006 	.word	0x20003006

0800a998 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 800a998:	b2c3      	uxtb	r3, r0
 800a99a:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 800a99c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop

0800a9a4 <USB_SIL_Init>:
{
#ifndef STM32F10X_CL
  
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800a9a4:	2000      	movs	r0, #0
  wInterrupt_Mask = IMR_MSK;
 800a9a6:	f44f 4306 	mov.w	r3, #34304	; 0x8600
{
 800a9aa:	b410      	push	{r4}
  wInterrupt_Mask = IMR_MSK;
 800a9ac:	4903      	ldr	r1, [pc, #12]	; (800a9bc <USB_SIL_Init+0x18>)
  _SetISTR(0);
 800a9ae:	4c04      	ldr	r4, [pc, #16]	; (800a9c0 <USB_SIL_Init+0x1c>)
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 800a9b0:	4a04      	ldr	r2, [pc, #16]	; (800a9c4 <USB_SIL_Init+0x20>)
  _SetISTR(0);
 800a9b2:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 800a9b4:	800b      	strh	r3, [r1, #0]
  OTG_DEV_Init();
  
#endif /* STM32F10X_CL */

  return 0;
}
 800a9b6:	bc10      	pop	{r4}
  _SetCNTR(wInterrupt_Mask);
 800a9b8:	6013      	str	r3, [r2, #0]
}
 800a9ba:	4770      	bx	lr
 800a9bc:	200013fc 	.word	0x200013fc
 800a9c0:	40005c44 	.word	0x40005c44
 800a9c4:	40005c40 	.word	0x40005c40

0800a9c8 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 800a9c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

#ifndef STM32F10X_CL

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a9ca:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800a9ce:	4628      	mov	r0, r5
{
 800a9d0:	460e      	mov	r6, r1
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 800a9d2:	f7ff ffd1 	bl	800a978 <GetEPRxCount>
 800a9d6:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f7ff ff8f 	bl	800a8fc <GetEPRxAddr>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	4601      	mov	r1, r0
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7ff fea6 	bl	800a734 <PMAToUserBufferCopy>
  
#endif /* STM32F10X_CL */

  /* Return the number of received data */
  return DataLength;
}
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}

0800a9ec <USB_Cable_Config>:

/*******************************************************************************
 * Description    : Software Connection/Disconnection of USB Cable
 *******************************************************************************/
void USB_Cable_Config(FunctionalState NewState)
{
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop

0800a9f0 <Get_SerialNum>:
 *******************************************************************************/
void Get_SerialNum(void)
{
	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a9f0:	4a3a      	ldr	r2, [pc, #232]	; (800aadc <Get_SerialNum+0xec>)
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a9f2:	493b      	ldr	r1, [pc, #236]	; (800aae0 <Get_SerialNum+0xf0>)
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a9f4:	4b3b      	ldr	r3, [pc, #236]	; (800aae4 <Get_SerialNum+0xf4>)
	Device_Serial0 = *(__IO uint32_t*) (0x1FFFF7E8);
 800a9f6:	6812      	ldr	r2, [r2, #0]
	Device_Serial1 = *(__IO uint32_t*) (0x1FFFF7EC);
 800a9f8:	6809      	ldr	r1, [r1, #0]
	Device_Serial2 = *(__IO uint32_t*) (0x1FFFF7F0);
 800a9fa:	681b      	ldr	r3, [r3, #0]

	Device_Serial0 += Device_Serial2;

	if (Device_Serial0 != 0)
 800a9fc:	18d2      	adds	r2, r2, r3
 800a9fe:	d06c      	beq.n	800aada <Get_SerialNum+0xea>
{
 800aa00:	b410      	push	{r4}
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;

		pbuf[2 * idx + 1] = 0;
 800aa02:	2400      	movs	r4, #0
		if (((value >> 28)) < 0xA)
 800aa04:	0f10      	lsrs	r0, r2, #28
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa06:	4b38      	ldr	r3, [pc, #224]	; (800aae8 <Get_SerialNum+0xf8>)
		if (((value >> 28)) < 0xA)
 800aa08:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa0a:	bf94      	ite	ls
 800aa0c:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa0e:	3037      	addhi	r0, #55	; 0x37
 800aa10:	7098      	strb	r0, [r3, #2]
		if (((value >> 28)) < 0xA)
 800aa12:	f3c2 6003 	ubfx	r0, r2, #24, #4
 800aa16:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa18:	bf94      	ite	ls
 800aa1a:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa1c:	3037      	addhi	r0, #55	; 0x37
 800aa1e:	7118      	strb	r0, [r3, #4]
		if (((value >> 28)) < 0xA)
 800aa20:	f3c2 5003 	ubfx	r0, r2, #20, #4
 800aa24:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa26:	bf94      	ite	ls
 800aa28:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa2a:	3037      	addhi	r0, #55	; 0x37
 800aa2c:	7198      	strb	r0, [r3, #6]
		if (((value >> 28)) < 0xA)
 800aa2e:	f3c2 4003 	ubfx	r0, r2, #16, #4
 800aa32:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa34:	bf94      	ite	ls
 800aa36:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa38:	3037      	addhi	r0, #55	; 0x37
 800aa3a:	7218      	strb	r0, [r3, #8]
		if (((value >> 28)) < 0xA)
 800aa3c:	f3c2 3003 	ubfx	r0, r2, #12, #4
 800aa40:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa42:	bf94      	ite	ls
 800aa44:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa46:	3037      	addhi	r0, #55	; 0x37
 800aa48:	7298      	strb	r0, [r3, #10]
		if (((value >> 28)) < 0xA)
 800aa4a:	f3c2 2003 	ubfx	r0, r2, #8, #4
 800aa4e:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa50:	bf94      	ite	ls
 800aa52:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa54:	3037      	addhi	r0, #55	; 0x37
 800aa56:	7318      	strb	r0, [r3, #12]
		if (((value >> 28)) < 0xA)
 800aa58:	f3c2 1003 	ubfx	r0, r2, #4, #4
 800aa5c:	2809      	cmp	r0, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa5e:	bf94      	ite	ls
 800aa60:	3030      	addls	r0, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa62:	3037      	addhi	r0, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800aa64:	70dc      	strb	r4, [r3, #3]
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa66:	7398      	strb	r0, [r3, #14]
		pbuf[2 * idx + 1] = 0;
 800aa68:	2400      	movs	r4, #0
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	715c      	strb	r4, [r3, #5]
 800aa6e:	73d8      	strb	r0, [r3, #15]
 800aa70:	2400      	movs	r4, #0
 800aa72:	2000      	movs	r0, #0
 800aa74:	71dc      	strb	r4, [r3, #7]
 800aa76:	7458      	strb	r0, [r3, #17]
 800aa78:	2400      	movs	r4, #0
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	725c      	strb	r4, [r3, #9]
 800aa7e:	74d8      	strb	r0, [r3, #19]
 800aa80:	2400      	movs	r4, #0
 800aa82:	2000      	movs	r0, #0
		if (((value >> 28)) < 0xA)
 800aa84:	f002 020f 	and.w	r2, r2, #15
 800aa88:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa8a:	bf94      	ite	ls
 800aa8c:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa8e:	3237      	addhi	r2, #55	; 0x37
 800aa90:	741a      	strb	r2, [r3, #16]
		if (((value >> 28)) < 0xA)
 800aa92:	0f0a      	lsrs	r2, r1, #28
 800aa94:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aa96:	bf94      	ite	ls
 800aa98:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa9a:	3237      	addhi	r2, #55	; 0x37
 800aa9c:	749a      	strb	r2, [r3, #18]
		if (((value >> 28)) < 0xA)
 800aa9e:	f3c1 6203 	ubfx	r2, r1, #24, #4
 800aaa2:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aaa4:	bf94      	ite	ls
 800aaa6:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aaa8:	3237      	addhi	r2, #55	; 0x37
 800aaaa:	751a      	strb	r2, [r3, #20]
		if (((value >> 28)) < 0xA)
 800aaac:	f3c1 5203 	ubfx	r2, r1, #20, #4
 800aab0:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aab2:	bf94      	ite	ls
 800aab4:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aab6:	3237      	addhi	r2, #55	; 0x37
 800aab8:	759a      	strb	r2, [r3, #22]
		if (((value >> 28)) < 0xA)
 800aaba:	f3c1 4203 	ubfx	r2, r1, #16, #4
 800aabe:	2a09      	cmp	r2, #9
			pbuf[2 * idx] = (value >> 28) + '0';
 800aac0:	bf94      	ite	ls
 800aac2:	3230      	addls	r2, #48	; 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aac4:	3237      	addhi	r2, #55	; 0x37
		pbuf[2 * idx + 1] = 0;
 800aac6:	72dc      	strb	r4, [r3, #11]
 800aac8:	7558      	strb	r0, [r3, #21]
 800aaca:	2400      	movs	r4, #0
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aacc:	761a      	strb	r2, [r3, #24]
		pbuf[2 * idx + 1] = 0;
 800aace:	2000      	movs	r0, #0
 800aad0:	2200      	movs	r2, #0
 800aad2:	735c      	strb	r4, [r3, #13]
 800aad4:	75d8      	strb	r0, [r3, #23]
 800aad6:	765a      	strb	r2, [r3, #25]
}
 800aad8:	bc10      	pop	{r4}
 800aada:	4770      	bx	lr
 800aadc:	1ffff7e8 	.word	0x1ffff7e8
 800aae0:	1ffff7ec 	.word	0x1ffff7ec
 800aae4:	1ffff7f0 	.word	0x1ffff7f0
 800aae8:	2000001c 	.word	0x2000001c

0800aaec <EP1_IN_Callback.part.0>:
	uint8_t head;

	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
	head = serial_tx_buffer_head;
	txUsbLock = 0; // this may be removed
 800aaec:	2100      	movs	r1, #0
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800aaee:	2001      	movs	r0, #1
void EP1_IN_Callback(void)
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800aaf2:	4b2a      	ldr	r3, [pc, #168]	; (800ab9c <EP1_IN_Callback.part.0+0xb0>)

	if ((head != serial_tx_buffer_tail)) {
 800aaf4:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800abac <EP1_IN_Callback.part.0+0xc0>
	head = serial_tx_buffer_head;
 800aaf8:	4a29      	ldr	r2, [pc, #164]	; (800aba0 <EP1_IN_Callback.part.0+0xb4>)
	txUsbLock = 1; // this may be removed, just make sure the local head variable save the serial_tx_buffer_head before doing condition check
 800aafa:	7018      	strb	r0, [r3, #0]
	txUsbLock = 0; // this may be removed
 800aafc:	7019      	strb	r1, [r3, #0]
	if ((head != serial_tx_buffer_tail)) {
 800aafe:	f89c 3000 	ldrb.w	r3, [ip]
	head = serial_tx_buffer_head;
 800ab02:	7811      	ldrb	r1, [r2, #0]
	if ((head != serial_tx_buffer_tail)) {
 800ab04:	4299      	cmp	r1, r3
 800ab06:	d040      	beq.n	800ab8a <EP1_IN_Callback.part.0+0x9e>
		if (head > serial_tx_buffer_tail)
 800ab08:	f89c 3000 	ldrb.w	r3, [ip]
 800ab0c:	4299      	cmp	r1, r3
			USB_Tx_length = head - serial_tx_buffer_tail;
 800ab0e:	f89c 3000 	ldrb.w	r3, [ip]
		else
			USB_Tx_length = TX_BUFFER_SIZE - serial_tx_buffer_tail + head;
 800ab12:	bf98      	it	ls
 800ab14:	3180      	addls	r1, #128	; 0x80
 800ab16:	1ac9      	subs	r1, r1, r3
 800ab18:	b289      	uxth	r1, r1

		if (USB_Tx_length != 0) {
 800ab1a:	2900      	cmp	r1, #0
 800ab1c:	d035      	beq.n	800ab8a <EP1_IN_Callback.part.0+0x9e>
 800ab1e:	2940      	cmp	r1, #64	; 0x40
				USB_Tx_length = 64;

			// UserToPMABufferCopy(&serial_tx_buffer[serial_tx_buffer_tail], ENDP1_TXADDR, USB_Tx_length);

			{
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800ab20:	4e20      	ldr	r6, [pc, #128]	; (800aba4 <EP1_IN_Callback.part.0+0xb8>)
 800ab22:	bf28      	it	cs
 800ab24:	2140      	movcs	r1, #64	; 0x40
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
				uint32_t i;
				uint16_t temp1;
				uint16_t *pdwVal= (uint16_t *)(ENDP1_TXADDR * 2 + PMAAddr);

				for (i = 0; i<n; i++) {
 800ab26:	2500      	movs	r5, #0
 800ab28:	4637      	mov	r7, r6
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800ab2a:	f89c 2000 	ldrb.w	r2, [ip]
				uint32_t n = (USB_Tx_length + 1) >> 1; /* n = (wNBytes + 1) / 2 */
 800ab2e:	f101 0e01 	add.w	lr, r1, #1
 800ab32:	4c1d      	ldr	r4, [pc, #116]	; (800aba8 <EP1_IN_Callback.part.0+0xbc>)
 800ab34:	ea4f 0e6e 	mov.w	lr, lr, asr #1
				uint8_t *pbUsrBuf = serial_tx_buffer + serial_tx_buffer_tail;
 800ab38:	4432      	add	r2, r6
					temp1 = (uint16_t) *pbUsrBuf;
					pbUsrBuf++;
 800ab3a:	1c53      	adds	r3, r2, #1
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800ab3c:	1b98      	subs	r0, r3, r6
						pbUsrBuf = serial_tx_buffer;

					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800ab3e:	2880      	cmp	r0, #128	; 0x80
 800ab40:	bf08      	it	eq
 800ab42:	463b      	moveq	r3, r7
 800ab44:	7810      	ldrb	r0, [r2, #0]
 800ab46:	f813 2b01 	ldrb.w	r2, [r3], #1
				for (i = 0; i<n; i++) {
 800ab4a:	3501      	adds	r5, #1
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800ab4c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
					pdwVal++;
					pbUsrBuf++;
					if (pbUsrBuf - serial_tx_buffer == TX_BUFFER_SIZE)
 800ab50:	1b9a      	subs	r2, r3, r6
 800ab52:	2a80      	cmp	r2, #128	; 0x80
 800ab54:	bf14      	ite	ne
 800ab56:	461a      	movne	r2, r3
 800ab58:	463a      	moveq	r2, r7
				for (i = 0; i<n; i++) {
 800ab5a:	45ae      	cmp	lr, r5
					*pdwVal++ = temp1 | (uint16_t) * pbUsrBuf << 8;
 800ab5c:	f824 0c04 	strh.w	r0, [r4, #-4]
 800ab60:	f104 0404 	add.w	r4, r4, #4
				for (i = 0; i<n; i++) {
 800ab64:	d8e9      	bhi.n	800ab3a <EP1_IN_Callback.part.0+0x4e>
						pbUsrBuf = serial_tx_buffer;
					}
			}

		serial_tx_buffer_tail += USB_Tx_length;
 800ab66:	f89c 3000 	ldrb.w	r3, [ip]
 800ab6a:	440b      	add	r3, r1
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f88c 3000 	strb.w	r3, [ip]
		if (serial_tx_buffer_tail >= TX_BUFFER_SIZE)
 800ab72:	f89c 3000 	ldrb.w	r3, [ip]
 800ab76:	061b      	lsls	r3, r3, #24
 800ab78:	d408      	bmi.n	800ab8c <EP1_IN_Callback.part.0+0xa0>
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
		SetEPTxCount(ENDP1, USB_Tx_length);
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	f7ff fecc 	bl	800a918 <SetEPTxCount>
		SetEPTxValid(ENDP1);
		}
	}
}
 800ab80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		SetEPTxValid(ENDP1);
 800ab84:	2001      	movs	r0, #1
 800ab86:	f7ff be2f 	b.w	800a7e8 <SetEPTxValid>
 800ab8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			serial_tx_buffer_tail -= TX_BUFFER_SIZE;
 800ab8c:	f89c 3000 	ldrb.w	r3, [ip]
 800ab90:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800ab94:	f88c 3000 	strb.w	r3, [ip]
 800ab98:	e7ef      	b.n	800ab7a <EP1_IN_Callback.part.0+0x8e>
 800ab9a:	bf00      	nop
 800ab9c:	20000ccc 	.word	0x20000ccc
 800aba0:	20000aec 	.word	0x20000aec
 800aba4:	200011cc 	.word	0x200011cc
 800aba8:	40006184 	.word	0x40006184
 800abac:	20000aed 	.word	0x20000aed

0800abb0 <EP3_OUT_Callback>:
{
 800abb0:	b508      	push	{r3, lr}
	USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 800abb2:	4904      	ldr	r1, [pc, #16]	; (800abc4 <EP3_OUT_Callback+0x14>)
 800abb4:	2003      	movs	r0, #3
 800abb6:	f7ff ff07 	bl	800a9c8 <USB_SIL_Read>
}
 800abba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetEPRxValid(ENDP3);
 800abbe:	2003      	movs	r0, #3
 800abc0:	f7ff be26 	b.w	800a810 <SetEPRxValid>
 800abc4:	20001404 	.word	0x20001404

0800abc8 <EP1_IN_Callback>:
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800abc8:	4b04      	ldr	r3, [pc, #16]	; (800abdc <EP1_IN_Callback+0x14>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d000      	beq.n	800abd6 <EP1_IN_Callback+0xe>
 800abd4:	4770      	bx	lr
 800abd6:	f7ff bf89 	b.w	800aaec <EP1_IN_Callback.part.0>
 800abda:	bf00      	nop
 800abdc:	40005c04 	.word	0x40005c04

0800abe0 <SOF_Callback>:

/*	\brief Start Of Frame (SOF) callback
 */
void SOF_Callback(void)
{
	if(bDeviceState == CONFIGURED)
 800abe0:	4b06      	ldr	r3, [pc, #24]	; (800abfc <SOF_Callback+0x1c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b05      	cmp	r3, #5
 800abe6:	d000      	beq.n	800abea <SOF_Callback+0xa>
 800abe8:	4770      	bx	lr
	if(_GetEPTxStatus(ENDP1) != EP_TX_NAK) return;
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <SOF_Callback+0x20>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	d1f8      	bne.n	800abe8 <SOF_Callback+0x8>
 800abf6:	f7ff bf79 	b.w	800aaec <EP1_IN_Callback.part.0>
 800abfa:	bf00      	nop
 800abfc:	20000cd0 	.word	0x20000cd0
 800ac00:	40005c04 	.word	0x40005c04

0800ac04 <USB_Istr>:
* Return         :
*******************************************************************************/
void USB_Istr(void)
{

  wIstr = _GetISTR();
 800ac04:	4917      	ldr	r1, [pc, #92]	; (800ac64 <USB_Istr+0x60>)
{
 800ac06:	b570      	push	{r4, r5, r6, lr}
  wIstr = _GetISTR();
 800ac08:	680b      	ldr	r3, [r1, #0]
 800ac0a:	4c17      	ldr	r4, [pc, #92]	; (800ac68 <USB_Istr+0x64>)
 800ac0c:	b29b      	uxth	r3, r3

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800ac0e:	4d17      	ldr	r5, [pc, #92]	; (800ac6c <USB_Istr+0x68>)
  wIstr = _GetISTR();
 800ac10:	8023      	strh	r3, [r4, #0]
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 800ac12:	8822      	ldrh	r2, [r4, #0]
 800ac14:	882b      	ldrh	r3, [r5, #0]
 800ac16:	401a      	ands	r2, r3
 800ac18:	0590      	lsls	r0, r2, #22
 800ac1a:	d416      	bmi.n	800ac4a <USB_Istr+0x46>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 800ac1c:	8822      	ldrh	r2, [r4, #0]
 800ac1e:	401a      	ands	r2, r3
 800ac20:	0412      	lsls	r2, r2, #16
 800ac22:	d40e      	bmi.n	800ac42 <USB_Istr+0x3e>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 800ac24:	8822      	ldrh	r2, [r4, #0]
 800ac26:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800ac2a:	4213      	tst	r3, r2
 800ac2c:	d100      	bne.n	800ac30 <USB_Istr+0x2c>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
  {
    _SetISTR((uint16_t)CLR_RESET);
 800ac30:	f64f 31ff 	movw	r1, #64511	; 0xfbff
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 800ac34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _SetISTR((uint16_t)CLR_RESET);
 800ac38:	4a0a      	ldr	r2, [pc, #40]	; (800ac64 <USB_Istr+0x60>)
    Device_Property.Reset();
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <USB_Istr+0x6c>)
    _SetISTR((uint16_t)CLR_RESET);
 800ac3c:	6011      	str	r1, [r2, #0]
    Device_Property.Reset();
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	4718      	bx	r3
    CTR_LP();
 800ac42:	f7ff fca3 	bl	800a58c <CTR_LP>
 800ac46:	882b      	ldrh	r3, [r5, #0]
 800ac48:	e7ec      	b.n	800ac24 <USB_Istr+0x20>
    _SetISTR((uint16_t)CLR_SOF);
 800ac4a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
    bIntPackSOF++;
 800ac4e:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <USB_Istr+0x70>)
    _SetISTR((uint16_t)CLR_SOF);
 800ac50:	600b      	str	r3, [r1, #0]
    bIntPackSOF++;
 800ac52:	7813      	ldrb	r3, [r2, #0]
 800ac54:	3301      	adds	r3, #1
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	7013      	strb	r3, [r2, #0]
    SOF_Callback();
 800ac5a:	f7ff ffc1 	bl	800abe0 <SOF_Callback>
 800ac5e:	882b      	ldrh	r3, [r5, #0]
 800ac60:	e7dc      	b.n	800ac1c <USB_Istr+0x18>
 800ac62:	bf00      	nop
 800ac64:	40005c44 	.word	0x40005c44
 800ac68:	20001444 	.word	0x20001444
 800ac6c:	200013fc 	.word	0x200013fc
 800ac70:	20000080 	.word	0x20000080
 800ac74:	20000ccd 	.word	0x20000ccd

0800ac78 <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 800ac78:	4b03      	ldr	r3, [pc, #12]	; (800ac88 <Virtual_Com_Port_Status_In+0x10>)
 800ac7a:	781a      	ldrb	r2, [r3, #0]
 800ac7c:	2a20      	cmp	r2, #32
  {
    Request = 0;
 800ac7e:	bf04      	itt	eq
 800ac80:	2200      	moveq	r2, #0
 800ac82:	701a      	strbeq	r2, [r3, #0]
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	20000cce 	.word	0x20000cce

0800ac8c <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 800ac90:	2821      	cmp	r0, #33	; 0x21
 800ac92:	d004      	beq.n	800ac9e <Virtual_Com_Port_Data_Setup+0xe>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 800ac94:	2820      	cmp	r0, #32
 800ac96:	4603      	mov	r3, r0
 800ac98:	d011      	beq.n	800acbe <Virtual_Com_Port_Data_Setup+0x2e>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 800ac9a:	2002      	movs	r0, #2
 800ac9c:	4770      	bx	lr
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <Virtual_Com_Port_Data_Setup+0x4c>)
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	7813      	ldrb	r3, [r2, #0]
 800aca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca8:	2b21      	cmp	r3, #33	; 0x21
 800acaa:	d1f6      	bne.n	800ac9a <Virtual_Com_Port_Data_Setup+0xa>
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 800acac:	490c      	ldr	r1, [pc, #48]	; (800ace0 <Virtual_Com_Port_Data_Setup+0x50>)
{
 800acae:	b510      	push	{r4, lr}
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800acb0:	2400      	movs	r4, #0
  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800acb2:	6191      	str	r1, [r2, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 800acb4:	8254      	strh	r4, [r2, #18]
  (*CopyRoutine)(0);
 800acb6:	4620      	mov	r0, r4
 800acb8:	4788      	blx	r1
  return USB_SUCCESS;
 800acba:	4620      	mov	r0, r4
 800acbc:	bd10      	pop	{r4, pc}
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800acbe:	4a07      	ldr	r2, [pc, #28]	; (800acdc <Virtual_Com_Port_Data_Setup+0x4c>)
 800acc0:	6812      	ldr	r2, [r2, #0]
 800acc2:	7811      	ldrb	r1, [r2, #0]
 800acc4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800acc8:	2921      	cmp	r1, #33	; 0x21
 800acca:	d003      	beq.n	800acd4 <Virtual_Com_Port_Data_Setup+0x44>
    Request = SET_LINE_CODING;
 800accc:	4a05      	ldr	r2, [pc, #20]	; (800ace4 <Virtual_Com_Port_Data_Setup+0x54>)
    return USB_UNSUPPORT;
 800acce:	2002      	movs	r0, #2
    Request = SET_LINE_CODING;
 800acd0:	7013      	strb	r3, [r2, #0]
 800acd2:	4770      	bx	lr
 800acd4:	4803      	ldr	r0, [pc, #12]	; (800ace4 <Virtual_Com_Port_Data_Setup+0x54>)
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800acd6:	4904      	ldr	r1, [pc, #16]	; (800ace8 <Virtual_Com_Port_Data_Setup+0x58>)
    Request = SET_LINE_CODING;
 800acd8:	7003      	strb	r3, [r0, #0]
 800acda:	e7e8      	b.n	800acae <Virtual_Com_Port_Data_Setup+0x1e>
 800acdc:	200013f8 	.word	0x200013f8
 800ace0:	0800ae75 	.word	0x0800ae75
 800ace4:	20000cce 	.word	0x20000cce
 800ace8:	0800ad21 	.word	0x0800ad21

0800acec <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 800acec:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <Virtual_Com_Port_NoData_Setup+0x20>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf6:	2b21      	cmp	r3, #33	; 0x21
 800acf8:	d001      	beq.n	800acfe <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 800acfa:	2002      	movs	r0, #2
}
 800acfc:	4770      	bx	lr
    if (RequestNo == SET_COMM_FEATURE)
 800acfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad02:	2802      	cmp	r0, #2
      return USB_SUCCESS;
 800ad04:	bf14      	ite	ne
 800ad06:	2002      	movne	r0, #2
 800ad08:	2000      	moveq	r0, #0
 800ad0a:	4770      	bx	lr
 800ad0c:	200013f8 	.word	0x200013f8

0800ad10 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 800ad10:	b109      	cbz	r1, 800ad16 <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800ad12:	2002      	movs	r0, #2
  else if (Interface > 1)
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
}
 800ad14:	4770      	bx	lr
  else if (Interface > 1)
 800ad16:	2801      	cmp	r0, #1
  return USB_SUCCESS;
 800ad18:	bf8c      	ite	hi
 800ad1a:	2002      	movhi	r0, #2
 800ad1c:	2000      	movls	r0, #0
 800ad1e:	4770      	bx	lr

0800ad20 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 800ad20:	b108      	cbz	r0, 800ad26 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800ad22:	4803      	ldr	r0, [pc, #12]	; (800ad30 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 800ad24:	4770      	bx	lr
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800ad26:	2208      	movs	r2, #8
 800ad28:	4b02      	ldr	r3, [pc, #8]	; (800ad34 <Virtual_Com_Port_SetLineCoding+0x14>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	821a      	strh	r2, [r3, #16]
    return NULL;
 800ad2e:	4770      	bx	lr
 800ad30:	200000d4 	.word	0x200000d4
 800ad34:	200013f8 	.word	0x200013f8

0800ad38 <Virtual_Com_Port_init>:
{
 800ad38:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ad3a:	2400      	movs	r4, #0
  Get_SerialNum();
 800ad3c:	f7ff fe58 	bl	800a9f0 <Get_SerialNum>
  pInformation->Current_Configuration = 0;
 800ad40:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <Virtual_Com_Port_init+0x1c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	729c      	strb	r4, [r3, #10]
  PowerOn();
 800ad46:	f000 f8a1 	bl	800ae8c <PowerOn>
  USB_SIL_Init();
 800ad4a:	f7ff fe2b 	bl	800a9a4 <USB_SIL_Init>
  bDeviceState = UNCONNECTED;
 800ad4e:	4b02      	ldr	r3, [pc, #8]	; (800ad58 <Virtual_Com_Port_init+0x20>)
 800ad50:	601c      	str	r4, [r3, #0]
 800ad52:	bd10      	pop	{r4, pc}
 800ad54:	200013f8 	.word	0x200013f8
 800ad58:	20000cd0 	.word	0x20000cd0

0800ad5c <Virtual_Com_Port_Reset>:
{
 800ad5c:	b510      	push	{r4, lr}
  pInformation->Current_Configuration = 0;
 800ad5e:	2400      	movs	r4, #0
 800ad60:	4b32      	ldr	r3, [pc, #200]	; (800ae2c <Virtual_Com_Port_Reset+0xd0>)
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ad62:	4a33      	ldr	r2, [pc, #204]	; (800ae30 <Virtual_Com_Port_Reset+0xd4>)
  pInformation->Current_Configuration = 0;
 800ad64:	681b      	ldr	r3, [r3, #0]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ad66:	79d2      	ldrb	r2, [r2, #7]
  pInformation->Current_Configuration = 0;
 800ad68:	729c      	strb	r4, [r3, #10]
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 800ad6a:	725a      	strb	r2, [r3, #9]
  pInformation->Current_Interface = 0;
 800ad6c:	72dc      	strb	r4, [r3, #11]
  SetBTABLE(BTABLE_ADDRESS);
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7ff fcf0 	bl	800a754 <SetBTABLE>
  SetEPType(ENDP0, EP_CONTROL);
 800ad74:	4620      	mov	r0, r4
 800ad76:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad7a:	f7ff fcf3 	bl	800a764 <SetEPType>
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800ad7e:	4620      	mov	r0, r4
 800ad80:	2110      	movs	r1, #16
 800ad82:	f7ff fcfd 	bl	800a780 <SetEPTxStatus>
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800ad86:	4620      	mov	r0, r4
 800ad88:	2140      	movs	r1, #64	; 0x40
 800ad8a:	f7ff fd99 	bl	800a8c0 <SetEPRxAddr>
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800ad8e:	2180      	movs	r1, #128	; 0x80
 800ad90:	4620      	mov	r0, r4
 800ad92:	f7ff fd85 	bl	800a8a0 <SetEPTxAddr>
  Clear_Status_Out(ENDP0);
 800ad96:	4620      	mov	r0, r4
 800ad98:	f7ff fd4e 	bl	800a838 <Clear_Status_Out>
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800ad9c:	4b25      	ldr	r3, [pc, #148]	; (800ae34 <Virtual_Com_Port_Reset+0xd8>)
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 800ada4:	f7ff fdc6 	bl	800a934 <SetEPRxCount>
  SetEPRxValid(ENDP0);
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7ff fd31 	bl	800a810 <SetEPRxValid>
  SetEPType(ENDP1, EP_BULK);
 800adae:	4621      	mov	r1, r4
 800adb0:	2001      	movs	r0, #1
 800adb2:	f7ff fcd7 	bl	800a764 <SetEPType>
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800adb6:	21c0      	movs	r1, #192	; 0xc0
 800adb8:	2001      	movs	r0, #1
 800adba:	f7ff fd71 	bl	800a8a0 <SetEPTxAddr>
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 800adbe:	2120      	movs	r1, #32
 800adc0:	2001      	movs	r0, #1
 800adc2:	f7ff fcdd 	bl	800a780 <SetEPTxStatus>
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800adc6:	4621      	mov	r1, r4
 800adc8:	2001      	movs	r0, #1
 800adca:	f7ff fcf3 	bl	800a7b4 <SetEPRxStatus>
  SetEPType(ENDP2, EP_INTERRUPT);
 800adce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800add2:	2002      	movs	r0, #2
 800add4:	f7ff fcc6 	bl	800a764 <SetEPType>
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800add8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800addc:	2002      	movs	r0, #2
 800adde:	f7ff fd5f 	bl	800a8a0 <SetEPTxAddr>
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 800ade2:	4621      	mov	r1, r4
 800ade4:	2002      	movs	r0, #2
 800ade6:	f7ff fce5 	bl	800a7b4 <SetEPRxStatus>
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 800adea:	2120      	movs	r1, #32
 800adec:	2002      	movs	r0, #2
 800adee:	f7ff fcc7 	bl	800a780 <SetEPTxStatus>
  SetEPType(ENDP3, EP_BULK);
 800adf2:	4621      	mov	r1, r4
 800adf4:	2003      	movs	r0, #3
 800adf6:	f7ff fcb5 	bl	800a764 <SetEPType>
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 800adfa:	f44f 7188 	mov.w	r1, #272	; 0x110
 800adfe:	2003      	movs	r0, #3
 800ae00:	f7ff fd5e 	bl	800a8c0 <SetEPRxAddr>
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 800ae04:	2140      	movs	r1, #64	; 0x40
 800ae06:	2003      	movs	r0, #3
 800ae08:	f7ff fd94 	bl	800a934 <SetEPRxCount>
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 800ae0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800ae10:	2003      	movs	r0, #3
 800ae12:	f7ff fccf 	bl	800a7b4 <SetEPRxStatus>
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 800ae16:	4621      	mov	r1, r4
 800ae18:	2003      	movs	r0, #3
 800ae1a:	f7ff fcb1 	bl	800a780 <SetEPTxStatus>
  SetDeviceAddress(0);
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f7ff fb92 	bl	800a548 <SetDeviceAddress>
  bDeviceState = ATTACHED;
 800ae24:	2201      	movs	r2, #1
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <Virtual_Com_Port_Reset+0xdc>)
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	bd10      	pop	{r4, pc}
 800ae2c:	200013f8 	.word	0x200013f8
 800ae30:	0800c2f0 	.word	0x0800c2f0
 800ae34:	20000080 	.word	0x20000080
 800ae38:	20000cd0 	.word	0x20000cd0

0800ae3c <Virtual_Com_Port_GetDeviceDescriptor>:
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 800ae3c:	4901      	ldr	r1, [pc, #4]	; (800ae44 <Virtual_Com_Port_GetDeviceDescriptor+0x8>)
 800ae3e:	f7ff b889 	b.w	8009f54 <Standard_GetDescriptorData>
 800ae42:	bf00      	nop
 800ae44:	20000078 	.word	0x20000078

0800ae48 <Virtual_Com_Port_GetConfigDescriptor>:
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 800ae48:	4901      	ldr	r1, [pc, #4]	; (800ae50 <Virtual_Com_Port_GetConfigDescriptor+0x8>)
 800ae4a:	f7ff b883 	b.w	8009f54 <Standard_GetDescriptorData>
 800ae4e:	bf00      	nop
 800ae50:	20000070 	.word	0x20000070

0800ae54 <Virtual_Com_Port_GetStringDescriptor>:
  uint8_t wValue0 = pInformation->USBwValue0;
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <Virtual_Com_Port_GetStringDescriptor+0x18>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d804      	bhi.n	800ae68 <Virtual_Com_Port_GetStringDescriptor+0x14>
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 800ae5e:	4904      	ldr	r1, [pc, #16]	; (800ae70 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800ae60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae64:	f7ff b876 	b.w	8009f54 <Standard_GetDescriptorData>
}
 800ae68:	2000      	movs	r0, #0
 800ae6a:	4770      	bx	lr
 800ae6c:	200013f8 	.word	0x200013f8
 800ae70:	200000b4 	.word	0x200000b4

0800ae74 <Virtual_Com_Port_GetLineCoding>:
 800ae74:	b108      	cbz	r0, 800ae7a <Virtual_Com_Port_GetLineCoding+0x6>
 800ae76:	4803      	ldr	r0, [pc, #12]	; (800ae84 <Virtual_Com_Port_GetLineCoding+0x10>)
 800ae78:	4770      	bx	lr
 800ae7a:	2208      	movs	r2, #8
 800ae7c:	4b02      	ldr	r3, [pc, #8]	; (800ae88 <Virtual_Com_Port_GetLineCoding+0x14>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	821a      	strh	r2, [r3, #16]
 800ae82:	4770      	bx	lr
 800ae84:	200000d4 	.word	0x200000d4
 800ae88:	200013f8 	.word	0x200013f8

0800ae8c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800ae8c:	b538      	push	{r3, r4, r5, lr}
#ifndef STM32F10X_CL
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800ae8e:	2001      	movs	r0, #1
 800ae90:	f7ff fdac 	bl	800a9ec <USB_Cable_Config>
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800ae94:	2200      	movs	r2, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800ae96:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
  _SetCNTR(wRegVal);
 800ae9a:	2001      	movs	r0, #1
 800ae9c:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <PowerOn+0x24>)
  _SetISTR(0);
 800ae9e:	4d05      	ldr	r5, [pc, #20]	; (800aeb4 <PowerOn+0x28>)
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800aea0:	4c05      	ldr	r4, [pc, #20]	; (800aeb8 <PowerOn+0x2c>)
  _SetCNTR(wRegVal);
 800aea2:	6018      	str	r0, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
 800aea4:	601a      	str	r2, [r3, #0]
  _SetCNTR(wInterrupt_Mask);
#endif /* STM32F10X_CL */

  return USB_SUCCESS;
}
 800aea6:	4610      	mov	r0, r2
  _SetISTR(0);
 800aea8:	602a      	str	r2, [r5, #0]
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800aeaa:	8021      	strh	r1, [r4, #0]
  _SetCNTR(wInterrupt_Mask);
 800aeac:	6019      	str	r1, [r3, #0]
}
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	40005c40 	.word	0x40005c40
 800aeb4:	40005c44 	.word	0x40005c44
 800aeb8:	200013fc 	.word	0x200013fc

0800aebc <NMI_Handler>:
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop

0800aec0 <HardFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFault_Handler(void)
{
 800aec0:	e7fe      	b.n	800aec0 <HardFault_Handler>
 800aec2:	bf00      	nop

0800aec4 <MemManage_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManage_Handler(void)
{
 800aec4:	e7fe      	b.n	800aec4 <MemManage_Handler>
 800aec6:	bf00      	nop

0800aec8 <BusFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFault_Handler(void)
{
 800aec8:	e7fe      	b.n	800aec8 <BusFault_Handler>
 800aeca:	bf00      	nop

0800aecc <UsageFault_Handler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFault_Handler(void)
{
 800aecc:	e7fe      	b.n	800aecc <UsageFault_Handler>
 800aece:	bf00      	nop

0800aed0 <SVC_Handler>:
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop

0800aed4 <DebugMon_Handler>:
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop

0800aed8 <PendSV_Handler>:
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop

0800aedc <USB_LP_CAN1_RX0_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  USB_Istr();
 800aedc:	f7ff be92 	b.w	800ac04 <USB_Istr>

0800aee0 <__libc_init_array>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	2500      	movs	r5, #0
 800aee4:	4e0c      	ldr	r6, [pc, #48]	; (800af18 <__libc_init_array+0x38>)
 800aee6:	4c0d      	ldr	r4, [pc, #52]	; (800af1c <__libc_init_array+0x3c>)
 800aee8:	1ba4      	subs	r4, r4, r6
 800aeea:	10a4      	asrs	r4, r4, #2
 800aeec:	42a5      	cmp	r5, r4
 800aeee:	d109      	bne.n	800af04 <__libc_init_array+0x24>
 800aef0:	f001 f8d4 	bl	800c09c <_init>
 800aef4:	2500      	movs	r5, #0
 800aef6:	4e0a      	ldr	r6, [pc, #40]	; (800af20 <__libc_init_array+0x40>)
 800aef8:	4c0a      	ldr	r4, [pc, #40]	; (800af24 <__libc_init_array+0x44>)
 800aefa:	1ba4      	subs	r4, r4, r6
 800aefc:	10a4      	asrs	r4, r4, #2
 800aefe:	42a5      	cmp	r5, r4
 800af00:	d105      	bne.n	800af0e <__libc_init_array+0x2e>
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af08:	4798      	blx	r3
 800af0a:	3501      	adds	r5, #1
 800af0c:	e7ee      	b.n	800aeec <__libc_init_array+0xc>
 800af0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af12:	4798      	blx	r3
 800af14:	3501      	adds	r5, #1
 800af16:	e7f2      	b.n	800aefe <__libc_init_array+0x1e>
 800af18:	0800c774 	.word	0x0800c774
 800af1c:	0800c774 	.word	0x0800c774
 800af20:	0800c774 	.word	0x0800c774
 800af24:	0800c778 	.word	0x0800c778

0800af28 <memcmp>:
 800af28:	b510      	push	{r4, lr}
 800af2a:	3901      	subs	r1, #1
 800af2c:	4402      	add	r2, r0
 800af2e:	4290      	cmp	r0, r2
 800af30:	d101      	bne.n	800af36 <memcmp+0xe>
 800af32:	2000      	movs	r0, #0
 800af34:	bd10      	pop	{r4, pc}
 800af36:	f810 3b01 	ldrb.w	r3, [r0], #1
 800af3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800af3e:	42a3      	cmp	r3, r4
 800af40:	d0f5      	beq.n	800af2e <memcmp+0x6>
 800af42:	1b18      	subs	r0, r3, r4
 800af44:	bd10      	pop	{r4, pc}

0800af46 <memset>:
 800af46:	4603      	mov	r3, r0
 800af48:	4402      	add	r2, r0
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d100      	bne.n	800af50 <memset+0xa>
 800af4e:	4770      	bx	lr
 800af50:	f803 1b01 	strb.w	r1, [r3], #1
 800af54:	e7f9      	b.n	800af4a <memset+0x4>
	...

0800af58 <ceilf>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800af5e:	0df5      	lsrs	r5, r6, #23
 800af60:	3d7f      	subs	r5, #127	; 0x7f
 800af62:	2d16      	cmp	r5, #22
 800af64:	4601      	mov	r1, r0
 800af66:	4604      	mov	r4, r0
 800af68:	dc26      	bgt.n	800afb8 <ceilf+0x60>
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	da0e      	bge.n	800af8c <ceilf+0x34>
 800af6e:	4918      	ldr	r1, [pc, #96]	; (800afd0 <ceilf+0x78>)
 800af70:	f7f5 fd96 	bl	8000aa0 <__addsf3>
 800af74:	2100      	movs	r1, #0
 800af76:	f7f6 f857 	bl	8001028 <__aeabi_fcmpgt>
 800af7a:	b128      	cbz	r0, 800af88 <ceilf+0x30>
 800af7c:	2c00      	cmp	r4, #0
 800af7e:	db23      	blt.n	800afc8 <ceilf+0x70>
 800af80:	2e00      	cmp	r6, #0
 800af82:	bf18      	it	ne
 800af84:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 800af88:	4621      	mov	r1, r4
 800af8a:	e01b      	b.n	800afc4 <ceilf+0x6c>
 800af8c:	4e11      	ldr	r6, [pc, #68]	; (800afd4 <ceilf+0x7c>)
 800af8e:	412e      	asrs	r6, r5
 800af90:	4230      	tst	r0, r6
 800af92:	d017      	beq.n	800afc4 <ceilf+0x6c>
 800af94:	490e      	ldr	r1, [pc, #56]	; (800afd0 <ceilf+0x78>)
 800af96:	f7f5 fd83 	bl	8000aa0 <__addsf3>
 800af9a:	2100      	movs	r1, #0
 800af9c:	f7f6 f844 	bl	8001028 <__aeabi_fcmpgt>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d0f1      	beq.n	800af88 <ceilf+0x30>
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	bfc2      	ittt	gt
 800afa8:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 800afac:	fa43 f505 	asrgt.w	r5, r3, r5
 800afb0:	1964      	addgt	r4, r4, r5
 800afb2:	ea24 0406 	bic.w	r4, r4, r6
 800afb6:	e7e7      	b.n	800af88 <ceilf+0x30>
 800afb8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800afbc:	d302      	bcc.n	800afc4 <ceilf+0x6c>
 800afbe:	f7f5 fd6f 	bl	8000aa0 <__addsf3>
 800afc2:	4601      	mov	r1, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800afcc:	e7dc      	b.n	800af88 <ceilf+0x30>
 800afce:	bf00      	nop
 800afd0:	7149f2ca 	.word	0x7149f2ca
 800afd4:	007fffff 	.word	0x007fffff

0800afd8 <cosf>:
 800afd8:	b507      	push	{r0, r1, r2, lr}
 800afda:	4a18      	ldr	r2, [pc, #96]	; (800b03c <cosf+0x64>)
 800afdc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800afe0:	4293      	cmp	r3, r2
 800afe2:	4601      	mov	r1, r0
 800afe4:	dc03      	bgt.n	800afee <cosf+0x16>
 800afe6:	2100      	movs	r1, #0
 800afe8:	f000 fb52 	bl	800b690 <__kernel_cosf>
 800afec:	e004      	b.n	800aff8 <cosf+0x20>
 800afee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aff2:	db04      	blt.n	800affe <cosf+0x26>
 800aff4:	f7f5 fd52 	bl	8000a9c <__aeabi_fsub>
 800aff8:	b003      	add	sp, #12
 800affa:	f85d fb04 	ldr.w	pc, [sp], #4
 800affe:	4669      	mov	r1, sp
 800b000:	f000 f99c 	bl	800b33c <__ieee754_rem_pio2f>
 800b004:	f000 0203 	and.w	r2, r0, #3
 800b008:	2a01      	cmp	r2, #1
 800b00a:	d005      	beq.n	800b018 <cosf+0x40>
 800b00c:	2a02      	cmp	r2, #2
 800b00e:	d00a      	beq.n	800b026 <cosf+0x4e>
 800b010:	b972      	cbnz	r2, 800b030 <cosf+0x58>
 800b012:	9901      	ldr	r1, [sp, #4]
 800b014:	9800      	ldr	r0, [sp, #0]
 800b016:	e7e7      	b.n	800afe8 <cosf+0x10>
 800b018:	9901      	ldr	r1, [sp, #4]
 800b01a:	9800      	ldr	r0, [sp, #0]
 800b01c:	f000 fe5a 	bl	800bcd4 <__kernel_sinf>
 800b020:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b024:	e7e8      	b.n	800aff8 <cosf+0x20>
 800b026:	9901      	ldr	r1, [sp, #4]
 800b028:	9800      	ldr	r0, [sp, #0]
 800b02a:	f000 fb31 	bl	800b690 <__kernel_cosf>
 800b02e:	e7f7      	b.n	800b020 <cosf+0x48>
 800b030:	2201      	movs	r2, #1
 800b032:	9901      	ldr	r1, [sp, #4]
 800b034:	9800      	ldr	r0, [sp, #0]
 800b036:	f000 fe4d 	bl	800bcd4 <__kernel_sinf>
 800b03a:	e7dd      	b.n	800aff8 <cosf+0x20>
 800b03c:	3f490fd8 	.word	0x3f490fd8

0800b040 <floorf>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b046:	0df5      	lsrs	r5, r6, #23
 800b048:	3d7f      	subs	r5, #127	; 0x7f
 800b04a:	2d16      	cmp	r5, #22
 800b04c:	4601      	mov	r1, r0
 800b04e:	4604      	mov	r4, r0
 800b050:	dc26      	bgt.n	800b0a0 <floorf+0x60>
 800b052:	2d00      	cmp	r5, #0
 800b054:	da0e      	bge.n	800b074 <floorf+0x34>
 800b056:	4917      	ldr	r1, [pc, #92]	; (800b0b4 <floorf+0x74>)
 800b058:	f7f5 fd22 	bl	8000aa0 <__addsf3>
 800b05c:	2100      	movs	r1, #0
 800b05e:	f7f5 ffe3 	bl	8001028 <__aeabi_fcmpgt>
 800b062:	b128      	cbz	r0, 800b070 <floorf+0x30>
 800b064:	2c00      	cmp	r4, #0
 800b066:	da23      	bge.n	800b0b0 <floorf+0x70>
 800b068:	4b13      	ldr	r3, [pc, #76]	; (800b0b8 <floorf+0x78>)
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	bf18      	it	ne
 800b06e:	461c      	movne	r4, r3
 800b070:	4621      	mov	r1, r4
 800b072:	e01b      	b.n	800b0ac <floorf+0x6c>
 800b074:	4e11      	ldr	r6, [pc, #68]	; (800b0bc <floorf+0x7c>)
 800b076:	412e      	asrs	r6, r5
 800b078:	4230      	tst	r0, r6
 800b07a:	d017      	beq.n	800b0ac <floorf+0x6c>
 800b07c:	490d      	ldr	r1, [pc, #52]	; (800b0b4 <floorf+0x74>)
 800b07e:	f7f5 fd0f 	bl	8000aa0 <__addsf3>
 800b082:	2100      	movs	r1, #0
 800b084:	f7f5 ffd0 	bl	8001028 <__aeabi_fcmpgt>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0f1      	beq.n	800b070 <floorf+0x30>
 800b08c:	2c00      	cmp	r4, #0
 800b08e:	bfbe      	ittt	lt
 800b090:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800b094:	fa43 f505 	asrlt.w	r5, r3, r5
 800b098:	1964      	addlt	r4, r4, r5
 800b09a:	ea24 0406 	bic.w	r4, r4, r6
 800b09e:	e7e7      	b.n	800b070 <floorf+0x30>
 800b0a0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b0a4:	d302      	bcc.n	800b0ac <floorf+0x6c>
 800b0a6:	f7f5 fcfb 	bl	8000aa0 <__addsf3>
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	4608      	mov	r0, r1
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	2400      	movs	r4, #0
 800b0b2:	e7dd      	b.n	800b070 <floorf+0x30>
 800b0b4:	7149f2ca 	.word	0x7149f2ca
 800b0b8:	bf800000 	.word	0xbf800000
 800b0bc:	007fffff 	.word	0x007fffff

0800b0c0 <lroundf>:
 800b0c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	bfb4      	ite	lt
 800b0ce:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 800b0d2:	2401      	movge	r4, #1
 800b0d4:	2a1e      	cmp	r2, #30
 800b0d6:	dc1b      	bgt.n	800b110 <lroundf+0x50>
 800b0d8:	2a00      	cmp	r2, #0
 800b0da:	da04      	bge.n	800b0e6 <lroundf+0x26>
 800b0dc:	3201      	adds	r2, #1
 800b0de:	bf18      	it	ne
 800b0e0:	2400      	movne	r4, #0
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	2a16      	cmp	r2, #22
 800b0e8:	bfd8      	it	le
 800b0ea:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800b0ee:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800b0f2:	bfd8      	it	le
 800b0f4:	4113      	asrle	r3, r2
 800b0f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b0fa:	bfcd      	iteet	gt
 800b0fc:	3b96      	subgt	r3, #150	; 0x96
 800b0fe:	185b      	addle	r3, r3, r1
 800b100:	f1c2 0217 	rsble	r2, r2, #23
 800b104:	fa01 f303 	lslgt.w	r3, r1, r3
 800b108:	bfd8      	it	le
 800b10a:	40d3      	lsrle	r3, r2
 800b10c:	435c      	muls	r4, r3
 800b10e:	e7e8      	b.n	800b0e2 <lroundf+0x22>
 800b110:	f7f5 ffaa 	bl	8001068 <__aeabi_f2iz>
 800b114:	4604      	mov	r4, r0
 800b116:	e7e4      	b.n	800b0e2 <lroundf+0x22>

0800b118 <sinf>:
 800b118:	b507      	push	{r0, r1, r2, lr}
 800b11a:	4a19      	ldr	r2, [pc, #100]	; (800b180 <sinf+0x68>)
 800b11c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b120:	4293      	cmp	r3, r2
 800b122:	4601      	mov	r1, r0
 800b124:	dc04      	bgt.n	800b130 <sinf+0x18>
 800b126:	2200      	movs	r2, #0
 800b128:	2100      	movs	r1, #0
 800b12a:	f000 fdd3 	bl	800bcd4 <__kernel_sinf>
 800b12e:	e004      	b.n	800b13a <sinf+0x22>
 800b130:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b134:	db04      	blt.n	800b140 <sinf+0x28>
 800b136:	f7f5 fcb1 	bl	8000a9c <__aeabi_fsub>
 800b13a:	b003      	add	sp, #12
 800b13c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b140:	4669      	mov	r1, sp
 800b142:	f000 f8fb 	bl	800b33c <__ieee754_rem_pio2f>
 800b146:	f000 0003 	and.w	r0, r0, #3
 800b14a:	2801      	cmp	r0, #1
 800b14c:	d006      	beq.n	800b15c <sinf+0x44>
 800b14e:	2802      	cmp	r0, #2
 800b150:	d009      	beq.n	800b166 <sinf+0x4e>
 800b152:	b980      	cbnz	r0, 800b176 <sinf+0x5e>
 800b154:	2201      	movs	r2, #1
 800b156:	9901      	ldr	r1, [sp, #4]
 800b158:	9800      	ldr	r0, [sp, #0]
 800b15a:	e7e6      	b.n	800b12a <sinf+0x12>
 800b15c:	9901      	ldr	r1, [sp, #4]
 800b15e:	9800      	ldr	r0, [sp, #0]
 800b160:	f000 fa96 	bl	800b690 <__kernel_cosf>
 800b164:	e7e9      	b.n	800b13a <sinf+0x22>
 800b166:	2201      	movs	r2, #1
 800b168:	9901      	ldr	r1, [sp, #4]
 800b16a:	9800      	ldr	r0, [sp, #0]
 800b16c:	f000 fdb2 	bl	800bcd4 <__kernel_sinf>
 800b170:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b174:	e7e1      	b.n	800b13a <sinf+0x22>
 800b176:	9901      	ldr	r1, [sp, #4]
 800b178:	9800      	ldr	r0, [sp, #0]
 800b17a:	f000 fa89 	bl	800b690 <__kernel_cosf>
 800b17e:	e7f7      	b.n	800b170 <sinf+0x58>
 800b180:	3f490fd8 	.word	0x3f490fd8

0800b184 <atan2f>:
 800b184:	f000 b84a 	b.w	800b21c <__ieee754_atan2f>

0800b188 <sqrtf>:
 800b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18a:	b08b      	sub	sp, #44	; 0x2c
 800b18c:	4604      	mov	r4, r0
 800b18e:	f000 fa2d 	bl	800b5ec <__ieee754_sqrtf>
 800b192:	4b20      	ldr	r3, [pc, #128]	; (800b214 <sqrtf+0x8c>)
 800b194:	4606      	mov	r6, r0
 800b196:	f993 5000 	ldrsb.w	r5, [r3]
 800b19a:	1c6b      	adds	r3, r5, #1
 800b19c:	d02a      	beq.n	800b1f4 <sqrtf+0x6c>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f7f5 ff4b 	bl	800103c <__aeabi_fcmpun>
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	bb20      	cbnz	r0, 800b1f4 <sqrtf+0x6c>
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7f5 ff1d 	bl	8000fec <__aeabi_fcmplt>
 800b1b2:	b1f8      	cbz	r0, 800b1f4 <sqrtf+0x6c>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	4b17      	ldr	r3, [pc, #92]	; (800b218 <sqrtf+0x90>)
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	9708      	str	r7, [sp, #32]
 800b1c0:	f7f5 f92a 	bl	8000418 <__aeabi_f2d>
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	b99d      	cbnz	r5, 800b1fa <sqrtf+0x72>
 800b1d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1d6:	4668      	mov	r0, sp
 800b1d8:	f000 fdf2 	bl	800bdc0 <matherr>
 800b1dc:	b1a8      	cbz	r0, 800b20a <sqrtf+0x82>
 800b1de:	9b08      	ldr	r3, [sp, #32]
 800b1e0:	b11b      	cbz	r3, 800b1ea <sqrtf+0x62>
 800b1e2:	f000 ff55 	bl	800c090 <__errno>
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ee:	f7f5 fc01 	bl	80009f4 <__aeabi_d2f>
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	b00b      	add	sp, #44	; 0x2c
 800b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f7f5 fa89 	bl	8000714 <__aeabi_ddiv>
 800b202:	2d02      	cmp	r5, #2
 800b204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b208:	d1e5      	bne.n	800b1d6 <sqrtf+0x4e>
 800b20a:	f000 ff41 	bl	800c090 <__errno>
 800b20e:	2321      	movs	r3, #33	; 0x21
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	e7e4      	b.n	800b1de <sqrtf+0x56>
 800b214:	200000dc 	.word	0x200000dc
 800b218:	0800c37e 	.word	0x0800c37e

0800b21c <__ieee754_atan2f>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b222:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b226:	4603      	mov	r3, r0
 800b228:	dc05      	bgt.n	800b236 <__ieee754_atan2f+0x1a>
 800b22a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b22e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b232:	4607      	mov	r7, r0
 800b234:	dd04      	ble.n	800b240 <__ieee754_atan2f+0x24>
 800b236:	4618      	mov	r0, r3
 800b238:	f7f5 fc32 	bl	8000aa0 <__addsf3>
 800b23c:	4603      	mov	r3, r0
 800b23e:	e010      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b240:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b244:	d103      	bne.n	800b24e <__ieee754_atan2f+0x32>
 800b246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b24a:	f000 bdbb 	b.w	800bdc4 <atanf>
 800b24e:	178c      	asrs	r4, r1, #30
 800b250:	f004 0402 	and.w	r4, r4, #2
 800b254:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b258:	b92a      	cbnz	r2, 800b266 <__ieee754_atan2f+0x4a>
 800b25a:	2c02      	cmp	r4, #2
 800b25c:	d023      	beq.n	800b2a6 <__ieee754_atan2f+0x8a>
 800b25e:	2c03      	cmp	r4, #3
 800b260:	d023      	beq.n	800b2aa <__ieee754_atan2f+0x8e>
 800b262:	4618      	mov	r0, r3
 800b264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b266:	b91e      	cbnz	r6, 800b270 <__ieee754_atan2f+0x54>
 800b268:	2f00      	cmp	r7, #0
 800b26a:	da53      	bge.n	800b314 <__ieee754_atan2f+0xf8>
 800b26c:	4b2a      	ldr	r3, [pc, #168]	; (800b318 <__ieee754_atan2f+0xfc>)
 800b26e:	e7f8      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b270:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b274:	d11b      	bne.n	800b2ae <__ieee754_atan2f+0x92>
 800b276:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b27a:	d10b      	bne.n	800b294 <__ieee754_atan2f+0x78>
 800b27c:	2c02      	cmp	r4, #2
 800b27e:	d005      	beq.n	800b28c <__ieee754_atan2f+0x70>
 800b280:	2c03      	cmp	r4, #3
 800b282:	d005      	beq.n	800b290 <__ieee754_atan2f+0x74>
 800b284:	2c01      	cmp	r4, #1
 800b286:	d141      	bne.n	800b30c <__ieee754_atan2f+0xf0>
 800b288:	4b24      	ldr	r3, [pc, #144]	; (800b31c <__ieee754_atan2f+0x100>)
 800b28a:	e7ea      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b28c:	4b24      	ldr	r3, [pc, #144]	; (800b320 <__ieee754_atan2f+0x104>)
 800b28e:	e7e8      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b290:	4b24      	ldr	r3, [pc, #144]	; (800b324 <__ieee754_atan2f+0x108>)
 800b292:	e7e6      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b294:	2c02      	cmp	r4, #2
 800b296:	d006      	beq.n	800b2a6 <__ieee754_atan2f+0x8a>
 800b298:	2c03      	cmp	r4, #3
 800b29a:	d006      	beq.n	800b2aa <__ieee754_atan2f+0x8e>
 800b29c:	2c01      	cmp	r4, #1
 800b29e:	d137      	bne.n	800b310 <__ieee754_atan2f+0xf4>
 800b2a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2a4:	e7dd      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b2a6:	4b20      	ldr	r3, [pc, #128]	; (800b328 <__ieee754_atan2f+0x10c>)
 800b2a8:	e7db      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b2aa:	4b20      	ldr	r3, [pc, #128]	; (800b32c <__ieee754_atan2f+0x110>)
 800b2ac:	e7d9      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b2ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2b2:	d0d9      	beq.n	800b268 <__ieee754_atan2f+0x4c>
 800b2b4:	1b92      	subs	r2, r2, r6
 800b2b6:	15d2      	asrs	r2, r2, #23
 800b2b8:	2a3c      	cmp	r2, #60	; 0x3c
 800b2ba:	dc17      	bgt.n	800b2ec <__ieee754_atan2f+0xd0>
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	da01      	bge.n	800b2c4 <__ieee754_atan2f+0xa8>
 800b2c0:	323c      	adds	r2, #60	; 0x3c
 800b2c2:	db15      	blt.n	800b2f0 <__ieee754_atan2f+0xd4>
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7f5 fda7 	bl	8000e18 <__aeabi_fdiv>
 800b2ca:	f000 fe8b 	bl	800bfe4 <fabsf>
 800b2ce:	f000 fd79 	bl	800bdc4 <atanf>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2c01      	cmp	r4, #1
 800b2d6:	d00d      	beq.n	800b2f4 <__ieee754_atan2f+0xd8>
 800b2d8:	2c02      	cmp	r4, #2
 800b2da:	d00e      	beq.n	800b2fa <__ieee754_atan2f+0xde>
 800b2dc:	2c00      	cmp	r4, #0
 800b2de:	d0c0      	beq.n	800b262 <__ieee754_atan2f+0x46>
 800b2e0:	4913      	ldr	r1, [pc, #76]	; (800b330 <__ieee754_atan2f+0x114>)
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f5 fbdc 	bl	8000aa0 <__addsf3>
 800b2e8:	490f      	ldr	r1, [pc, #60]	; (800b328 <__ieee754_atan2f+0x10c>)
 800b2ea:	e00c      	b.n	800b306 <__ieee754_atan2f+0xea>
 800b2ec:	4b11      	ldr	r3, [pc, #68]	; (800b334 <__ieee754_atan2f+0x118>)
 800b2ee:	e7f1      	b.n	800b2d4 <__ieee754_atan2f+0xb8>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e7ef      	b.n	800b2d4 <__ieee754_atan2f+0xb8>
 800b2f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2f8:	e7b3      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b2fa:	490d      	ldr	r1, [pc, #52]	; (800b330 <__ieee754_atan2f+0x114>)
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f5 fbcf 	bl	8000aa0 <__addsf3>
 800b302:	4601      	mov	r1, r0
 800b304:	4808      	ldr	r0, [pc, #32]	; (800b328 <__ieee754_atan2f+0x10c>)
 800b306:	f7f5 fbc9 	bl	8000a9c <__aeabi_fsub>
 800b30a:	e797      	b.n	800b23c <__ieee754_atan2f+0x20>
 800b30c:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <__ieee754_atan2f+0x11c>)
 800b30e:	e7a8      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b310:	2300      	movs	r3, #0
 800b312:	e7a6      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b314:	4b07      	ldr	r3, [pc, #28]	; (800b334 <__ieee754_atan2f+0x118>)
 800b316:	e7a4      	b.n	800b262 <__ieee754_atan2f+0x46>
 800b318:	bfc90fdb 	.word	0xbfc90fdb
 800b31c:	bf490fdb 	.word	0xbf490fdb
 800b320:	4016cbe4 	.word	0x4016cbe4
 800b324:	c016cbe4 	.word	0xc016cbe4
 800b328:	40490fdb 	.word	0x40490fdb
 800b32c:	c0490fdb 	.word	0xc0490fdb
 800b330:	33bbbd2e 	.word	0x33bbbd2e
 800b334:	3fc90fdb 	.word	0x3fc90fdb
 800b338:	3f490fdb 	.word	0x3f490fdb

0800b33c <__ieee754_rem_pio2f>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	4a9d      	ldr	r2, [pc, #628]	; (800b5b8 <__ieee754_rem_pio2f+0x27c>)
 800b342:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b346:	4295      	cmp	r5, r2
 800b348:	b087      	sub	sp, #28
 800b34a:	460c      	mov	r4, r1
 800b34c:	4607      	mov	r7, r0
 800b34e:	dc04      	bgt.n	800b35a <__ieee754_rem_pio2f+0x1e>
 800b350:	2300      	movs	r3, #0
 800b352:	6020      	str	r0, [r4, #0]
 800b354:	604b      	str	r3, [r1, #4]
 800b356:	2600      	movs	r6, #0
 800b358:	e01a      	b.n	800b390 <__ieee754_rem_pio2f+0x54>
 800b35a:	4a98      	ldr	r2, [pc, #608]	; (800b5bc <__ieee754_rem_pio2f+0x280>)
 800b35c:	4295      	cmp	r5, r2
 800b35e:	dc4b      	bgt.n	800b3f8 <__ieee754_rem_pio2f+0xbc>
 800b360:	2800      	cmp	r0, #0
 800b362:	4997      	ldr	r1, [pc, #604]	; (800b5c0 <__ieee754_rem_pio2f+0x284>)
 800b364:	f025 050f 	bic.w	r5, r5, #15
 800b368:	4e96      	ldr	r6, [pc, #600]	; (800b5c4 <__ieee754_rem_pio2f+0x288>)
 800b36a:	dd23      	ble.n	800b3b4 <__ieee754_rem_pio2f+0x78>
 800b36c:	f7f5 fb96 	bl	8000a9c <__aeabi_fsub>
 800b370:	42b5      	cmp	r5, r6
 800b372:	4607      	mov	r7, r0
 800b374:	d010      	beq.n	800b398 <__ieee754_rem_pio2f+0x5c>
 800b376:	4994      	ldr	r1, [pc, #592]	; (800b5c8 <__ieee754_rem_pio2f+0x28c>)
 800b378:	f7f5 fb90 	bl	8000a9c <__aeabi_fsub>
 800b37c:	4601      	mov	r1, r0
 800b37e:	6020      	str	r0, [r4, #0]
 800b380:	4638      	mov	r0, r7
 800b382:	f7f5 fb8b 	bl	8000a9c <__aeabi_fsub>
 800b386:	4990      	ldr	r1, [pc, #576]	; (800b5c8 <__ieee754_rem_pio2f+0x28c>)
 800b388:	f7f5 fb88 	bl	8000a9c <__aeabi_fsub>
 800b38c:	2601      	movs	r6, #1
 800b38e:	6060      	str	r0, [r4, #4]
 800b390:	4630      	mov	r0, r6
 800b392:	b007      	add	sp, #28
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b398:	498c      	ldr	r1, [pc, #560]	; (800b5cc <__ieee754_rem_pio2f+0x290>)
 800b39a:	f7f5 fb7f 	bl	8000a9c <__aeabi_fsub>
 800b39e:	498c      	ldr	r1, [pc, #560]	; (800b5d0 <__ieee754_rem_pio2f+0x294>)
 800b3a0:	4605      	mov	r5, r0
 800b3a2:	f7f5 fb7b 	bl	8000a9c <__aeabi_fsub>
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	6020      	str	r0, [r4, #0]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f7f5 fb76 	bl	8000a9c <__aeabi_fsub>
 800b3b0:	4987      	ldr	r1, [pc, #540]	; (800b5d0 <__ieee754_rem_pio2f+0x294>)
 800b3b2:	e7e9      	b.n	800b388 <__ieee754_rem_pio2f+0x4c>
 800b3b4:	f7f5 fb74 	bl	8000aa0 <__addsf3>
 800b3b8:	42b5      	cmp	r5, r6
 800b3ba:	4607      	mov	r7, r0
 800b3bc:	d00e      	beq.n	800b3dc <__ieee754_rem_pio2f+0xa0>
 800b3be:	4982      	ldr	r1, [pc, #520]	; (800b5c8 <__ieee754_rem_pio2f+0x28c>)
 800b3c0:	f7f5 fb6e 	bl	8000aa0 <__addsf3>
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	6020      	str	r0, [r4, #0]
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7f5 fb67 	bl	8000a9c <__aeabi_fsub>
 800b3ce:	497e      	ldr	r1, [pc, #504]	; (800b5c8 <__ieee754_rem_pio2f+0x28c>)
 800b3d0:	f7f5 fb66 	bl	8000aa0 <__addsf3>
 800b3d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b3d8:	6060      	str	r0, [r4, #4]
 800b3da:	e7d9      	b.n	800b390 <__ieee754_rem_pio2f+0x54>
 800b3dc:	497b      	ldr	r1, [pc, #492]	; (800b5cc <__ieee754_rem_pio2f+0x290>)
 800b3de:	f7f5 fb5f 	bl	8000aa0 <__addsf3>
 800b3e2:	497b      	ldr	r1, [pc, #492]	; (800b5d0 <__ieee754_rem_pio2f+0x294>)
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	f7f5 fb5b 	bl	8000aa0 <__addsf3>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	6020      	str	r0, [r4, #0]
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	f7f5 fb54 	bl	8000a9c <__aeabi_fsub>
 800b3f4:	4976      	ldr	r1, [pc, #472]	; (800b5d0 <__ieee754_rem_pio2f+0x294>)
 800b3f6:	e7eb      	b.n	800b3d0 <__ieee754_rem_pio2f+0x94>
 800b3f8:	4a76      	ldr	r2, [pc, #472]	; (800b5d4 <__ieee754_rem_pio2f+0x298>)
 800b3fa:	4295      	cmp	r5, r2
 800b3fc:	f300 808c 	bgt.w	800b518 <__ieee754_rem_pio2f+0x1dc>
 800b400:	f000 fdf0 	bl	800bfe4 <fabsf>
 800b404:	4974      	ldr	r1, [pc, #464]	; (800b5d8 <__ieee754_rem_pio2f+0x29c>)
 800b406:	4680      	mov	r8, r0
 800b408:	f7f5 fc52 	bl	8000cb0 <__aeabi_fmul>
 800b40c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b410:	f7f5 fb46 	bl	8000aa0 <__addsf3>
 800b414:	f7f5 fe28 	bl	8001068 <__aeabi_f2iz>
 800b418:	4606      	mov	r6, r0
 800b41a:	f7f5 fbf5 	bl	8000c08 <__aeabi_i2f>
 800b41e:	4968      	ldr	r1, [pc, #416]	; (800b5c0 <__ieee754_rem_pio2f+0x284>)
 800b420:	4682      	mov	sl, r0
 800b422:	f7f5 fc45 	bl	8000cb0 <__aeabi_fmul>
 800b426:	4601      	mov	r1, r0
 800b428:	4640      	mov	r0, r8
 800b42a:	f7f5 fb37 	bl	8000a9c <__aeabi_fsub>
 800b42e:	4966      	ldr	r1, [pc, #408]	; (800b5c8 <__ieee754_rem_pio2f+0x28c>)
 800b430:	4680      	mov	r8, r0
 800b432:	4650      	mov	r0, sl
 800b434:	f7f5 fc3c 	bl	8000cb0 <__aeabi_fmul>
 800b438:	2e1f      	cmp	r6, #31
 800b43a:	4681      	mov	r9, r0
 800b43c:	dc0c      	bgt.n	800b458 <__ieee754_rem_pio2f+0x11c>
 800b43e:	4a67      	ldr	r2, [pc, #412]	; (800b5dc <__ieee754_rem_pio2f+0x2a0>)
 800b440:	1e71      	subs	r1, r6, #1
 800b442:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b446:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d004      	beq.n	800b458 <__ieee754_rem_pio2f+0x11c>
 800b44e:	4649      	mov	r1, r9
 800b450:	4640      	mov	r0, r8
 800b452:	f7f5 fb23 	bl	8000a9c <__aeabi_fsub>
 800b456:	e009      	b.n	800b46c <__ieee754_rem_pio2f+0x130>
 800b458:	4649      	mov	r1, r9
 800b45a:	4640      	mov	r0, r8
 800b45c:	f7f5 fb1e 	bl	8000a9c <__aeabi_fsub>
 800b460:	15ed      	asrs	r5, r5, #23
 800b462:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b466:	1aeb      	subs	r3, r5, r3
 800b468:	2b08      	cmp	r3, #8
 800b46a:	dc01      	bgt.n	800b470 <__ieee754_rem_pio2f+0x134>
 800b46c:	6020      	str	r0, [r4, #0]
 800b46e:	e024      	b.n	800b4ba <__ieee754_rem_pio2f+0x17e>
 800b470:	4956      	ldr	r1, [pc, #344]	; (800b5cc <__ieee754_rem_pio2f+0x290>)
 800b472:	4650      	mov	r0, sl
 800b474:	f7f5 fc1c 	bl	8000cb0 <__aeabi_fmul>
 800b478:	4681      	mov	r9, r0
 800b47a:	4601      	mov	r1, r0
 800b47c:	4640      	mov	r0, r8
 800b47e:	f7f5 fb0d 	bl	8000a9c <__aeabi_fsub>
 800b482:	4601      	mov	r1, r0
 800b484:	4683      	mov	fp, r0
 800b486:	4640      	mov	r0, r8
 800b488:	f7f5 fb08 	bl	8000a9c <__aeabi_fsub>
 800b48c:	4649      	mov	r1, r9
 800b48e:	f7f5 fb05 	bl	8000a9c <__aeabi_fsub>
 800b492:	4680      	mov	r8, r0
 800b494:	494e      	ldr	r1, [pc, #312]	; (800b5d0 <__ieee754_rem_pio2f+0x294>)
 800b496:	4650      	mov	r0, sl
 800b498:	f7f5 fc0a 	bl	8000cb0 <__aeabi_fmul>
 800b49c:	4641      	mov	r1, r8
 800b49e:	f7f5 fafd 	bl	8000a9c <__aeabi_fsub>
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4681      	mov	r9, r0
 800b4a6:	4658      	mov	r0, fp
 800b4a8:	f7f5 faf8 	bl	8000a9c <__aeabi_fsub>
 800b4ac:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b4b0:	1aed      	subs	r5, r5, r3
 800b4b2:	2d19      	cmp	r5, #25
 800b4b4:	dc15      	bgt.n	800b4e2 <__ieee754_rem_pio2f+0x1a6>
 800b4b6:	46d8      	mov	r8, fp
 800b4b8:	6020      	str	r0, [r4, #0]
 800b4ba:	6825      	ldr	r5, [r4, #0]
 800b4bc:	4640      	mov	r0, r8
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 faec 	bl	8000a9c <__aeabi_fsub>
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f5 fae9 	bl	8000a9c <__aeabi_fsub>
 800b4ca:	2f00      	cmp	r7, #0
 800b4cc:	6060      	str	r0, [r4, #4]
 800b4ce:	f6bf af5f 	bge.w	800b390 <__ieee754_rem_pio2f+0x54>
 800b4d2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b4d6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b4da:	6025      	str	r5, [r4, #0]
 800b4dc:	6060      	str	r0, [r4, #4]
 800b4de:	4276      	negs	r6, r6
 800b4e0:	e756      	b.n	800b390 <__ieee754_rem_pio2f+0x54>
 800b4e2:	493f      	ldr	r1, [pc, #252]	; (800b5e0 <__ieee754_rem_pio2f+0x2a4>)
 800b4e4:	4650      	mov	r0, sl
 800b4e6:	f7f5 fbe3 	bl	8000cb0 <__aeabi_fmul>
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	4658      	mov	r0, fp
 800b4f0:	f7f5 fad4 	bl	8000a9c <__aeabi_fsub>
 800b4f4:	4601      	mov	r1, r0
 800b4f6:	4680      	mov	r8, r0
 800b4f8:	4658      	mov	r0, fp
 800b4fa:	f7f5 facf 	bl	8000a9c <__aeabi_fsub>
 800b4fe:	4629      	mov	r1, r5
 800b500:	f7f5 facc 	bl	8000a9c <__aeabi_fsub>
 800b504:	4605      	mov	r5, r0
 800b506:	4937      	ldr	r1, [pc, #220]	; (800b5e4 <__ieee754_rem_pio2f+0x2a8>)
 800b508:	4650      	mov	r0, sl
 800b50a:	f7f5 fbd1 	bl	8000cb0 <__aeabi_fmul>
 800b50e:	4629      	mov	r1, r5
 800b510:	f7f5 fac4 	bl	8000a9c <__aeabi_fsub>
 800b514:	4681      	mov	r9, r0
 800b516:	e79a      	b.n	800b44e <__ieee754_rem_pio2f+0x112>
 800b518:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b51c:	db05      	blt.n	800b52a <__ieee754_rem_pio2f+0x1ee>
 800b51e:	4601      	mov	r1, r0
 800b520:	f7f5 fabc 	bl	8000a9c <__aeabi_fsub>
 800b524:	6060      	str	r0, [r4, #4]
 800b526:	6020      	str	r0, [r4, #0]
 800b528:	e715      	b.n	800b356 <__ieee754_rem_pio2f+0x1a>
 800b52a:	15ee      	asrs	r6, r5, #23
 800b52c:	3e86      	subs	r6, #134	; 0x86
 800b52e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800b532:	4628      	mov	r0, r5
 800b534:	f7f5 fd98 	bl	8001068 <__aeabi_f2iz>
 800b538:	f7f5 fb66 	bl	8000c08 <__aeabi_i2f>
 800b53c:	4601      	mov	r1, r0
 800b53e:	9003      	str	r0, [sp, #12]
 800b540:	4628      	mov	r0, r5
 800b542:	f7f5 faab 	bl	8000a9c <__aeabi_fsub>
 800b546:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b54a:	f7f5 fbb1 	bl	8000cb0 <__aeabi_fmul>
 800b54e:	4680      	mov	r8, r0
 800b550:	f7f5 fd8a 	bl	8001068 <__aeabi_f2iz>
 800b554:	f7f5 fb58 	bl	8000c08 <__aeabi_i2f>
 800b558:	4601      	mov	r1, r0
 800b55a:	9004      	str	r0, [sp, #16]
 800b55c:	4605      	mov	r5, r0
 800b55e:	4640      	mov	r0, r8
 800b560:	f7f5 fa9c 	bl	8000a9c <__aeabi_fsub>
 800b564:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b568:	f7f5 fba2 	bl	8000cb0 <__aeabi_fmul>
 800b56c:	2100      	movs	r1, #0
 800b56e:	9005      	str	r0, [sp, #20]
 800b570:	f7f5 fd32 	bl	8000fd8 <__aeabi_fcmpeq>
 800b574:	b1e8      	cbz	r0, 800b5b2 <__ieee754_rem_pio2f+0x276>
 800b576:	2100      	movs	r1, #0
 800b578:	4628      	mov	r0, r5
 800b57a:	f7f5 fd2d 	bl	8000fd8 <__aeabi_fcmpeq>
 800b57e:	2800      	cmp	r0, #0
 800b580:	bf14      	ite	ne
 800b582:	2301      	movne	r3, #1
 800b584:	2302      	moveq	r3, #2
 800b586:	4a18      	ldr	r2, [pc, #96]	; (800b5e8 <__ieee754_rem_pio2f+0x2ac>)
 800b588:	4621      	mov	r1, r4
 800b58a:	9201      	str	r2, [sp, #4]
 800b58c:	2202      	movs	r2, #2
 800b58e:	a803      	add	r0, sp, #12
 800b590:	9200      	str	r2, [sp, #0]
 800b592:	4632      	mov	r2, r6
 800b594:	f000 f910 	bl	800b7b8 <__kernel_rem_pio2f>
 800b598:	2f00      	cmp	r7, #0
 800b59a:	4606      	mov	r6, r0
 800b59c:	f6bf aef8 	bge.w	800b390 <__ieee754_rem_pio2f+0x54>
 800b5a0:	6823      	ldr	r3, [r4, #0]
 800b5a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	6863      	ldr	r3, [r4, #4]
 800b5aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	e795      	b.n	800b4de <__ieee754_rem_pio2f+0x1a2>
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	e7e7      	b.n	800b586 <__ieee754_rem_pio2f+0x24a>
 800b5b6:	bf00      	nop
 800b5b8:	3f490fd8 	.word	0x3f490fd8
 800b5bc:	4016cbe3 	.word	0x4016cbe3
 800b5c0:	3fc90f80 	.word	0x3fc90f80
 800b5c4:	3fc90fd0 	.word	0x3fc90fd0
 800b5c8:	37354443 	.word	0x37354443
 800b5cc:	37354400 	.word	0x37354400
 800b5d0:	2e85a308 	.word	0x2e85a308
 800b5d4:	43490f80 	.word	0x43490f80
 800b5d8:	3f22f984 	.word	0x3f22f984
 800b5dc:	0800c384 	.word	0x0800c384
 800b5e0:	2e85a300 	.word	0x2e85a300
 800b5e4:	248d3132 	.word	0x248d3132
 800b5e8:	0800c404 	.word	0x0800c404

0800b5ec <__ieee754_sqrtf>:
 800b5ec:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b5f0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	d309      	bcc.n	800b610 <__ieee754_sqrtf+0x24>
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	f7f5 fb57 	bl	8000cb0 <__aeabi_fmul>
 800b602:	4601      	mov	r1, r0
 800b604:	4620      	mov	r0, r4
 800b606:	f7f5 fa4b 	bl	8000aa0 <__addsf3>
 800b60a:	4604      	mov	r4, r0
 800b60c:	4620      	mov	r0, r4
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	2a00      	cmp	r2, #0
 800b612:	d0fb      	beq.n	800b60c <__ieee754_sqrtf+0x20>
 800b614:	2800      	cmp	r0, #0
 800b616:	da06      	bge.n	800b626 <__ieee754_sqrtf+0x3a>
 800b618:	4601      	mov	r1, r0
 800b61a:	f7f5 fa3f 	bl	8000a9c <__aeabi_fsub>
 800b61e:	4601      	mov	r1, r0
 800b620:	f7f5 fbfa 	bl	8000e18 <__aeabi_fdiv>
 800b624:	e7f1      	b.n	800b60a <__ieee754_sqrtf+0x1e>
 800b626:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b62a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b62e:	d204      	bcs.n	800b63a <__ieee754_sqrtf+0x4e>
 800b630:	2200      	movs	r2, #0
 800b632:	0219      	lsls	r1, r3, #8
 800b634:	d529      	bpl.n	800b68a <__ieee754_sqrtf+0x9e>
 800b636:	3a01      	subs	r2, #1
 800b638:	1aa4      	subs	r4, r4, r2
 800b63a:	3c7f      	subs	r4, #127	; 0x7f
 800b63c:	07e2      	lsls	r2, r4, #31
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b646:	4616      	mov	r6, r2
 800b648:	f04f 0419 	mov.w	r4, #25
 800b64c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b650:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b658:	bf48      	it	mi
 800b65a:	005b      	lslmi	r3, r3, #1
 800b65c:	005b      	lsls	r3, r3, #1
 800b65e:	1835      	adds	r5, r6, r0
 800b660:	429d      	cmp	r5, r3
 800b662:	bfde      	ittt	le
 800b664:	182e      	addle	r6, r5, r0
 800b666:	1b5b      	suble	r3, r3, r5
 800b668:	1812      	addle	r2, r2, r0
 800b66a:	3c01      	subs	r4, #1
 800b66c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b670:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b674:	d1f3      	bne.n	800b65e <__ieee754_sqrtf+0x72>
 800b676:	b113      	cbz	r3, 800b67e <__ieee754_sqrtf+0x92>
 800b678:	3201      	adds	r2, #1
 800b67a:	f022 0201 	bic.w	r2, r2, #1
 800b67e:	1054      	asrs	r4, r2, #1
 800b680:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b684:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b688:	e7c0      	b.n	800b60c <__ieee754_sqrtf+0x20>
 800b68a:	005b      	lsls	r3, r3, #1
 800b68c:	3201      	adds	r2, #1
 800b68e:	e7d0      	b.n	800b632 <__ieee754_sqrtf+0x46>

0800b690 <__kernel_cosf>:
 800b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b694:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b698:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	da03      	bge.n	800b6aa <__kernel_cosf+0x1a>
 800b6a2:	f7f5 fce1 	bl	8001068 <__aeabi_f2iz>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d070      	beq.n	800b78c <__kernel_cosf+0xfc>
 800b6aa:	4631      	mov	r1, r6
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7f5 faff 	bl	8000cb0 <__aeabi_fmul>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	4937      	ldr	r1, [pc, #220]	; (800b794 <__kernel_cosf+0x104>)
 800b6b6:	f7f5 fafb 	bl	8000cb0 <__aeabi_fmul>
 800b6ba:	4937      	ldr	r1, [pc, #220]	; (800b798 <__kernel_cosf+0x108>)
 800b6bc:	f7f5 f9f0 	bl	8000aa0 <__addsf3>
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	f7f5 faf5 	bl	8000cb0 <__aeabi_fmul>
 800b6c6:	4935      	ldr	r1, [pc, #212]	; (800b79c <__kernel_cosf+0x10c>)
 800b6c8:	f7f5 f9e8 	bl	8000a9c <__aeabi_fsub>
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f7f5 faef 	bl	8000cb0 <__aeabi_fmul>
 800b6d2:	4933      	ldr	r1, [pc, #204]	; (800b7a0 <__kernel_cosf+0x110>)
 800b6d4:	f7f5 f9e4 	bl	8000aa0 <__addsf3>
 800b6d8:	4629      	mov	r1, r5
 800b6da:	f7f5 fae9 	bl	8000cb0 <__aeabi_fmul>
 800b6de:	4931      	ldr	r1, [pc, #196]	; (800b7a4 <__kernel_cosf+0x114>)
 800b6e0:	f7f5 f9dc 	bl	8000a9c <__aeabi_fsub>
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f7f5 fae3 	bl	8000cb0 <__aeabi_fmul>
 800b6ea:	492f      	ldr	r1, [pc, #188]	; (800b7a8 <__kernel_cosf+0x118>)
 800b6ec:	f7f5 f9d8 	bl	8000aa0 <__addsf3>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7f5 fadd 	bl	8000cb0 <__aeabi_fmul>
 800b6f6:	4b2d      	ldr	r3, [pc, #180]	; (800b7ac <__kernel_cosf+0x11c>)
 800b6f8:	4680      	mov	r8, r0
 800b6fa:	429c      	cmp	r4, r3
 800b6fc:	dc1d      	bgt.n	800b73a <__kernel_cosf+0xaa>
 800b6fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b702:	4628      	mov	r0, r5
 800b704:	f7f5 fad4 	bl	8000cb0 <__aeabi_fmul>
 800b708:	4641      	mov	r1, r8
 800b70a:	4604      	mov	r4, r0
 800b70c:	4628      	mov	r0, r5
 800b70e:	f7f5 facf 	bl	8000cb0 <__aeabi_fmul>
 800b712:	4639      	mov	r1, r7
 800b714:	4605      	mov	r5, r0
 800b716:	4630      	mov	r0, r6
 800b718:	f7f5 faca 	bl	8000cb0 <__aeabi_fmul>
 800b71c:	4601      	mov	r1, r0
 800b71e:	4628      	mov	r0, r5
 800b720:	f7f5 f9bc 	bl	8000a9c <__aeabi_fsub>
 800b724:	4601      	mov	r1, r0
 800b726:	4620      	mov	r0, r4
 800b728:	f7f5 f9b8 	bl	8000a9c <__aeabi_fsub>
 800b72c:	4601      	mov	r1, r0
 800b72e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b732:	f7f5 f9b3 	bl	8000a9c <__aeabi_fsub>
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	4b1d      	ldr	r3, [pc, #116]	; (800b7b0 <__kernel_cosf+0x120>)
 800b73c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b740:	429c      	cmp	r4, r3
 800b742:	bfcc      	ite	gt
 800b744:	4c1b      	ldrgt	r4, [pc, #108]	; (800b7b4 <__kernel_cosf+0x124>)
 800b746:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800b74a:	4621      	mov	r1, r4
 800b74c:	f7f5 f9a6 	bl	8000a9c <__aeabi_fsub>
 800b750:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b754:	4681      	mov	r9, r0
 800b756:	4628      	mov	r0, r5
 800b758:	f7f5 faaa 	bl	8000cb0 <__aeabi_fmul>
 800b75c:	4621      	mov	r1, r4
 800b75e:	f7f5 f99d 	bl	8000a9c <__aeabi_fsub>
 800b762:	4641      	mov	r1, r8
 800b764:	4604      	mov	r4, r0
 800b766:	4628      	mov	r0, r5
 800b768:	f7f5 faa2 	bl	8000cb0 <__aeabi_fmul>
 800b76c:	4639      	mov	r1, r7
 800b76e:	4605      	mov	r5, r0
 800b770:	4630      	mov	r0, r6
 800b772:	f7f5 fa9d 	bl	8000cb0 <__aeabi_fmul>
 800b776:	4601      	mov	r1, r0
 800b778:	4628      	mov	r0, r5
 800b77a:	f7f5 f98f 	bl	8000a9c <__aeabi_fsub>
 800b77e:	4601      	mov	r1, r0
 800b780:	4620      	mov	r0, r4
 800b782:	f7f5 f98b 	bl	8000a9c <__aeabi_fsub>
 800b786:	4601      	mov	r1, r0
 800b788:	4648      	mov	r0, r9
 800b78a:	e7d2      	b.n	800b732 <__kernel_cosf+0xa2>
 800b78c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b794:	ad47d74e 	.word	0xad47d74e
 800b798:	310f74f6 	.word	0x310f74f6
 800b79c:	3493f27c 	.word	0x3493f27c
 800b7a0:	37d00d01 	.word	0x37d00d01
 800b7a4:	3ab60b61 	.word	0x3ab60b61
 800b7a8:	3d2aaaab 	.word	0x3d2aaaab
 800b7ac:	3e999999 	.word	0x3e999999
 800b7b0:	3f480000 	.word	0x3f480000
 800b7b4:	3e900000 	.word	0x3e900000

0800b7b8 <__kernel_rem_pio2f>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	b0d9      	sub	sp, #356	; 0x164
 800b7be:	9304      	str	r3, [sp, #16]
 800b7c0:	9101      	str	r1, [sp, #4]
 800b7c2:	4bb4      	ldr	r3, [pc, #720]	; (800ba94 <__kernel_rem_pio2f+0x2dc>)
 800b7c4:	9962      	ldr	r1, [sp, #392]	; 0x188
 800b7c6:	1ed4      	subs	r4, r2, #3
 800b7c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7cc:	2500      	movs	r5, #0
 800b7ce:	9302      	str	r3, [sp, #8]
 800b7d0:	9b04      	ldr	r3, [sp, #16]
 800b7d2:	f04f 0b00 	mov.w	fp, #0
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	9303      	str	r3, [sp, #12]
 800b7da:	2308      	movs	r3, #8
 800b7dc:	fb94 f4f3 	sdiv	r4, r4, r3
 800b7e0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b7e4:	1c66      	adds	r6, r4, #1
 800b7e6:	9b02      	ldr	r3, [sp, #8]
 800b7e8:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800b7ec:	9a03      	ldr	r2, [sp, #12]
 800b7ee:	9005      	str	r0, [sp, #20]
 800b7f0:	eb03 0802 	add.w	r8, r3, r2
 800b7f4:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b7f6:	1aa7      	subs	r7, r4, r2
 800b7f8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7fc:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800b800:	4545      	cmp	r5, r8
 800b802:	dd10      	ble.n	800b826 <__kernel_rem_pio2f+0x6e>
 800b804:	2500      	movs	r5, #0
 800b806:	f04f 0b00 	mov.w	fp, #0
 800b80a:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 800b80e:	9b02      	ldr	r3, [sp, #8]
 800b810:	429d      	cmp	r5, r3
 800b812:	dc28      	bgt.n	800b866 <__kernel_rem_pio2f+0xae>
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	46d9      	mov	r9, fp
 800b818:	eb03 0805 	add.w	r8, r3, r5
 800b81c:	ab1c      	add	r3, sp, #112	; 0x70
 800b81e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800b822:	2700      	movs	r7, #0
 800b824:	e018      	b.n	800b858 <__kernel_rem_pio2f+0xa0>
 800b826:	42ef      	cmn	r7, r5
 800b828:	d407      	bmi.n	800b83a <__kernel_rem_pio2f+0x82>
 800b82a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b82e:	f7f5 f9eb 	bl	8000c08 <__aeabi_i2f>
 800b832:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800b836:	3501      	adds	r5, #1
 800b838:	e7e2      	b.n	800b800 <__kernel_rem_pio2f+0x48>
 800b83a:	4658      	mov	r0, fp
 800b83c:	e7f9      	b.n	800b832 <__kernel_rem_pio2f+0x7a>
 800b83e:	9b05      	ldr	r3, [sp, #20]
 800b840:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800b844:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b848:	f7f5 fa32 	bl	8000cb0 <__aeabi_fmul>
 800b84c:	4601      	mov	r1, r0
 800b84e:	4648      	mov	r0, r9
 800b850:	f7f5 f926 	bl	8000aa0 <__addsf3>
 800b854:	4681      	mov	r9, r0
 800b856:	3701      	adds	r7, #1
 800b858:	9b03      	ldr	r3, [sp, #12]
 800b85a:	429f      	cmp	r7, r3
 800b85c:	ddef      	ble.n	800b83e <__kernel_rem_pio2f+0x86>
 800b85e:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 800b862:	3501      	adds	r5, #1
 800b864:	e7d3      	b.n	800b80e <__kernel_rem_pio2f+0x56>
 800b866:	9b02      	ldr	r3, [sp, #8]
 800b868:	aa08      	add	r2, sp, #32
 800b86a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b86e:	9307      	str	r3, [sp, #28]
 800b870:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800b872:	9f02      	ldr	r7, [sp, #8]
 800b874:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b878:	9306      	str	r3, [sp, #24]
 800b87a:	46ba      	mov	sl, r7
 800b87c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800b880:	ab58      	add	r3, sp, #352	; 0x160
 800b882:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b886:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800b88a:	ad07      	add	r5, sp, #28
 800b88c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b890:	f1ba 0f00 	cmp.w	sl, #0
 800b894:	dc57      	bgt.n	800b946 <__kernel_rem_pio2f+0x18e>
 800b896:	4631      	mov	r1, r6
 800b898:	4620      	mov	r0, r4
 800b89a:	f000 fba7 	bl	800bfec <scalbnf>
 800b89e:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	f7f5 fa04 	bl	8000cb0 <__aeabi_fmul>
 800b8a8:	f7ff fbca 	bl	800b040 <floorf>
 800b8ac:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b8b0:	f7f5 f9fe 	bl	8000cb0 <__aeabi_fmul>
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7f5 f8f0 	bl	8000a9c <__aeabi_fsub>
 800b8bc:	4604      	mov	r4, r0
 800b8be:	f7f5 fbd3 	bl	8001068 <__aeabi_f2iz>
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	f7f5 f9a0 	bl	8000c08 <__aeabi_i2f>
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7f5 f8e6 	bl	8000a9c <__aeabi_fsub>
 800b8d0:	2e00      	cmp	r6, #0
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	dd55      	ble.n	800b982 <__kernel_rem_pio2f+0x1ca>
 800b8d6:	1e7b      	subs	r3, r7, #1
 800b8d8:	aa08      	add	r2, sp, #32
 800b8da:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b8de:	f1c6 0208 	rsb	r2, r6, #8
 800b8e2:	fa45 f002 	asr.w	r0, r5, r2
 800b8e6:	4480      	add	r8, r0
 800b8e8:	4090      	lsls	r0, r2
 800b8ea:	1a2d      	subs	r5, r5, r0
 800b8ec:	aa08      	add	r2, sp, #32
 800b8ee:	f1c6 0007 	rsb	r0, r6, #7
 800b8f2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800b8f6:	4105      	asrs	r5, r0
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	dd50      	ble.n	800b99e <__kernel_rem_pio2f+0x1e6>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4691      	mov	r9, r2
 800b900:	f108 0801 	add.w	r8, r8, #1
 800b904:	4297      	cmp	r7, r2
 800b906:	f300 8085 	bgt.w	800ba14 <__kernel_rem_pio2f+0x25c>
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	dd05      	ble.n	800b91a <__kernel_rem_pio2f+0x162>
 800b90e:	2e01      	cmp	r6, #1
 800b910:	f000 8097 	beq.w	800ba42 <__kernel_rem_pio2f+0x28a>
 800b914:	2e02      	cmp	r6, #2
 800b916:	f000 809e 	beq.w	800ba56 <__kernel_rem_pio2f+0x29e>
 800b91a:	2d02      	cmp	r5, #2
 800b91c:	d13f      	bne.n	800b99e <__kernel_rem_pio2f+0x1e6>
 800b91e:	4621      	mov	r1, r4
 800b920:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b924:	f7f5 f8ba 	bl	8000a9c <__aeabi_fsub>
 800b928:	4604      	mov	r4, r0
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	d036      	beq.n	800b99e <__kernel_rem_pio2f+0x1e6>
 800b930:	4631      	mov	r1, r6
 800b932:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b936:	f000 fb59 	bl	800bfec <scalbnf>
 800b93a:	4601      	mov	r1, r0
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7f5 f8ad 	bl	8000a9c <__aeabi_fsub>
 800b942:	4604      	mov	r4, r0
 800b944:	e02b      	b.n	800b99e <__kernel_rem_pio2f+0x1e6>
 800b946:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7f5 f9b0 	bl	8000cb0 <__aeabi_fmul>
 800b950:	f7f5 fb8a 	bl	8001068 <__aeabi_f2iz>
 800b954:	f7f5 f958 	bl	8000c08 <__aeabi_i2f>
 800b958:	4641      	mov	r1, r8
 800b95a:	4683      	mov	fp, r0
 800b95c:	f7f5 f9a8 	bl	8000cb0 <__aeabi_fmul>
 800b960:	4601      	mov	r1, r0
 800b962:	4620      	mov	r0, r4
 800b964:	f7f5 f89a 	bl	8000a9c <__aeabi_fsub>
 800b968:	f7f5 fb7e 	bl	8001068 <__aeabi_f2iz>
 800b96c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b970:	f845 0f04 	str.w	r0, [r5, #4]!
 800b974:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800b978:	4658      	mov	r0, fp
 800b97a:	f7f5 f891 	bl	8000aa0 <__addsf3>
 800b97e:	4604      	mov	r4, r0
 800b980:	e786      	b.n	800b890 <__kernel_rem_pio2f+0xd8>
 800b982:	d105      	bne.n	800b990 <__kernel_rem_pio2f+0x1d8>
 800b984:	1e7b      	subs	r3, r7, #1
 800b986:	aa08      	add	r2, sp, #32
 800b988:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800b98c:	122d      	asrs	r5, r5, #8
 800b98e:	e7b3      	b.n	800b8f8 <__kernel_rem_pio2f+0x140>
 800b990:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b994:	f7f5 fb3e 	bl	8001014 <__aeabi_fcmpge>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d139      	bne.n	800ba10 <__kernel_rem_pio2f+0x258>
 800b99c:	4605      	mov	r5, r0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f7f5 fb19 	bl	8000fd8 <__aeabi_fcmpeq>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f000 8098 	beq.w	800badc <__kernel_rem_pio2f+0x324>
 800b9ac:	1e7c      	subs	r4, r7, #1
 800b9ae:	4623      	mov	r3, r4
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	9902      	ldr	r1, [sp, #8]
 800b9b4:	428b      	cmp	r3, r1
 800b9b6:	da55      	bge.n	800ba64 <__kernel_rem_pio2f+0x2ac>
 800b9b8:	2a00      	cmp	r2, #0
 800b9ba:	d16e      	bne.n	800ba9a <__kernel_rem_pio2f+0x2e2>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f06f 0103 	mvn.w	r1, #3
 800b9c2:	fb01 f203 	mul.w	r2, r1, r3
 800b9c6:	9807      	ldr	r0, [sp, #28]
 800b9c8:	5882      	ldr	r2, [r0, r2]
 800b9ca:	2a00      	cmp	r2, #0
 800b9cc:	d050      	beq.n	800ba70 <__kernel_rem_pio2f+0x2b8>
 800b9ce:	f06f 0803 	mvn.w	r8, #3
 800b9d2:	9a04      	ldr	r2, [sp, #16]
 800b9d4:	1c7d      	adds	r5, r7, #1
 800b9d6:	19d4      	adds	r4, r2, r7
 800b9d8:	aa58      	add	r2, sp, #352	; 0x160
 800b9da:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800b9de:	3cf4      	subs	r4, #244	; 0xf4
 800b9e0:	441f      	add	r7, r3
 800b9e2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800b9e6:	42bd      	cmp	r5, r7
 800b9e8:	f73f af47 	bgt.w	800b87a <__kernel_rem_pio2f+0xc2>
 800b9ec:	9b06      	ldr	r3, [sp, #24]
 800b9ee:	f04f 0a00 	mov.w	sl, #0
 800b9f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9f6:	f7f5 f907 	bl	8000c08 <__aeabi_i2f>
 800b9fa:	f04f 0b00 	mov.w	fp, #0
 800b9fe:	f844 0f04 	str.w	r0, [r4, #4]!
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	459a      	cmp	sl, r3
 800ba06:	dd35      	ble.n	800ba74 <__kernel_rem_pio2f+0x2bc>
 800ba08:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800ba0c:	3501      	adds	r5, #1
 800ba0e:	e7ea      	b.n	800b9e6 <__kernel_rem_pio2f+0x22e>
 800ba10:	2502      	movs	r5, #2
 800ba12:	e773      	b.n	800b8fc <__kernel_rem_pio2f+0x144>
 800ba14:	ab08      	add	r3, sp, #32
 800ba16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1a:	f1b9 0f00 	cmp.w	r9, #0
 800ba1e:	d109      	bne.n	800ba34 <__kernel_rem_pio2f+0x27c>
 800ba20:	b12b      	cbz	r3, 800ba2e <__kernel_rem_pio2f+0x276>
 800ba22:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ba26:	a908      	add	r1, sp, #32
 800ba28:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	3201      	adds	r2, #1
 800ba30:	4699      	mov	r9, r3
 800ba32:	e767      	b.n	800b904 <__kernel_rem_pio2f+0x14c>
 800ba34:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800ba38:	a908      	add	r1, sp, #32
 800ba3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba3e:	464b      	mov	r3, r9
 800ba40:	e7f5      	b.n	800ba2e <__kernel_rem_pio2f+0x276>
 800ba42:	1e7a      	subs	r2, r7, #1
 800ba44:	ab08      	add	r3, sp, #32
 800ba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba4e:	a908      	add	r1, sp, #32
 800ba50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba54:	e761      	b.n	800b91a <__kernel_rem_pio2f+0x162>
 800ba56:	1e7a      	subs	r2, r7, #1
 800ba58:	ab08      	add	r3, sp, #32
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba62:	e7f4      	b.n	800ba4e <__kernel_rem_pio2f+0x296>
 800ba64:	a908      	add	r1, sp, #32
 800ba66:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	e7a0      	b.n	800b9b2 <__kernel_rem_pio2f+0x1fa>
 800ba70:	3301      	adds	r3, #1
 800ba72:	e7a6      	b.n	800b9c2 <__kernel_rem_pio2f+0x20a>
 800ba74:	fb08 f30a 	mul.w	r3, r8, sl
 800ba78:	9a05      	ldr	r2, [sp, #20]
 800ba7a:	58e0      	ldr	r0, [r4, r3]
 800ba7c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800ba80:	f7f5 f916 	bl	8000cb0 <__aeabi_fmul>
 800ba84:	4601      	mov	r1, r0
 800ba86:	4658      	mov	r0, fp
 800ba88:	f7f5 f80a 	bl	8000aa0 <__addsf3>
 800ba8c:	f10a 0a01 	add.w	sl, sl, #1
 800ba90:	4683      	mov	fp, r0
 800ba92:	e7b6      	b.n	800ba02 <__kernel_rem_pio2f+0x24a>
 800ba94:	0800c748 	.word	0x0800c748
 800ba98:	3c01      	subs	r4, #1
 800ba9a:	ab08      	add	r3, sp, #32
 800ba9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800baa0:	3e08      	subs	r6, #8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0f8      	beq.n	800ba98 <__kernel_rem_pio2f+0x2e0>
 800baa6:	4631      	mov	r1, r6
 800baa8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800baac:	f000 fa9e 	bl	800bfec <scalbnf>
 800bab0:	46a1      	mov	r9, r4
 800bab2:	4682      	mov	sl, r0
 800bab4:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 800bab8:	ae44      	add	r6, sp, #272	; 0x110
 800baba:	f1b9 0f00 	cmp.w	r9, #0
 800babe:	da3f      	bge.n	800bb40 <__kernel_rem_pio2f+0x388>
 800bac0:	2700      	movs	r7, #0
 800bac2:	f04f 0b00 	mov.w	fp, #0
 800bac6:	4b82      	ldr	r3, [pc, #520]	; (800bcd0 <__kernel_rem_pio2f+0x518>)
 800bac8:	aa30      	add	r2, sp, #192	; 0xc0
 800baca:	ebb4 0a07 	subs.w	sl, r4, r7
 800bace:	d462      	bmi.n	800bb96 <__kernel_rem_pio2f+0x3de>
 800bad0:	a944      	add	r1, sp, #272	; 0x110
 800bad2:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 800bad6:	46d9      	mov	r9, fp
 800bad8:	2600      	movs	r6, #0
 800bada:	e053      	b.n	800bb84 <__kernel_rem_pio2f+0x3cc>
 800badc:	4271      	negs	r1, r6
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 fa84 	bl	800bfec <scalbnf>
 800bae4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bae8:	4604      	mov	r4, r0
 800baea:	f7f5 fa93 	bl	8001014 <__aeabi_fcmpge>
 800baee:	b1f8      	cbz	r0, 800bb30 <__kernel_rem_pio2f+0x378>
 800baf0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800baf4:	4620      	mov	r0, r4
 800baf6:	f7f5 f8db 	bl	8000cb0 <__aeabi_fmul>
 800bafa:	f7f5 fab5 	bl	8001068 <__aeabi_f2iz>
 800bafe:	f7f5 f883 	bl	8000c08 <__aeabi_i2f>
 800bb02:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800bb06:	4681      	mov	r9, r0
 800bb08:	f7f5 f8d2 	bl	8000cb0 <__aeabi_fmul>
 800bb0c:	4601      	mov	r1, r0
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7f4 ffc4 	bl	8000a9c <__aeabi_fsub>
 800bb14:	f7f5 faa8 	bl	8001068 <__aeabi_f2iz>
 800bb18:	ab08      	add	r3, sp, #32
 800bb1a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bb1e:	4648      	mov	r0, r9
 800bb20:	f7f5 faa2 	bl	8001068 <__aeabi_f2iz>
 800bb24:	1c7c      	adds	r4, r7, #1
 800bb26:	ab08      	add	r3, sp, #32
 800bb28:	3608      	adds	r6, #8
 800bb2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb2e:	e7ba      	b.n	800baa6 <__kernel_rem_pio2f+0x2ee>
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7f5 fa99 	bl	8001068 <__aeabi_f2iz>
 800bb36:	ab08      	add	r3, sp, #32
 800bb38:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800bb3c:	463c      	mov	r4, r7
 800bb3e:	e7b2      	b.n	800baa6 <__kernel_rem_pio2f+0x2ee>
 800bb40:	ab08      	add	r3, sp, #32
 800bb42:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800bb46:	f7f5 f85f 	bl	8000c08 <__aeabi_i2f>
 800bb4a:	4651      	mov	r1, sl
 800bb4c:	f7f5 f8b0 	bl	8000cb0 <__aeabi_fmul>
 800bb50:	4639      	mov	r1, r7
 800bb52:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 800bb56:	4650      	mov	r0, sl
 800bb58:	f7f5 f8aa 	bl	8000cb0 <__aeabi_fmul>
 800bb5c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bb60:	4682      	mov	sl, r0
 800bb62:	e7aa      	b.n	800baba <__kernel_rem_pio2f+0x302>
 800bb64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb68:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 800bb6c:	9204      	str	r2, [sp, #16]
 800bb6e:	9303      	str	r3, [sp, #12]
 800bb70:	f7f5 f89e 	bl	8000cb0 <__aeabi_fmul>
 800bb74:	4601      	mov	r1, r0
 800bb76:	4648      	mov	r0, r9
 800bb78:	f7f4 ff92 	bl	8000aa0 <__addsf3>
 800bb7c:	4681      	mov	r9, r0
 800bb7e:	9a04      	ldr	r2, [sp, #16]
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	3601      	adds	r6, #1
 800bb84:	9902      	ldr	r1, [sp, #8]
 800bb86:	428e      	cmp	r6, r1
 800bb88:	dc01      	bgt.n	800bb8e <__kernel_rem_pio2f+0x3d6>
 800bb8a:	42be      	cmp	r6, r7
 800bb8c:	ddea      	ble.n	800bb64 <__kernel_rem_pio2f+0x3ac>
 800bb8e:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 800bb92:	3701      	adds	r7, #1
 800bb94:	e799      	b.n	800baca <__kernel_rem_pio2f+0x312>
 800bb96:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d826      	bhi.n	800bbea <__kernel_rem_pio2f+0x432>
 800bb9c:	e8df f003 	tbb	[pc, r3]
 800bba0:	2a02021c 	.word	0x2a02021c
 800bba4:	4626      	mov	r6, r4
 800bba6:	2000      	movs	r0, #0
 800bba8:	af30      	add	r7, sp, #192	; 0xc0
 800bbaa:	2e00      	cmp	r6, #0
 800bbac:	da40      	bge.n	800bc30 <__kernel_rem_pio2f+0x478>
 800bbae:	2d00      	cmp	r5, #0
 800bbb0:	d044      	beq.n	800bc3c <__kernel_rem_pio2f+0x484>
 800bbb2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800bbb6:	9a01      	ldr	r2, [sp, #4]
 800bbb8:	af58      	add	r7, sp, #352	; 0x160
 800bbba:	4601      	mov	r1, r0
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800bbc2:	f7f4 ff6b 	bl	8000a9c <__aeabi_fsub>
 800bbc6:	2601      	movs	r6, #1
 800bbc8:	42b4      	cmp	r4, r6
 800bbca:	da39      	bge.n	800bc40 <__kernel_rem_pio2f+0x488>
 800bbcc:	b10d      	cbz	r5, 800bbd2 <__kernel_rem_pio2f+0x41a>
 800bbce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bbd2:	9b01      	ldr	r3, [sp, #4]
 800bbd4:	6058      	str	r0, [r3, #4]
 800bbd6:	e008      	b.n	800bbea <__kernel_rem_pio2f+0x432>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	ae30      	add	r6, sp, #192	; 0xc0
 800bbdc:	2c00      	cmp	r4, #0
 800bbde:	da21      	bge.n	800bc24 <__kernel_rem_pio2f+0x46c>
 800bbe0:	b10d      	cbz	r5, 800bbe6 <__kernel_rem_pio2f+0x42e>
 800bbe2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bbe6:	9b01      	ldr	r3, [sp, #4]
 800bbe8:	6018      	str	r0, [r3, #0]
 800bbea:	f008 0007 	and.w	r0, r8, #7
 800bbee:	b059      	add	sp, #356	; 0x164
 800bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800bbf8:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 800bbfc:	4637      	mov	r7, r6
 800bbfe:	46a1      	mov	r9, r4
 800bc00:	f1b9 0f00 	cmp.w	r9, #0
 800bc04:	dc22      	bgt.n	800bc4c <__kernel_rem_pio2f+0x494>
 800bc06:	4627      	mov	r7, r4
 800bc08:	2f01      	cmp	r7, #1
 800bc0a:	dc38      	bgt.n	800bc7e <__kernel_rem_pio2f+0x4c6>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	2c01      	cmp	r4, #1
 800bc10:	dc4c      	bgt.n	800bcac <__kernel_rem_pio2f+0x4f4>
 800bc12:	2d00      	cmp	r5, #0
 800bc14:	d150      	bne.n	800bcb8 <__kernel_rem_pio2f+0x500>
 800bc16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800bc18:	9a01      	ldr	r2, [sp, #4]
 800bc1a:	6013      	str	r3, [r2, #0]
 800bc1c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bc1e:	6053      	str	r3, [r2, #4]
 800bc20:	6090      	str	r0, [r2, #8]
 800bc22:	e7e2      	b.n	800bbea <__kernel_rem_pio2f+0x432>
 800bc24:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800bc28:	f7f4 ff3a 	bl	8000aa0 <__addsf3>
 800bc2c:	3c01      	subs	r4, #1
 800bc2e:	e7d5      	b.n	800bbdc <__kernel_rem_pio2f+0x424>
 800bc30:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bc34:	f7f4 ff34 	bl	8000aa0 <__addsf3>
 800bc38:	3e01      	subs	r6, #1
 800bc3a:	e7b6      	b.n	800bbaa <__kernel_rem_pio2f+0x3f2>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	e7ba      	b.n	800bbb6 <__kernel_rem_pio2f+0x3fe>
 800bc40:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bc44:	f7f4 ff2c 	bl	8000aa0 <__addsf3>
 800bc48:	3601      	adds	r6, #1
 800bc4a:	e7bd      	b.n	800bbc8 <__kernel_rem_pio2f+0x410>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bc52:	4619      	mov	r1, r3
 800bc54:	4610      	mov	r0, r2
 800bc56:	9303      	str	r3, [sp, #12]
 800bc58:	9202      	str	r2, [sp, #8]
 800bc5a:	f7f4 ff21 	bl	8000aa0 <__addsf3>
 800bc5e:	9a02      	ldr	r2, [sp, #8]
 800bc60:	4601      	mov	r1, r0
 800bc62:	4683      	mov	fp, r0
 800bc64:	4610      	mov	r0, r2
 800bc66:	f7f4 ff19 	bl	8000a9c <__aeabi_fsub>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bc70:	4619      	mov	r1, r3
 800bc72:	f7f4 ff15 	bl	8000aa0 <__addsf3>
 800bc76:	6038      	str	r0, [r7, #0]
 800bc78:	f847 bd04 	str.w	fp, [r7, #-4]!
 800bc7c:	e7c0      	b.n	800bc00 <__kernel_rem_pio2f+0x448>
 800bc7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bc82:	f8d6 b000 	ldr.w	fp, [r6]
 800bc86:	4618      	mov	r0, r3
 800bc88:	4659      	mov	r1, fp
 800bc8a:	9302      	str	r3, [sp, #8]
 800bc8c:	f7f4 ff08 	bl	8000aa0 <__addsf3>
 800bc90:	9b02      	ldr	r3, [sp, #8]
 800bc92:	4601      	mov	r1, r0
 800bc94:	4681      	mov	r9, r0
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f4 ff00 	bl	8000a9c <__aeabi_fsub>
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	f7f4 feff 	bl	8000aa0 <__addsf3>
 800bca2:	3f01      	subs	r7, #1
 800bca4:	6030      	str	r0, [r6, #0]
 800bca6:	f846 9d04 	str.w	r9, [r6, #-4]!
 800bcaa:	e7ad      	b.n	800bc08 <__kernel_rem_pio2f+0x450>
 800bcac:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800bcb0:	f7f4 fef6 	bl	8000aa0 <__addsf3>
 800bcb4:	3c01      	subs	r4, #1
 800bcb6:	e7aa      	b.n	800bc0e <__kernel_rem_pio2f+0x456>
 800bcb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800bcba:	9a01      	ldr	r2, [sp, #4]
 800bcbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bcc0:	6013      	str	r3, [r2, #0]
 800bcc2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bcc4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bcc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bccc:	6053      	str	r3, [r2, #4]
 800bcce:	e7a7      	b.n	800bc20 <__kernel_rem_pio2f+0x468>
 800bcd0:	0800c71c 	.word	0x0800c71c

0800bcd4 <__kernel_sinf>:
 800bcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bcdc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bce0:	4604      	mov	r4, r0
 800bce2:	460f      	mov	r7, r1
 800bce4:	4691      	mov	r9, r2
 800bce6:	da03      	bge.n	800bcf0 <__kernel_sinf+0x1c>
 800bce8:	f7f5 f9be 	bl	8001068 <__aeabi_f2iz>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d035      	beq.n	800bd5c <__kernel_sinf+0x88>
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f7f4 ffdc 	bl	8000cb0 <__aeabi_fmul>
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f7f4 ffd7 	bl	8000cb0 <__aeabi_fmul>
 800bd02:	4929      	ldr	r1, [pc, #164]	; (800bda8 <__kernel_sinf+0xd4>)
 800bd04:	4606      	mov	r6, r0
 800bd06:	4628      	mov	r0, r5
 800bd08:	f7f4 ffd2 	bl	8000cb0 <__aeabi_fmul>
 800bd0c:	4927      	ldr	r1, [pc, #156]	; (800bdac <__kernel_sinf+0xd8>)
 800bd0e:	f7f4 fec5 	bl	8000a9c <__aeabi_fsub>
 800bd12:	4629      	mov	r1, r5
 800bd14:	f7f4 ffcc 	bl	8000cb0 <__aeabi_fmul>
 800bd18:	4925      	ldr	r1, [pc, #148]	; (800bdb0 <__kernel_sinf+0xdc>)
 800bd1a:	f7f4 fec1 	bl	8000aa0 <__addsf3>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 ffc6 	bl	8000cb0 <__aeabi_fmul>
 800bd24:	4923      	ldr	r1, [pc, #140]	; (800bdb4 <__kernel_sinf+0xe0>)
 800bd26:	f7f4 feb9 	bl	8000a9c <__aeabi_fsub>
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 ffc0 	bl	8000cb0 <__aeabi_fmul>
 800bd30:	4921      	ldr	r1, [pc, #132]	; (800bdb8 <__kernel_sinf+0xe4>)
 800bd32:	f7f4 feb5 	bl	8000aa0 <__addsf3>
 800bd36:	4680      	mov	r8, r0
 800bd38:	f1b9 0f00 	cmp.w	r9, #0
 800bd3c:	d111      	bne.n	800bd62 <__kernel_sinf+0x8e>
 800bd3e:	4601      	mov	r1, r0
 800bd40:	4628      	mov	r0, r5
 800bd42:	f7f4 ffb5 	bl	8000cb0 <__aeabi_fmul>
 800bd46:	491d      	ldr	r1, [pc, #116]	; (800bdbc <__kernel_sinf+0xe8>)
 800bd48:	f7f4 fea8 	bl	8000a9c <__aeabi_fsub>
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	f7f4 ffaf 	bl	8000cb0 <__aeabi_fmul>
 800bd52:	4601      	mov	r1, r0
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7f4 fea3 	bl	8000aa0 <__addsf3>
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd62:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bd66:	4638      	mov	r0, r7
 800bd68:	f7f4 ffa2 	bl	8000cb0 <__aeabi_fmul>
 800bd6c:	4641      	mov	r1, r8
 800bd6e:	4681      	mov	r9, r0
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7f4 ff9d 	bl	8000cb0 <__aeabi_fmul>
 800bd76:	4601      	mov	r1, r0
 800bd78:	4648      	mov	r0, r9
 800bd7a:	f7f4 fe8f 	bl	8000a9c <__aeabi_fsub>
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f7f4 ff96 	bl	8000cb0 <__aeabi_fmul>
 800bd84:	4639      	mov	r1, r7
 800bd86:	f7f4 fe89 	bl	8000a9c <__aeabi_fsub>
 800bd8a:	490c      	ldr	r1, [pc, #48]	; (800bdbc <__kernel_sinf+0xe8>)
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7f4 ff8e 	bl	8000cb0 <__aeabi_fmul>
 800bd94:	4601      	mov	r1, r0
 800bd96:	4628      	mov	r0, r5
 800bd98:	f7f4 fe82 	bl	8000aa0 <__addsf3>
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7f4 fe7c 	bl	8000a9c <__aeabi_fsub>
 800bda4:	e7d9      	b.n	800bd5a <__kernel_sinf+0x86>
 800bda6:	bf00      	nop
 800bda8:	2f2ec9d3 	.word	0x2f2ec9d3
 800bdac:	32d72f34 	.word	0x32d72f34
 800bdb0:	3638ef1b 	.word	0x3638ef1b
 800bdb4:	39500d01 	.word	0x39500d01
 800bdb8:	3c088889 	.word	0x3c088889
 800bdbc:	3e2aaaab 	.word	0x3e2aaaab

0800bdc0 <matherr>:
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	4770      	bx	lr

0800bdc4 <atanf>:
 800bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bdcc:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	4607      	mov	r7, r0
 800bdd4:	db0e      	blt.n	800bdf4 <atanf+0x30>
 800bdd6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bdda:	dd04      	ble.n	800bde6 <atanf+0x22>
 800bddc:	4601      	mov	r1, r0
 800bdde:	f7f4 fe5f 	bl	8000aa0 <__addsf3>
 800bde2:	4604      	mov	r4, r0
 800bde4:	e003      	b.n	800bdee <atanf+0x2a>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f300 80d2 	bgt.w	800bf90 <atanf+0x1cc>
 800bdec:	4c69      	ldr	r4, [pc, #420]	; (800bf94 <atanf+0x1d0>)
 800bdee:	4620      	mov	r0, r4
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	4b68      	ldr	r3, [pc, #416]	; (800bf98 <atanf+0x1d4>)
 800bdf6:	429d      	cmp	r5, r3
 800bdf8:	dc0e      	bgt.n	800be18 <atanf+0x54>
 800bdfa:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800bdfe:	da08      	bge.n	800be12 <atanf+0x4e>
 800be00:	4966      	ldr	r1, [pc, #408]	; (800bf9c <atanf+0x1d8>)
 800be02:	f7f4 fe4d 	bl	8000aa0 <__addsf3>
 800be06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be0a:	f7f5 f90d 	bl	8001028 <__aeabi_fcmpgt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d1ed      	bne.n	800bdee <atanf+0x2a>
 800be12:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800be16:	e01c      	b.n	800be52 <atanf+0x8e>
 800be18:	f000 f8e4 	bl	800bfe4 <fabsf>
 800be1c:	4b60      	ldr	r3, [pc, #384]	; (800bfa0 <atanf+0x1dc>)
 800be1e:	4604      	mov	r4, r0
 800be20:	429d      	cmp	r5, r3
 800be22:	dc7c      	bgt.n	800bf1e <atanf+0x15a>
 800be24:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800be28:	429d      	cmp	r5, r3
 800be2a:	dc67      	bgt.n	800befc <atanf+0x138>
 800be2c:	4601      	mov	r1, r0
 800be2e:	f7f4 fe37 	bl	8000aa0 <__addsf3>
 800be32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800be36:	f7f4 fe31 	bl	8000a9c <__aeabi_fsub>
 800be3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800be3e:	4605      	mov	r5, r0
 800be40:	4620      	mov	r0, r4
 800be42:	f7f4 fe2d 	bl	8000aa0 <__addsf3>
 800be46:	4601      	mov	r1, r0
 800be48:	4628      	mov	r0, r5
 800be4a:	f7f4 ffe5 	bl	8000e18 <__aeabi_fdiv>
 800be4e:	2600      	movs	r6, #0
 800be50:	4604      	mov	r4, r0
 800be52:	4621      	mov	r1, r4
 800be54:	4620      	mov	r0, r4
 800be56:	f7f4 ff2b 	bl	8000cb0 <__aeabi_fmul>
 800be5a:	4601      	mov	r1, r0
 800be5c:	4680      	mov	r8, r0
 800be5e:	f7f4 ff27 	bl	8000cb0 <__aeabi_fmul>
 800be62:	4605      	mov	r5, r0
 800be64:	494f      	ldr	r1, [pc, #316]	; (800bfa4 <atanf+0x1e0>)
 800be66:	f7f4 ff23 	bl	8000cb0 <__aeabi_fmul>
 800be6a:	494f      	ldr	r1, [pc, #316]	; (800bfa8 <atanf+0x1e4>)
 800be6c:	f7f4 fe18 	bl	8000aa0 <__addsf3>
 800be70:	4629      	mov	r1, r5
 800be72:	f7f4 ff1d 	bl	8000cb0 <__aeabi_fmul>
 800be76:	494d      	ldr	r1, [pc, #308]	; (800bfac <atanf+0x1e8>)
 800be78:	f7f4 fe12 	bl	8000aa0 <__addsf3>
 800be7c:	4629      	mov	r1, r5
 800be7e:	f7f4 ff17 	bl	8000cb0 <__aeabi_fmul>
 800be82:	494b      	ldr	r1, [pc, #300]	; (800bfb0 <atanf+0x1ec>)
 800be84:	f7f4 fe0c 	bl	8000aa0 <__addsf3>
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 ff11 	bl	8000cb0 <__aeabi_fmul>
 800be8e:	4949      	ldr	r1, [pc, #292]	; (800bfb4 <atanf+0x1f0>)
 800be90:	f7f4 fe06 	bl	8000aa0 <__addsf3>
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 ff0b 	bl	8000cb0 <__aeabi_fmul>
 800be9a:	4947      	ldr	r1, [pc, #284]	; (800bfb8 <atanf+0x1f4>)
 800be9c:	f7f4 fe00 	bl	8000aa0 <__addsf3>
 800bea0:	4641      	mov	r1, r8
 800bea2:	f7f4 ff05 	bl	8000cb0 <__aeabi_fmul>
 800bea6:	4945      	ldr	r1, [pc, #276]	; (800bfbc <atanf+0x1f8>)
 800bea8:	4680      	mov	r8, r0
 800beaa:	4628      	mov	r0, r5
 800beac:	f7f4 ff00 	bl	8000cb0 <__aeabi_fmul>
 800beb0:	4943      	ldr	r1, [pc, #268]	; (800bfc0 <atanf+0x1fc>)
 800beb2:	f7f4 fdf3 	bl	8000a9c <__aeabi_fsub>
 800beb6:	4629      	mov	r1, r5
 800beb8:	f7f4 fefa 	bl	8000cb0 <__aeabi_fmul>
 800bebc:	4941      	ldr	r1, [pc, #260]	; (800bfc4 <atanf+0x200>)
 800bebe:	f7f4 fded 	bl	8000a9c <__aeabi_fsub>
 800bec2:	4629      	mov	r1, r5
 800bec4:	f7f4 fef4 	bl	8000cb0 <__aeabi_fmul>
 800bec8:	493f      	ldr	r1, [pc, #252]	; (800bfc8 <atanf+0x204>)
 800beca:	f7f4 fde7 	bl	8000a9c <__aeabi_fsub>
 800bece:	4629      	mov	r1, r5
 800bed0:	f7f4 feee 	bl	8000cb0 <__aeabi_fmul>
 800bed4:	493d      	ldr	r1, [pc, #244]	; (800bfcc <atanf+0x208>)
 800bed6:	f7f4 fde1 	bl	8000a9c <__aeabi_fsub>
 800beda:	4629      	mov	r1, r5
 800bedc:	f7f4 fee8 	bl	8000cb0 <__aeabi_fmul>
 800bee0:	1c73      	adds	r3, r6, #1
 800bee2:	4601      	mov	r1, r0
 800bee4:	4640      	mov	r0, r8
 800bee6:	d139      	bne.n	800bf5c <atanf+0x198>
 800bee8:	f7f4 fdda 	bl	8000aa0 <__addsf3>
 800beec:	4621      	mov	r1, r4
 800beee:	f7f4 fedf 	bl	8000cb0 <__aeabi_fmul>
 800bef2:	4601      	mov	r1, r0
 800bef4:	4620      	mov	r0, r4
 800bef6:	f7f4 fdd1 	bl	8000a9c <__aeabi_fsub>
 800befa:	e772      	b.n	800bde2 <atanf+0x1e>
 800befc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf00:	f7f4 fdcc 	bl	8000a9c <__aeabi_fsub>
 800bf04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf08:	4605      	mov	r5, r0
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f7f4 fdc8 	bl	8000aa0 <__addsf3>
 800bf10:	4601      	mov	r1, r0
 800bf12:	4628      	mov	r0, r5
 800bf14:	f7f4 ff80 	bl	8000e18 <__aeabi_fdiv>
 800bf18:	2601      	movs	r6, #1
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	e799      	b.n	800be52 <atanf+0x8e>
 800bf1e:	4b2c      	ldr	r3, [pc, #176]	; (800bfd0 <atanf+0x20c>)
 800bf20:	429d      	cmp	r5, r3
 800bf22:	dc14      	bgt.n	800bf4e <atanf+0x18a>
 800bf24:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bf28:	f7f4 fdb8 	bl	8000a9c <__aeabi_fsub>
 800bf2c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bf30:	4605      	mov	r5, r0
 800bf32:	4620      	mov	r0, r4
 800bf34:	f7f4 febc 	bl	8000cb0 <__aeabi_fmul>
 800bf38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bf3c:	f7f4 fdb0 	bl	8000aa0 <__addsf3>
 800bf40:	4601      	mov	r1, r0
 800bf42:	4628      	mov	r0, r5
 800bf44:	f7f4 ff68 	bl	8000e18 <__aeabi_fdiv>
 800bf48:	2602      	movs	r6, #2
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	e781      	b.n	800be52 <atanf+0x8e>
 800bf4e:	4601      	mov	r1, r0
 800bf50:	4820      	ldr	r0, [pc, #128]	; (800bfd4 <atanf+0x210>)
 800bf52:	f7f4 ff61 	bl	8000e18 <__aeabi_fdiv>
 800bf56:	2603      	movs	r6, #3
 800bf58:	4604      	mov	r4, r0
 800bf5a:	e77a      	b.n	800be52 <atanf+0x8e>
 800bf5c:	f7f4 fda0 	bl	8000aa0 <__addsf3>
 800bf60:	4621      	mov	r1, r4
 800bf62:	f7f4 fea5 	bl	8000cb0 <__aeabi_fmul>
 800bf66:	4b1c      	ldr	r3, [pc, #112]	; (800bfd8 <atanf+0x214>)
 800bf68:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bf6c:	f7f4 fd96 	bl	8000a9c <__aeabi_fsub>
 800bf70:	4621      	mov	r1, r4
 800bf72:	f7f4 fd93 	bl	8000a9c <__aeabi_fsub>
 800bf76:	4b19      	ldr	r3, [pc, #100]	; (800bfdc <atanf+0x218>)
 800bf78:	4601      	mov	r1, r0
 800bf7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bf7e:	f7f4 fd8d 	bl	8000a9c <__aeabi_fsub>
 800bf82:	2f00      	cmp	r7, #0
 800bf84:	4604      	mov	r4, r0
 800bf86:	f6bf af32 	bge.w	800bdee <atanf+0x2a>
 800bf8a:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800bf8e:	e72e      	b.n	800bdee <atanf+0x2a>
 800bf90:	4c13      	ldr	r4, [pc, #76]	; (800bfe0 <atanf+0x21c>)
 800bf92:	e72c      	b.n	800bdee <atanf+0x2a>
 800bf94:	bfc90fdb 	.word	0xbfc90fdb
 800bf98:	3edfffff 	.word	0x3edfffff
 800bf9c:	7149f2ca 	.word	0x7149f2ca
 800bfa0:	3f97ffff 	.word	0x3f97ffff
 800bfa4:	3c8569d7 	.word	0x3c8569d7
 800bfa8:	3d4bda59 	.word	0x3d4bda59
 800bfac:	3d886b35 	.word	0x3d886b35
 800bfb0:	3dba2e6e 	.word	0x3dba2e6e
 800bfb4:	3e124925 	.word	0x3e124925
 800bfb8:	3eaaaaab 	.word	0x3eaaaaab
 800bfbc:	bd15a221 	.word	0xbd15a221
 800bfc0:	3d6ef16b 	.word	0x3d6ef16b
 800bfc4:	3d9d8795 	.word	0x3d9d8795
 800bfc8:	3de38e38 	.word	0x3de38e38
 800bfcc:	3e4ccccd 	.word	0x3e4ccccd
 800bfd0:	401bffff 	.word	0x401bffff
 800bfd4:	bf800000 	.word	0xbf800000
 800bfd8:	0800c764 	.word	0x0800c764
 800bfdc:	0800c754 	.word	0x0800c754
 800bfe0:	3fc90fdb 	.word	0x3fc90fdb

0800bfe4 <fabsf>:
 800bfe4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bfe8:	4770      	bx	lr
	...

0800bfec <scalbnf>:
 800bfec:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800bff0:	b510      	push	{r4, lr}
 800bff2:	4602      	mov	r2, r0
 800bff4:	460c      	mov	r4, r1
 800bff6:	d028      	beq.n	800c04a <scalbnf+0x5e>
 800bff8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bffc:	d304      	bcc.n	800c008 <scalbnf+0x1c>
 800bffe:	4601      	mov	r1, r0
 800c000:	f7f4 fd4e 	bl	8000aa0 <__addsf3>
 800c004:	4602      	mov	r2, r0
 800c006:	e020      	b.n	800c04a <scalbnf+0x5e>
 800c008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c00c:	d215      	bcs.n	800c03a <scalbnf+0x4e>
 800c00e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c012:	f7f4 fe4d 	bl	8000cb0 <__aeabi_fmul>
 800c016:	4b18      	ldr	r3, [pc, #96]	; (800c078 <scalbnf+0x8c>)
 800c018:	4602      	mov	r2, r0
 800c01a:	429c      	cmp	r4, r3
 800c01c:	db22      	blt.n	800c064 <scalbnf+0x78>
 800c01e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c022:	3b19      	subs	r3, #25
 800c024:	4423      	add	r3, r4
 800c026:	2bfe      	cmp	r3, #254	; 0xfe
 800c028:	dd09      	ble.n	800c03e <scalbnf+0x52>
 800c02a:	4611      	mov	r1, r2
 800c02c:	4813      	ldr	r0, [pc, #76]	; (800c07c <scalbnf+0x90>)
 800c02e:	f000 f829 	bl	800c084 <copysignf>
 800c032:	4912      	ldr	r1, [pc, #72]	; (800c07c <scalbnf+0x90>)
 800c034:	f7f4 fe3c 	bl	8000cb0 <__aeabi_fmul>
 800c038:	e7e4      	b.n	800c004 <scalbnf+0x18>
 800c03a:	0ddb      	lsrs	r3, r3, #23
 800c03c:	e7f2      	b.n	800c024 <scalbnf+0x38>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dd05      	ble.n	800c04e <scalbnf+0x62>
 800c042:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c046:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800c04a:	4610      	mov	r0, r2
 800c04c:	bd10      	pop	{r4, pc}
 800c04e:	f113 0f16 	cmn.w	r3, #22
 800c052:	da09      	bge.n	800c068 <scalbnf+0x7c>
 800c054:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c058:	429c      	cmp	r4, r3
 800c05a:	4611      	mov	r1, r2
 800c05c:	dce6      	bgt.n	800c02c <scalbnf+0x40>
 800c05e:	4808      	ldr	r0, [pc, #32]	; (800c080 <scalbnf+0x94>)
 800c060:	f000 f810 	bl	800c084 <copysignf>
 800c064:	4906      	ldr	r1, [pc, #24]	; (800c080 <scalbnf+0x94>)
 800c066:	e7e5      	b.n	800c034 <scalbnf+0x48>
 800c068:	3319      	adds	r3, #25
 800c06a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c06e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800c072:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c076:	e7dd      	b.n	800c034 <scalbnf+0x48>
 800c078:	ffff3cb0 	.word	0xffff3cb0
 800c07c:	7149f2ca 	.word	0x7149f2ca
 800c080:	0da24260 	.word	0x0da24260

0800c084 <copysignf>:
 800c084:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c088:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c08c:	4308      	orrs	r0, r1
 800c08e:	4770      	bx	lr

0800c090 <__errno>:
 800c090:	4b01      	ldr	r3, [pc, #4]	; (800c098 <__errno+0x8>)
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	200000e0 	.word	0x200000e0

0800c09c <_init>:
 800c09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09e:	bf00      	nop
 800c0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a2:	bc08      	pop	{r3}
 800c0a4:	469e      	mov	lr, r3
 800c0a6:	4770      	bx	lr

0800c0a8 <_fini>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr
